// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_pgclient

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// MockBaseModel is an autogenerated mock type for the BaseModel type
type MockBaseModel struct {
	mock.Mock
}

type MockBaseModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBaseModel) EXPECT() *MockBaseModel_Expecter {
	return &MockBaseModel_Expecter{mock: &_m.Mock}
}

// BeforeCreate provides a mock function with given fields: db
func (_m *MockBaseModel) BeforeCreate(db *gorm.DB) error {
	ret := _m.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for BeforeCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBaseModel_BeforeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeforeCreate'
type MockBaseModel_BeforeCreate_Call struct {
	*mock.Call
}

// BeforeCreate is a helper method to define mock.On call
//   - db *gorm.DB
func (_e *MockBaseModel_Expecter) BeforeCreate(db interface{}) *MockBaseModel_BeforeCreate_Call {
	return &MockBaseModel_BeforeCreate_Call{Call: _e.mock.On("BeforeCreate", db)}
}

func (_c *MockBaseModel_BeforeCreate_Call) Run(run func(db *gorm.DB)) *MockBaseModel_BeforeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *MockBaseModel_BeforeCreate_Call) Return(_a0 error) *MockBaseModel_BeforeCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseModel_BeforeCreate_Call) RunAndReturn(run func(*gorm.DB) error) *MockBaseModel_BeforeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryFilters provides a mock function with given fields: db, userId, orgIds
func (_m *MockBaseModel) GetQueryFilters(db *gorm.DB, userId uuid.UUID, orgIds []uuid.UUID) *gorm.DB {
	ret := _m.Called(db, userId, orgIds)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryFilters")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID, []uuid.UUID) *gorm.DB); ok {
		r0 = rf(db, userId, orgIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockBaseModel_GetQueryFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryFilters'
type MockBaseModel_GetQueryFilters_Call struct {
	*mock.Call
}

// GetQueryFilters is a helper method to define mock.On call
//   - db *gorm.DB
//   - userId uuid.UUID
//   - orgIds []uuid.UUID
func (_e *MockBaseModel_Expecter) GetQueryFilters(db interface{}, userId interface{}, orgIds interface{}) *MockBaseModel_GetQueryFilters_Call {
	return &MockBaseModel_GetQueryFilters_Call{Call: _e.mock.On("GetQueryFilters", db, userId, orgIds)}
}

func (_c *MockBaseModel_GetQueryFilters_Call) Run(run func(db *gorm.DB, userId uuid.UUID, orgIds []uuid.UUID)) *MockBaseModel_GetQueryFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockBaseModel_GetQueryFilters_Call) Return(_a0 *gorm.DB) *MockBaseModel_GetQueryFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseModel_GetQueryFilters_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID, []uuid.UUID) *gorm.DB) *MockBaseModel_GetQueryFilters_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBaseModel creates a new instance of MockBaseModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseModel {
	mock := &MockBaseModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

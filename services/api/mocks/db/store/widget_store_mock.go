// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockWidgetStore is an autogenerated mock type for the WidgetStore type
type MockWidgetStore struct {
	mock.Mock
}

type MockWidgetStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWidgetStore) EXPECT() *MockWidgetStore_Expecter {
	return &MockWidgetStore_Expecter{mock: &_m.Mock}
}

// CreateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockWidgetStore) CreateWidgetInstance(ctx context.Context, widgetInstance *models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for CreateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetStore_CreateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWidgetInstance'
type MockWidgetStore_CreateWidgetInstance_Call struct {
	*mock.Call
}

// CreateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance *models.WidgetInstance
func (_e *MockWidgetStore_Expecter) CreateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockWidgetStore_CreateWidgetInstance_Call {
	return &MockWidgetStore_CreateWidgetInstance_Call{Call: _e.mock.On("CreateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockWidgetStore_CreateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance *models.WidgetInstance)) *MockWidgetStore_CreateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WidgetInstance))
	})
	return _c
}

func (_c *MockWidgetStore_CreateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockWidgetStore_CreateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetStore_CreateWidgetInstance_Call) RunAndReturn(run func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)) *MockWidgetStore_CreateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetInstanceByID provides a mock function with given fields: ctx, widgetInstanceID
func (_m *MockWidgetStore) GetWidgetInstanceByID(ctx context.Context, widgetInstanceID uuid.UUID) (models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetInstanceByID")
	}

	var r0 models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstanceID)
	} else {
		r0 = ret.Get(0).(models.WidgetInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, widgetInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetStore_GetWidgetInstanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetInstanceByID'
type MockWidgetStore_GetWidgetInstanceByID_Call struct {
	*mock.Call
}

// GetWidgetInstanceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstanceID uuid.UUID
func (_e *MockWidgetStore_Expecter) GetWidgetInstanceByID(ctx interface{}, widgetInstanceID interface{}) *MockWidgetStore_GetWidgetInstanceByID_Call {
	return &MockWidgetStore_GetWidgetInstanceByID_Call{Call: _e.mock.On("GetWidgetInstanceByID", ctx, widgetInstanceID)}
}

func (_c *MockWidgetStore_GetWidgetInstanceByID_Call) Run(run func(ctx context.Context, widgetInstanceID uuid.UUID)) *MockWidgetStore_GetWidgetInstanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWidgetStore_GetWidgetInstanceByID_Call) Return(_a0 models.WidgetInstance, _a1 error) *MockWidgetStore_GetWidgetInstanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetStore_GetWidgetInstanceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.WidgetInstance, error)) *MockWidgetStore_GetWidgetInstanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetTemplate provides a mock function with given fields: ctx, widgetType
func (_m *MockWidgetStore) GetWidgetTemplate(ctx context.Context, widgetType string) (models.Widget, error) {
	ret := _m.Called(ctx, widgetType)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetTemplate")
	}

	var r0 models.Widget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Widget, error)); ok {
		return rf(ctx, widgetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Widget); ok {
		r0 = rf(ctx, widgetType)
	} else {
		r0 = ret.Get(0).(models.Widget)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, widgetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetStore_GetWidgetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetTemplate'
type MockWidgetStore_GetWidgetTemplate_Call struct {
	*mock.Call
}

// GetWidgetTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetType string
func (_e *MockWidgetStore_Expecter) GetWidgetTemplate(ctx interface{}, widgetType interface{}) *MockWidgetStore_GetWidgetTemplate_Call {
	return &MockWidgetStore_GetWidgetTemplate_Call{Call: _e.mock.On("GetWidgetTemplate", ctx, widgetType)}
}

func (_c *MockWidgetStore_GetWidgetTemplate_Call) Run(run func(ctx context.Context, widgetType string)) *MockWidgetStore_GetWidgetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWidgetStore_GetWidgetTemplate_Call) Return(_a0 models.Widget, _a1 error) *MockWidgetStore_GetWidgetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetStore_GetWidgetTemplate_Call) RunAndReturn(run func(context.Context, string) (models.Widget, error)) *MockWidgetStore_GetWidgetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockWidgetStore) UpdateWidgetInstance(ctx context.Context, widgetInstance *models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetStore_UpdateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWidgetInstance'
type MockWidgetStore_UpdateWidgetInstance_Call struct {
	*mock.Call
}

// UpdateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance *models.WidgetInstance
func (_e *MockWidgetStore_Expecter) UpdateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockWidgetStore_UpdateWidgetInstance_Call {
	return &MockWidgetStore_UpdateWidgetInstance_Call{Call: _e.mock.On("UpdateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockWidgetStore_UpdateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance *models.WidgetInstance)) *MockWidgetStore_UpdateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WidgetInstance))
	})
	return _c
}

func (_c *MockWidgetStore_UpdateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockWidgetStore_UpdateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetStore_UpdateWidgetInstance_Call) RunAndReturn(run func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)) *MockWidgetStore_UpdateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWidgetStore creates a new instance of MockWidgetStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWidgetStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWidgetStore {
	mock := &MockWidgetStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

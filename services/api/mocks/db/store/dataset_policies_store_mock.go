// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockdatasetPoliciesStore is an autogenerated mock type for the datasetPoliciesStore type
type MockdatasetPoliciesStore struct {
	mock.Mock
}

type MockdatasetPoliciesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdatasetPoliciesStore) EXPECT() *MockdatasetPoliciesStore_Expecter {
	return &MockdatasetPoliciesStore_Expecter{mock: &_m.Mock}
}

// CreateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockdatasetPoliciesStore) CreateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesStore_CreateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetPolicy'
type MockdatasetPoliciesStore_CreateDatasetPolicy_Call struct {
	*mock.Call
}

// CreateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockdatasetPoliciesStore_Expecter) CreateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockdatasetPoliciesStore_CreateDatasetPolicy_Call {
	return &MockdatasetPoliciesStore_CreateDatasetPolicy_Call{Call: _e.mock.On("CreateDatasetPolicy", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockdatasetPoliciesStore_CreateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockdatasetPoliciesStore_CreateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockdatasetPoliciesStore_CreateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesStore_CreateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesStore_CreateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesStore_CreateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId
func (_m *MockdatasetPoliciesStore) DeleteDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdatasetPoliciesStore_DeleteDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatasetPolicy'
type MockdatasetPoliciesStore_DeleteDatasetPolicy_Call struct {
	*mock.Call
}

// DeleteDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockdatasetPoliciesStore_Expecter) DeleteDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}) *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call {
	return &MockdatasetPoliciesStore_DeleteDatasetPolicy_Call{Call: _e.mock.On("DeleteDatasetPolicy", ctx, datasetId, audienceType, audienceId)}
}

func (_c *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call) Return(_a0 error) *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockdatasetPoliciesStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPolicies provides a mock function with given fields: ctx, datasetId
func (_m *MockdatasetPoliciesStore) GetDatasetPolicies(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesStore_GetDatasetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPolicies'
type MockdatasetPoliciesStore_GetDatasetPolicies_Call struct {
	*mock.Call
}

// GetDatasetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockdatasetPoliciesStore_Expecter) GetDatasetPolicies(ctx interface{}, datasetId interface{}) *MockdatasetPoliciesStore_GetDatasetPolicies_Call {
	return &MockdatasetPoliciesStore_GetDatasetPolicies_Call{Call: _e.mock.On("GetDatasetPolicies", ctx, datasetId)}
}

func (_c *MockdatasetPoliciesStore_GetDatasetPolicies_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockdatasetPoliciesStore_GetDatasetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockdatasetPoliciesStore_GetDatasetPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesStore_GetDatasetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesStore_GetDatasetPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesStore_GetDatasetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPoliciesByEmail provides a mock function with given fields: ctx, datasetId, email
func (_m *MockdatasetPoliciesStore) GetDatasetPoliciesByEmail(ctx context.Context, datasetId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, datasetId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPoliciesByEmail'
type MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call struct {
	*mock.Call
}

// GetDatasetPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - email string
func (_e *MockdatasetPoliciesStore_Expecter) GetDatasetPoliciesByEmail(ctx interface{}, datasetId interface{}, email interface{}) *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call {
	return &MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call{Call: _e.mock.On("GetDatasetPoliciesByEmail", ctx, datasetId, email)}
}

func (_c *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, email string)) *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockdatasetPoliciesStore) UpdateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesStore_UpdateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetPolicy'
type MockdatasetPoliciesStore_UpdateDatasetPolicy_Call struct {
	*mock.Call
}

// UpdateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockdatasetPoliciesStore_Expecter) UpdateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call {
	return &MockdatasetPoliciesStore_UpdateDatasetPolicy_Call{Call: _e.mock.On("UpdateDatasetPolicy", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdatasetPoliciesStore creates a new instance of MockdatasetPoliciesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdatasetPoliciesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdatasetPoliciesStore {
	mock := &MockdatasetPoliciesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockAuditLogStore is an autogenerated mock type for the AuditLogStore type
type MockAuditLogStore struct {
	mock.Mock
}

type MockAuditLogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogStore) EXPECT() *MockAuditLogStore_Expecter {
	return &MockAuditLogStore_Expecter{mock: &_m.Mock}
}

// CreateAuditLog provides a mock function with given fields: ctx, auditLog
func (_m *MockAuditLogStore) CreateAuditLog(ctx context.Context, auditLog models.AuditLog) (*models.AuditLog, error) {
	ret := _m.Called(ctx, auditLog)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditLog")
	}

	var r0 *models.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AuditLog) (*models.AuditLog, error)); ok {
		return rf(ctx, auditLog)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AuditLog) *models.AuditLog); ok {
		r0 = rf(ctx, auditLog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AuditLog) error); ok {
		r1 = rf(ctx, auditLog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditLogStore_CreateAuditLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditLog'
type MockAuditLogStore_CreateAuditLog_Call struct {
	*mock.Call
}

// CreateAuditLog is a helper method to define mock.On call
//   - ctx context.Context
//   - auditLog models.AuditLog
func (_e *MockAuditLogStore_Expecter) CreateAuditLog(ctx interface{}, auditLog interface{}) *MockAuditLogStore_CreateAuditLog_Call {
	return &MockAuditLogStore_CreateAuditLog_Call{Call: _e.mock.On("CreateAuditLog", ctx, auditLog)}
}

func (_c *MockAuditLogStore_CreateAuditLog_Call) Run(run func(ctx context.Context, auditLog models.AuditLog)) *MockAuditLogStore_CreateAuditLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.AuditLog))
	})
	return _c
}

func (_c *MockAuditLogStore_CreateAuditLog_Call) Return(_a0 *models.AuditLog, _a1 error) *MockAuditLogStore_CreateAuditLog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditLogStore_CreateAuditLog_Call) RunAndReturn(run func(context.Context, models.AuditLog) (*models.AuditLog, error)) *MockAuditLogStore_CreateAuditLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsByOrganizationId provides a mock function with given fields: ctx, organizationId, kind
func (_m *MockAuditLogStore) GetAuditLogsByOrganizationId(ctx context.Context, organizationId uuid.UUID, kind models.AuditLogKind) ([]models.AuditLog, error) {
	ret := _m.Called(ctx, organizationId, kind)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsByOrganizationId")
	}

	var r0 []models.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AuditLogKind) ([]models.AuditLog, error)); ok {
		return rf(ctx, organizationId, kind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AuditLogKind) []models.AuditLog); ok {
		r0 = rf(ctx, organizationId, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AuditLogKind) error); ok {
		r1 = rf(ctx, organizationId, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditLogStore_GetAuditLogsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsByOrganizationId'
type MockAuditLogStore_GetAuditLogsByOrganizationId_Call struct {
	*mock.Call
}

// GetAuditLogsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - kind models.AuditLogKind
func (_e *MockAuditLogStore_Expecter) GetAuditLogsByOrganizationId(ctx interface{}, organizationId interface{}, kind interface{}) *MockAuditLogStore_GetAuditLogsByOrganizationId_Call {
	return &MockAuditLogStore_GetAuditLogsByOrganizationId_Call{Call: _e.mock.On("GetAuditLogsByOrganizationId", ctx, organizationId, kind)}
}

func (_c *MockAuditLogStore_GetAuditLogsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, kind models.AuditLogKind)) *MockAuditLogStore_GetAuditLogsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AuditLogKind))
	})
	return _c
}

func (_c *MockAuditLogStore_GetAuditLogsByOrganizationId_Call) Return(_a0 []models.AuditLog, _a1 error) *MockAuditLogStore_GetAuditLogsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditLogStore_GetAuditLogsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AuditLogKind) ([]models.AuditLog, error)) *MockAuditLogStore_GetAuditLogsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsByResource provides a mock function with given fields: ctx, resource, resourceId
func (_m *MockAuditLogStore) GetAuditLogsByResource(ctx context.Context, resource string, resourceId string) ([]models.AuditLog, error) {
	ret := _m.Called(ctx, resource, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsByResource")
	}

	var r0 []models.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.AuditLog, error)); ok {
		return rf(ctx, resource, resourceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.AuditLog); ok {
		r0 = rf(ctx, resource, resourceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resource, resourceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditLogStore_GetAuditLogsByResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsByResource'
type MockAuditLogStore_GetAuditLogsByResource_Call struct {
	*mock.Call
}

// GetAuditLogsByResource is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
//   - resourceId string
func (_e *MockAuditLogStore_Expecter) GetAuditLogsByResource(ctx interface{}, resource interface{}, resourceId interface{}) *MockAuditLogStore_GetAuditLogsByResource_Call {
	return &MockAuditLogStore_GetAuditLogsByResource_Call{Call: _e.mock.On("GetAuditLogsByResource", ctx, resource, resourceId)}
}

func (_c *MockAuditLogStore_GetAuditLogsByResource_Call) Run(run func(ctx context.Context, resource string, resourceId string)) *MockAuditLogStore_GetAuditLogsByResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuditLogStore_GetAuditLogsByResource_Call) Return(_a0 []models.AuditLog, _a1 error) *MockAuditLogStore_GetAuditLogsByResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditLogStore_GetAuditLogsByResource_Call) RunAndReturn(run func(context.Context, string, string) ([]models.AuditLog, error)) *MockAuditLogStore_GetAuditLogsByResource_Call {
	_c.Call.Return(run)
	return _c
}

// WithAuditLogTransaction provides a mock function with given fields: ctx, fn
func (_m *MockAuditLogStore) WithAuditLogTransaction(ctx context.Context, fn func(store.AuditLogStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithAuditLogTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.AuditLogStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuditLogStore_WithAuditLogTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithAuditLogTransaction'
type MockAuditLogStore_WithAuditLogTransaction_Call struct {
	*mock.Call
}

// WithAuditLogTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.AuditLogStore) error
func (_e *MockAuditLogStore_Expecter) WithAuditLogTransaction(ctx interface{}, fn interface{}) *MockAuditLogStore_WithAuditLogTransaction_Call {
	return &MockAuditLogStore_WithAuditLogTransaction_Call{Call: _e.mock.On("WithAuditLogTransaction", ctx, fn)}
}

func (_c *MockAuditLogStore_WithAuditLogTransaction_Call) Run(run func(ctx context.Context, fn func(store.AuditLogStore) error)) *MockAuditLogStore_WithAuditLogTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.AuditLogStore) error))
	})
	return _c
}

func (_c *MockAuditLogStore_WithAuditLogTransaction_Call) Return(_a0 error) *MockAuditLogStore_WithAuditLogTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuditLogStore_WithAuditLogTransaction_Call) RunAndReturn(run func(context.Context, func(store.AuditLogStore) error) error) *MockAuditLogStore_WithAuditLogTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditLogStore creates a new instance of MockAuditLogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLogStore {
	mock := &MockAuditLogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

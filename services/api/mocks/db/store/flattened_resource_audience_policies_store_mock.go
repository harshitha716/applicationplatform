// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"
)

// MockFlattenedResourceAudiencePoliciesStore is an autogenerated mock type for the FlattenedResourceAudiencePoliciesStore type
type MockFlattenedResourceAudiencePoliciesStore struct {
	mock.Mock
}

type MockFlattenedResourceAudiencePoliciesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFlattenedResourceAudiencePoliciesStore) EXPECT() *MockFlattenedResourceAudiencePoliciesStore_Expecter {
	return &MockFlattenedResourceAudiencePoliciesStore_Expecter{mock: &_m.Mock}
}

// GetFlattenedResourceAudiencePolicies provides a mock function with given fields: ctx, filters
func (_m *MockFlattenedResourceAudiencePoliciesStore) GetFlattenedResourceAudiencePolicies(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetFlattenedResourceAudiencePolicies")
	}

	var r0 []models.FlattenedResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) []models.FlattenedResourceAudiencePolicy); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FlattenedResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlattenedResourceAudiencePolicies'
type MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call struct {
	*mock.Call
}

// GetFlattenedResourceAudiencePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.FlattenedResourceAudiencePoliciesFilters
func (_e *MockFlattenedResourceAudiencePoliciesStore_Expecter) GetFlattenedResourceAudiencePolicies(ctx interface{}, filters interface{}) *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call {
	return &MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call{Call: _e.mock.On("GetFlattenedResourceAudiencePolicies", ctx, filters)}
}

func (_c *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call) Run(run func(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters)) *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FlattenedResourceAudiencePoliciesFilters))
	})
	return _c
}

func (_c *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call) Return(_a0 []models.FlattenedResourceAudiencePolicy, _a1 error) *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call) RunAndReturn(run func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)) *MockFlattenedResourceAudiencePoliciesStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFlattenedResourceAudiencePoliciesStore creates a new instance of MockFlattenedResourceAudiencePoliciesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlattenedResourceAudiencePoliciesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlattenedResourceAudiencePoliciesStore {
	mock := &MockFlattenedResourceAudiencePoliciesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

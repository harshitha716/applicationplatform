// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockdatasetPoliciesWriteStore is an autogenerated mock type for the datasetPoliciesWriteStore type
type MockdatasetPoliciesWriteStore struct {
	mock.Mock
}

type MockdatasetPoliciesWriteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdatasetPoliciesWriteStore) EXPECT() *MockdatasetPoliciesWriteStore_Expecter {
	return &MockdatasetPoliciesWriteStore_Expecter{mock: &_m.Mock}
}

// CreateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockdatasetPoliciesWriteStore) CreateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetPolicy'
type MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call struct {
	*mock.Call
}

// CreateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockdatasetPoliciesWriteStore_Expecter) CreateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call {
	return &MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call{Call: _e.mock.On("CreateDatasetPolicy", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesWriteStore_CreateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId
func (_m *MockdatasetPoliciesWriteStore) DeleteDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatasetPolicy'
type MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call struct {
	*mock.Call
}

// DeleteDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockdatasetPoliciesWriteStore_Expecter) DeleteDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}) *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call {
	return &MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call{Call: _e.mock.On("DeleteDatasetPolicy", ctx, datasetId, audienceType, audienceId)}
}

func (_c *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call) Return(_a0 error) *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockdatasetPoliciesWriteStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockdatasetPoliciesWriteStore) UpdateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetPolicy'
type MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call struct {
	*mock.Call
}

// UpdateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockdatasetPoliciesWriteStore_Expecter) UpdateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call {
	return &MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call{Call: _e.mock.On("UpdateDatasetPolicy", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesWriteStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdatasetPoliciesWriteStore creates a new instance of MockdatasetPoliciesWriteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdatasetPoliciesWriteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdatasetPoliciesWriteStore {
	mock := &MockdatasetPoliciesWriteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockDatasetStore is an autogenerated mock type for the DatasetStore type
type MockDatasetStore struct {
	mock.Mock
}

type MockDatasetStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatasetStore) EXPECT() *MockDatasetStore_Expecter {
	return &MockDatasetStore_Expecter{mock: &_m.Mock}
}

// CreateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetStore) CreateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_CreateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataset'
type MockDatasetStore_CreateDataset_Call struct {
	*mock.Call
}

// CreateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetStore_Expecter) CreateDataset(ctx interface{}, dataset interface{}) *MockDatasetStore_CreateDataset_Call {
	return &MockDatasetStore_CreateDataset_Call{Call: _e.mock.On("CreateDataset", ctx, dataset)}
}

func (_c *MockDatasetStore_CreateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetStore_CreateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetStore_CreateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockDatasetStore_CreateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_CreateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockDatasetStore_CreateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockDatasetStore) CreateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_CreateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetPolicy'
type MockDatasetStore_CreateDatasetPolicy_Call struct {
	*mock.Call
}

// CreateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetStore_Expecter) CreateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockDatasetStore_CreateDatasetPolicy_Call {
	return &MockDatasetStore_CreateDatasetPolicy_Call{Call: _e.mock.On("CreateDatasetPolicy", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockDatasetStore_CreateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetStore_CreateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetStore_CreateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetStore_CreateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_CreateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetStore_CreateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetStore) DeleteDataset(ctx context.Context, dataset models.Dataset) error {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) error); ok {
		r0 = rf(ctx, dataset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetStore_DeleteDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataset'
type MockDatasetStore_DeleteDataset_Call struct {
	*mock.Call
}

// DeleteDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetStore_Expecter) DeleteDataset(ctx interface{}, dataset interface{}) *MockDatasetStore_DeleteDataset_Call {
	return &MockDatasetStore_DeleteDataset_Call{Call: _e.mock.On("DeleteDataset", ctx, dataset)}
}

func (_c *MockDatasetStore_DeleteDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetStore_DeleteDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetStore_DeleteDataset_Call) Return(_a0 error) *MockDatasetStore_DeleteDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetStore_DeleteDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) error) *MockDatasetStore_DeleteDataset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId
func (_m *MockDatasetStore) DeleteDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetStore_DeleteDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatasetPolicy'
type MockDatasetStore_DeleteDatasetPolicy_Call struct {
	*mock.Call
}

// DeleteDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockDatasetStore_Expecter) DeleteDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}) *MockDatasetStore_DeleteDatasetPolicy_Call {
	return &MockDatasetStore_DeleteDatasetPolicy_Call{Call: _e.mock.On("DeleteDatasetPolicy", ctx, datasetId, audienceType, audienceId)}
}

func (_c *MockDatasetStore_DeleteDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockDatasetStore_DeleteDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetStore_DeleteDatasetPolicy_Call) Return(_a0 error) *MockDatasetStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetStore_DeleteDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockDatasetStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetById provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetStore) GetDatasetById(ctx context.Context, datasetId string) (*models.Dataset, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetById")
	}

	var r0 *models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Dataset, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Dataset); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_GetDatasetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetById'
type MockDatasetStore_GetDatasetById_Call struct {
	*mock.Call
}

// GetDatasetById is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId string
func (_e *MockDatasetStore_Expecter) GetDatasetById(ctx interface{}, datasetId interface{}) *MockDatasetStore_GetDatasetById_Call {
	return &MockDatasetStore_GetDatasetById_Call{Call: _e.mock.On("GetDatasetById", ctx, datasetId)}
}

func (_c *MockDatasetStore_GetDatasetById_Call) Run(run func(ctx context.Context, datasetId string)) *MockDatasetStore_GetDatasetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatasetStore_GetDatasetById_Call) Return(_a0 *models.Dataset, _a1 error) *MockDatasetStore_GetDatasetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_GetDatasetById_Call) RunAndReturn(run func(context.Context, string) (*models.Dataset, error)) *MockDatasetStore_GetDatasetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetCount provides a mock function with given fields: ctx, filters
func (_m *MockDatasetStore) GetDatasetCount(ctx context.Context, filters models.DatasetFilters) (int64, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) (int64, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) int64); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_GetDatasetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetCount'
type MockDatasetStore_GetDatasetCount_Call struct {
	*mock.Call
}

// GetDatasetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockDatasetStore_Expecter) GetDatasetCount(ctx interface{}, filters interface{}) *MockDatasetStore_GetDatasetCount_Call {
	return &MockDatasetStore_GetDatasetCount_Call{Call: _e.mock.On("GetDatasetCount", ctx, filters)}
}

func (_c *MockDatasetStore_GetDatasetCount_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockDatasetStore_GetDatasetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockDatasetStore_GetDatasetCount_Call) Return(_a0 int64, _a1 error) *MockDatasetStore_GetDatasetCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_GetDatasetCount_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) (int64, error)) *MockDatasetStore_GetDatasetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPolicies provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetStore) GetDatasetPolicies(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_GetDatasetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPolicies'
type MockDatasetStore_GetDatasetPolicies_Call struct {
	*mock.Call
}

// GetDatasetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockDatasetStore_Expecter) GetDatasetPolicies(ctx interface{}, datasetId interface{}) *MockDatasetStore_GetDatasetPolicies_Call {
	return &MockDatasetStore_GetDatasetPolicies_Call{Call: _e.mock.On("GetDatasetPolicies", ctx, datasetId)}
}

func (_c *MockDatasetStore_GetDatasetPolicies_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockDatasetStore_GetDatasetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetStore_GetDatasetPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockDatasetStore_GetDatasetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_GetDatasetPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockDatasetStore_GetDatasetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPoliciesByEmail provides a mock function with given fields: ctx, datasetId, email
func (_m *MockDatasetStore) GetDatasetPoliciesByEmail(ctx context.Context, datasetId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, datasetId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_GetDatasetPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPoliciesByEmail'
type MockDatasetStore_GetDatasetPoliciesByEmail_Call struct {
	*mock.Call
}

// GetDatasetPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - email string
func (_e *MockDatasetStore_Expecter) GetDatasetPoliciesByEmail(ctx interface{}, datasetId interface{}, email interface{}) *MockDatasetStore_GetDatasetPoliciesByEmail_Call {
	return &MockDatasetStore_GetDatasetPoliciesByEmail_Call{Call: _e.mock.On("GetDatasetPoliciesByEmail", ctx, datasetId, email)}
}

func (_c *MockDatasetStore_GetDatasetPoliciesByEmail_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, email string)) *MockDatasetStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetStore_GetDatasetPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockDatasetStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_GetDatasetPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockDatasetStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetsAll provides a mock function with given fields: ctx, filters
func (_m *MockDatasetStore) GetDatasetsAll(ctx context.Context, filters models.DatasetFilters) ([]models.Dataset, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetsAll")
	}

	var r0 []models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) ([]models.Dataset, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) []models.Dataset); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_GetDatasetsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetsAll'
type MockDatasetStore_GetDatasetsAll_Call struct {
	*mock.Call
}

// GetDatasetsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockDatasetStore_Expecter) GetDatasetsAll(ctx interface{}, filters interface{}) *MockDatasetStore_GetDatasetsAll_Call {
	return &MockDatasetStore_GetDatasetsAll_Call{Call: _e.mock.On("GetDatasetsAll", ctx, filters)}
}

func (_c *MockDatasetStore_GetDatasetsAll_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockDatasetStore_GetDatasetsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockDatasetStore_GetDatasetsAll_Call) Return(_a0 []models.Dataset, _a1 error) *MockDatasetStore_GetDatasetsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_GetDatasetsAll_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) ([]models.Dataset, error)) *MockDatasetStore_GetDatasetsAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetStore) UpdateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_UpdateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataset'
type MockDatasetStore_UpdateDataset_Call struct {
	*mock.Call
}

// UpdateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetStore_Expecter) UpdateDataset(ctx interface{}, dataset interface{}) *MockDatasetStore_UpdateDataset_Call {
	return &MockDatasetStore_UpdateDataset_Call{Call: _e.mock.On("UpdateDataset", ctx, dataset)}
}

func (_c *MockDatasetStore_UpdateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetStore_UpdateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetStore_UpdateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockDatasetStore_UpdateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_UpdateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockDatasetStore_UpdateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockDatasetStore) UpdateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetStore_UpdateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetPolicy'
type MockDatasetStore_UpdateDatasetPolicy_Call struct {
	*mock.Call
}

// UpdateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetStore_Expecter) UpdateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockDatasetStore_UpdateDatasetPolicy_Call {
	return &MockDatasetStore_UpdateDatasetPolicy_Call{Call: _e.mock.On("UpdateDatasetPolicy", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockDatasetStore_UpdateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetStore_UpdateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetStore_UpdateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetStore_UpdateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// WithDatasetTransaction provides a mock function with given fields: ctx, fn
func (_m *MockDatasetStore) WithDatasetTransaction(ctx context.Context, fn func(store.DatasetStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithDatasetTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.DatasetStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetStore_WithDatasetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDatasetTransaction'
type MockDatasetStore_WithDatasetTransaction_Call struct {
	*mock.Call
}

// WithDatasetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.DatasetStore) error
func (_e *MockDatasetStore_Expecter) WithDatasetTransaction(ctx interface{}, fn interface{}) *MockDatasetStore_WithDatasetTransaction_Call {
	return &MockDatasetStore_WithDatasetTransaction_Call{Call: _e.mock.On("WithDatasetTransaction", ctx, fn)}
}

func (_c *MockDatasetStore_WithDatasetTransaction_Call) Run(run func(ctx context.Context, fn func(store.DatasetStore) error)) *MockDatasetStore_WithDatasetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.DatasetStore) error))
	})
	return _c
}

func (_c *MockDatasetStore_WithDatasetTransaction_Call) Return(_a0 error) *MockDatasetStore_WithDatasetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetStore_WithDatasetTransaction_Call) RunAndReturn(run func(context.Context, func(store.DatasetStore) error) error) *MockDatasetStore_WithDatasetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatasetStore creates a new instance of MockDatasetStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatasetStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatasetStore {
	mock := &MockDatasetStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

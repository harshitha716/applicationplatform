// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockOrganizationWriteStore is an autogenerated mock type for the OrganizationWriteStore type
type MockOrganizationWriteStore struct {
	mock.Mock
}

type MockOrganizationWriteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationWriteStore) EXPECT() *MockOrganizationWriteStore_Expecter {
	return &MockOrganizationWriteStore_Expecter{mock: &_m.Mock}
}

// CreateOrganization provides a mock function with given fields: ctx, name, description, ownerId
func (_m *MockOrganizationWriteStore) CreateOrganization(ctx context.Context, name string, description *string, ownerId uuid.UUID) (*models.Organization, error) {
	ret := _m.Called(ctx, name, description, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)); ok {
		return rf(ctx, name, description, ownerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) *models.Organization); ok {
		r0 = rf(ctx, name, description, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, uuid.UUID) error); ok {
		r1 = rf(ctx, name, description, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockOrganizationWriteStore_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description *string
//   - ownerId uuid.UUID
func (_e *MockOrganizationWriteStore_Expecter) CreateOrganization(ctx interface{}, name interface{}, description interface{}, ownerId interface{}) *MockOrganizationWriteStore_CreateOrganization_Call {
	return &MockOrganizationWriteStore_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, name, description, ownerId)}
}

func (_c *MockOrganizationWriteStore_CreateOrganization_Call) Run(run func(ctx context.Context, name string, description *string, ownerId uuid.UUID)) *MockOrganizationWriteStore_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganization_Call) Return(_a0 *models.Organization, _a1 error) *MockOrganizationWriteStore_CreateOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganization_Call) RunAndReturn(run func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)) *MockOrganizationWriteStore_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitation provides a mock function with given fields: ctx, organizationId, targetEmail, privilege
func (_m *MockOrganizationWriteStore) CreateOrganizationInvitation(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege) (*models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationId, targetEmail, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitation")
	}

	var r0 *models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationId, targetEmail, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) *models.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitation'
type MockOrganizationWriteStore_CreateOrganizationInvitation_Call struct {
	*mock.Call
}

// CreateOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - targetEmail string
//   - privilege models.ResourcePrivilege
func (_e *MockOrganizationWriteStore_Expecter) CreateOrganizationInvitation(ctx interface{}, organizationId interface{}, targetEmail interface{}, privilege interface{}) *MockOrganizationWriteStore_CreateOrganizationInvitation_Call {
	return &MockOrganizationWriteStore_CreateOrganizationInvitation_Call{Call: _e.mock.On("CreateOrganizationInvitation", ctx, organizationId, targetEmail, privilege)}
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitation_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege)) *MockOrganizationWriteStore_CreateOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitation_Call) Return(_a0 *models.OrganizationInvitation, _a1 error) *MockOrganizationWriteStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitation_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)) *MockOrganizationWriteStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockOrganizationWriteStore) CreateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitationStatus'
type MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// CreateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockOrganizationWriteStore_Expecter) CreateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call {
	return &MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call{Call: _e.mock.On("CreateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockOrganizationWriteStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockOrganizationWriteStore) CreateOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationMembershipRequest'
type MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// CreateOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockOrganizationWriteStore_Expecter) CreateOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call {
	return &MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call{Call: _e.mock.On("CreateOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockOrganizationWriteStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceType, audienceId, privilege
func (_m *MockOrganizationWriteStore) CreateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationPolicy'
type MockOrganizationWriteStore_CreateOrganizationPolicy_Call struct {
	*mock.Call
}

// CreateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockOrganizationWriteStore_Expecter) CreateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockOrganizationWriteStore_CreateOrganizationPolicy_Call {
	return &MockOrganizationWriteStore_CreateOrganizationPolicy_Call{Call: _e.mock.On("CreateOrganizationPolicy", ctx, orgId, audienceType, audienceId, privilege)}
}

func (_c *MockOrganizationWriteStore_CreateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockOrganizationWriteStore_CreateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockOrganizationWriteStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockOrganizationWriteStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSSOConfig provides a mock function with given fields: ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain
func (_m *MockOrganizationWriteStore) CreateSSOConfig(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSOConfig")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) error); ok {
		r1 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_CreateSSOConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSSOConfig'
type MockOrganizationWriteStore_CreateSSOConfig_Call struct {
	*mock.Call
}

// CreateSSOConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - ssoProviderID string
//   - ssoProviderName string
//   - ssoConfig json.RawMessage
//   - emailDomain string
func (_e *MockOrganizationWriteStore_Expecter) CreateSSOConfig(ctx interface{}, organizationId interface{}, ssoProviderID interface{}, ssoProviderName interface{}, ssoConfig interface{}, emailDomain interface{}) *MockOrganizationWriteStore_CreateSSOConfig_Call {
	return &MockOrganizationWriteStore_CreateSSOConfig_Call{Call: _e.mock.On("CreateSSOConfig", ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)}
}

func (_c *MockOrganizationWriteStore_CreateSSOConfig_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string)) *MockOrganizationWriteStore_CreateSSOConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(json.RawMessage), args[5].(string))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_CreateSSOConfig_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockOrganizationWriteStore_CreateSSOConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_CreateSSOConfig_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)) *MockOrganizationWriteStore_CreateSSOConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId
func (_m *MockOrganizationWriteStore) DeleteOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, orgId, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgId, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationWriteStore_DeleteOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationPolicy'
type MockOrganizationWriteStore_DeleteOrganizationPolicy_Call struct {
	*mock.Call
}

// DeleteOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
func (_e *MockOrganizationWriteStore_Expecter) DeleteOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}) *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call {
	return &MockOrganizationWriteStore_DeleteOrganizationPolicy_Call{Call: _e.mock.On("DeleteOrganizationPolicy", ctx, orgId, audienceId)}
}

func (_c *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID)) *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call) Return(_a0 error) *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockOrganizationWriteStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockOrganizationWriteStore) UpdateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationStatus'
type MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockOrganizationWriteStore_Expecter) UpdateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call {
	return &MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call{Call: _e.mock.On("UpdateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockOrganizationWriteStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId, privilege
func (_m *MockOrganizationWriteStore) UpdateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_UpdateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationPolicy'
type MockOrganizationWriteStore_UpdateOrganizationPolicy_Call struct {
	*mock.Call
}

// UpdateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockOrganizationWriteStore_Expecter) UpdateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}, privilege interface{}) *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call {
	return &MockOrganizationWriteStore_UpdateOrganizationPolicy_Call{Call: _e.mock.On("UpdateOrganizationPolicy", ctx, orgId, audienceId, privilege)}
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockOrganizationWriteStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePendingOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockOrganizationWriteStore) UpdatePendingOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePendingOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePendingOrganizationMembershipRequest'
type MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// UpdatePendingOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockOrganizationWriteStore_Expecter) UpdatePendingOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call {
	return &MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call{Call: _e.mock.On("UpdatePendingOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockOrganizationWriteStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// WithOrganizationTransaction provides a mock function with given fields: ctx, fn
func (_m *MockOrganizationWriteStore) WithOrganizationTransaction(ctx context.Context, fn func(store.OrganizationStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithOrganizationTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.OrganizationStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrganizationWriteStore_WithOrganizationTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithOrganizationTransaction'
type MockOrganizationWriteStore_WithOrganizationTransaction_Call struct {
	*mock.Call
}

// WithOrganizationTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.OrganizationStore) error
func (_e *MockOrganizationWriteStore_Expecter) WithOrganizationTransaction(ctx interface{}, fn interface{}) *MockOrganizationWriteStore_WithOrganizationTransaction_Call {
	return &MockOrganizationWriteStore_WithOrganizationTransaction_Call{Call: _e.mock.On("WithOrganizationTransaction", ctx, fn)}
}

func (_c *MockOrganizationWriteStore_WithOrganizationTransaction_Call) Run(run func(ctx context.Context, fn func(store.OrganizationStore) error)) *MockOrganizationWriteStore_WithOrganizationTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.OrganizationStore) error))
	})
	return _c
}

func (_c *MockOrganizationWriteStore_WithOrganizationTransaction_Call) Return(_a0 error) *MockOrganizationWriteStore_WithOrganizationTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrganizationWriteStore_WithOrganizationTransaction_Call) RunAndReturn(run func(context.Context, func(store.OrganizationStore) error) error) *MockOrganizationWriteStore_WithOrganizationTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrganizationWriteStore creates a new instance of MockOrganizationWriteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationWriteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationWriteStore {
	mock := &MockOrganizationWriteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

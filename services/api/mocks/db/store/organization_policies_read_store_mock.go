// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockorganizationPoliciesReadStore is an autogenerated mock type for the organizationPoliciesReadStore type
type MockorganizationPoliciesReadStore struct {
	mock.Mock
}

type MockorganizationPoliciesReadStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockorganizationPoliciesReadStore) EXPECT() *MockorganizationPoliciesReadStore_Expecter {
	return &MockorganizationPoliciesReadStore_Expecter{mock: &_m.Mock}
}

// GetOrganizationPolicies provides a mock function with given fields: ctx, orgId
func (_m *MockorganizationPoliciesReadStore) GetOrganizationPolicies(ctx context.Context, orgId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicies'
type MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call struct {
	*mock.Call
}

// GetOrganizationPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
func (_e *MockorganizationPoliciesReadStore_Expecter) GetOrganizationPolicies(ctx interface{}, orgId interface{}) *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call {
	return &MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call{Call: _e.mock.On("GetOrganizationPolicies", ctx, orgId)}
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call) Run(run func(ctx context.Context, orgId uuid.UUID)) *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockorganizationPoliciesReadStore_GetOrganizationPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPoliciesByEmail provides a mock function with given fields: ctx, organizationId, email
func (_m *MockorganizationPoliciesReadStore) GetOrganizationPoliciesByEmail(ctx context.Context, organizationId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, organizationId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPoliciesByEmail'
type MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call struct {
	*mock.Call
}

// GetOrganizationPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - email string
func (_e *MockorganizationPoliciesReadStore_Expecter) GetOrganizationPoliciesByEmail(ctx interface{}, organizationId interface{}, email interface{}) *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call {
	return &MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call{Call: _e.mock.On("GetOrganizationPoliciesByEmail", ctx, organizationId, email)}
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, email string)) *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockorganizationPoliciesReadStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicyByUser provides a mock function with given fields: ctx, organizationId, userId
func (_m *MockorganizationPoliciesReadStore) GetOrganizationPolicyByUser(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByUser")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicyByUser'
type MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call struct {
	*mock.Call
}

// GetOrganizationPolicyByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
func (_e *MockorganizationPoliciesReadStore_Expecter) GetOrganizationPolicyByUser(ctx interface{}, organizationId interface{}, userId interface{}) *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call {
	return &MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call{Call: _e.mock.On("GetOrganizationPolicyByUser", ctx, organizationId, userId)}
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID)) *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)) *MockorganizationPoliciesReadStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockorganizationPoliciesReadStore creates a new instance of MockorganizationPoliciesReadStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockorganizationPoliciesReadStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockorganizationPoliciesReadStore {
	mock := &MockorganizationPoliciesReadStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CreateConnection provides a mock function with given fields: ctx, connection
func (_m *MockStore) CreateConnection(ctx context.Context, connection *models.CreateConnectionParams) (uuid.UUID, error) {
	ret := _m.Called(ctx, connection)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.CreateConnectionParams) (uuid.UUID, error)); ok {
		return rf(ctx, connection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.CreateConnectionParams) uuid.UUID); ok {
		r0 = rf(ctx, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.CreateConnectionParams) error); ok {
		r1 = rf(ctx, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnection'
type MockStore_CreateConnection_Call struct {
	*mock.Call
}

// CreateConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - connection *models.CreateConnectionParams
func (_e *MockStore_Expecter) CreateConnection(ctx interface{}, connection interface{}) *MockStore_CreateConnection_Call {
	return &MockStore_CreateConnection_Call{Call: _e.mock.On("CreateConnection", ctx, connection)}
}

func (_c *MockStore_CreateConnection_Call) Run(run func(ctx context.Context, connection *models.CreateConnectionParams)) *MockStore_CreateConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CreateConnectionParams))
	})
	return _c
}

func (_c *MockStore_CreateConnection_Call) Return(_a0 uuid.UUID, _a1 error) *MockStore_CreateConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateConnection_Call) RunAndReturn(run func(context.Context, *models.CreateConnectionParams) (uuid.UUID, error)) *MockStore_CreateConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnectionPolicy provides a mock function with given fields: ctx, connectionId, audienceType, audienceId, privilege
func (_m *MockStore) CreateConnectionPolicy(ctx context.Context, connectionId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, connectionId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectionPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, connectionId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, connectionId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, connectionId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateConnectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnectionPolicy'
type MockStore_CreateConnectionPolicy_Call struct {
	*mock.Call
}

// CreateConnectionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) CreateConnectionPolicy(ctx interface{}, connectionId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockStore_CreateConnectionPolicy_Call {
	return &MockStore_CreateConnectionPolicy_Call{Call: _e.mock.On("CreateConnectionPolicy", ctx, connectionId, audienceType, audienceId, privilege)}
}

func (_c *MockStore_CreateConnectionPolicy_Call) Run(run func(ctx context.Context, connectionId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_CreateConnectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_CreateConnectionPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_CreateConnectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateConnectionPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_CreateConnectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnector provides a mock function with given fields: ctx, connector
func (_m *MockStore) CreateConnector(ctx context.Context, connector *models.Connector) error {
	ret := _m.Called(ctx, connector)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Connector) error); ok {
		r0 = rf(ctx, connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnector'
type MockStore_CreateConnector_Call struct {
	*mock.Call
}

// CreateConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - connector *models.Connector
func (_e *MockStore_Expecter) CreateConnector(ctx interface{}, connector interface{}) *MockStore_CreateConnector_Call {
	return &MockStore_CreateConnector_Call{Call: _e.mock.On("CreateConnector", ctx, connector)}
}

func (_c *MockStore_CreateConnector_Call) Run(run func(ctx context.Context, connector *models.Connector)) *MockStore_CreateConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Connector))
	})
	return _c
}

func (_c *MockStore_CreateConnector_Call) Return(_a0 error) *MockStore_CreateConnector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateConnector_Call) RunAndReturn(run func(context.Context, *models.Connector) error) *MockStore_CreateConnector_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockStore) CreateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataset'
type MockStore_CreateDataset_Call struct {
	*mock.Call
}

// CreateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockStore_Expecter) CreateDataset(ctx interface{}, dataset interface{}) *MockStore_CreateDataset_Call {
	return &MockStore_CreateDataset_Call{Call: _e.mock.On("CreateDataset", ctx, dataset)}
}

func (_c *MockStore_CreateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockStore_CreateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockStore_CreateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockStore_CreateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockStore_CreateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetAction provides a mock function with given fields: ctx, organizationId, params
func (_m *MockStore) CreateDatasetAction(ctx context.Context, organizationId uuid.UUID, params models.CreateDatasetActionParams) error {
	ret := _m.Called(ctx, organizationId, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetAction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.CreateDatasetActionParams) error); ok {
		r0 = rf(ctx, organizationId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateDatasetAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetAction'
type MockStore_CreateDatasetAction_Call struct {
	*mock.Call
}

// CreateDatasetAction is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - params models.CreateDatasetActionParams
func (_e *MockStore_Expecter) CreateDatasetAction(ctx interface{}, organizationId interface{}, params interface{}) *MockStore_CreateDatasetAction_Call {
	return &MockStore_CreateDatasetAction_Call{Call: _e.mock.On("CreateDatasetAction", ctx, organizationId, params)}
}

func (_c *MockStore_CreateDatasetAction_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, params models.CreateDatasetActionParams)) *MockStore_CreateDatasetAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.CreateDatasetActionParams))
	})
	return _c
}

func (_c *MockStore_CreateDatasetAction_Call) Return(_a0 error) *MockStore_CreateDatasetAction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateDatasetAction_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.CreateDatasetActionParams) error) *MockStore_CreateDatasetAction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetFileUpload provides a mock function with given fields: ctx, datasetFileUpload
func (_m *MockStore) CreateDatasetFileUpload(ctx context.Context, datasetFileUpload *models.DatasetFileUpload) (*models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, datasetFileUpload)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetFileUpload")
	}

	var r0 *models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DatasetFileUpload) (*models.DatasetFileUpload, error)); ok {
		return rf(ctx, datasetFileUpload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DatasetFileUpload) *models.DatasetFileUpload); ok {
		r0 = rf(ctx, datasetFileUpload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.DatasetFileUpload) error); ok {
		r1 = rf(ctx, datasetFileUpload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateDatasetFileUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetFileUpload'
type MockStore_CreateDatasetFileUpload_Call struct {
	*mock.Call
}

// CreateDatasetFileUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetFileUpload *models.DatasetFileUpload
func (_e *MockStore_Expecter) CreateDatasetFileUpload(ctx interface{}, datasetFileUpload interface{}) *MockStore_CreateDatasetFileUpload_Call {
	return &MockStore_CreateDatasetFileUpload_Call{Call: _e.mock.On("CreateDatasetFileUpload", ctx, datasetFileUpload)}
}

func (_c *MockStore_CreateDatasetFileUpload_Call) Run(run func(ctx context.Context, datasetFileUpload *models.DatasetFileUpload)) *MockStore_CreateDatasetFileUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.DatasetFileUpload))
	})
	return _c
}

func (_c *MockStore_CreateDatasetFileUpload_Call) Return(_a0 *models.DatasetFileUpload, _a1 error) *MockStore_CreateDatasetFileUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateDatasetFileUpload_Call) RunAndReturn(run func(context.Context, *models.DatasetFileUpload) (*models.DatasetFileUpload, error)) *MockStore_CreateDatasetFileUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockStore) CreateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetPolicy'
type MockStore_CreateDatasetPolicy_Call struct {
	*mock.Call
}

// CreateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) CreateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockStore_CreateDatasetPolicy_Call {
	return &MockStore_CreateDatasetPolicy_Call{Call: _e.mock.On("CreateDatasetPolicy", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockStore_CreateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_CreateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_CreateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_CreateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_CreateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFileUpload provides a mock function with given fields: ctx, fileUpload
func (_m *MockStore) CreateFileUpload(ctx context.Context, fileUpload *models.FileUpload) (*models.FileUpload, error) {
	ret := _m.Called(ctx, fileUpload)

	if len(ret) == 0 {
		panic("no return value specified for CreateFileUpload")
	}

	var r0 *models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FileUpload) (*models.FileUpload, error)); ok {
		return rf(ctx, fileUpload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FileUpload) *models.FileUpload); ok {
		r0 = rf(ctx, fileUpload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FileUpload) error); ok {
		r1 = rf(ctx, fileUpload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateFileUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFileUpload'
type MockStore_CreateFileUpload_Call struct {
	*mock.Call
}

// CreateFileUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUpload *models.FileUpload
func (_e *MockStore_Expecter) CreateFileUpload(ctx interface{}, fileUpload interface{}) *MockStore_CreateFileUpload_Call {
	return &MockStore_CreateFileUpload_Call{Call: _e.mock.On("CreateFileUpload", ctx, fileUpload)}
}

func (_c *MockStore_CreateFileUpload_Call) Run(run func(ctx context.Context, fileUpload *models.FileUpload)) *MockStore_CreateFileUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.FileUpload))
	})
	return _c
}

func (_c *MockStore_CreateFileUpload_Call) Return(_a0 *models.FileUpload, _a1 error) *MockStore_CreateFileUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateFileUpload_Call) RunAndReturn(run func(context.Context, *models.FileUpload) (*models.FileUpload, error)) *MockStore_CreateFileUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function with given fields: ctx, name, description, ownerId
func (_m *MockStore) CreateOrganization(ctx context.Context, name string, description *string, ownerId uuid.UUID) (*models.Organization, error) {
	ret := _m.Called(ctx, name, description, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)); ok {
		return rf(ctx, name, description, ownerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) *models.Organization); ok {
		r0 = rf(ctx, name, description, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, uuid.UUID) error); ok {
		r1 = rf(ctx, name, description, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockStore_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description *string
//   - ownerId uuid.UUID
func (_e *MockStore_Expecter) CreateOrganization(ctx interface{}, name interface{}, description interface{}, ownerId interface{}) *MockStore_CreateOrganization_Call {
	return &MockStore_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, name, description, ownerId)}
}

func (_c *MockStore_CreateOrganization_Call) Run(run func(ctx context.Context, name string, description *string, ownerId uuid.UUID)) *MockStore_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_CreateOrganization_Call) Return(_a0 *models.Organization, _a1 error) *MockStore_CreateOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganization_Call) RunAndReturn(run func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)) *MockStore_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitation provides a mock function with given fields: ctx, organizationId, targetEmail, privilege
func (_m *MockStore) CreateOrganizationInvitation(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege) (*models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationId, targetEmail, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitation")
	}

	var r0 *models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationId, targetEmail, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) *models.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitation'
type MockStore_CreateOrganizationInvitation_Call struct {
	*mock.Call
}

// CreateOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - targetEmail string
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) CreateOrganizationInvitation(ctx interface{}, organizationId interface{}, targetEmail interface{}, privilege interface{}) *MockStore_CreateOrganizationInvitation_Call {
	return &MockStore_CreateOrganizationInvitation_Call{Call: _e.mock.On("CreateOrganizationInvitation", ctx, organizationId, targetEmail, privilege)}
}

func (_c *MockStore_CreateOrganizationInvitation_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege)) *MockStore_CreateOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_CreateOrganizationInvitation_Call) Return(_a0 *models.OrganizationInvitation, _a1 error) *MockStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganizationInvitation_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)) *MockStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockStore) CreateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitationStatus'
type MockStore_CreateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// CreateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockStore_Expecter) CreateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockStore_CreateOrganizationInvitationStatus_Call {
	return &MockStore_CreateOrganizationInvitationStatus_Call{Call: _e.mock.On("CreateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockStore_CreateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockStore_CreateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockStore) CreateOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationMembershipRequest'
type MockStore_CreateOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// CreateOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockStore_Expecter) CreateOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockStore_CreateOrganizationMembershipRequest_Call {
	return &MockStore_CreateOrganizationMembershipRequest_Call{Call: _e.mock.On("CreateOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockStore_CreateOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockStore_CreateOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceType, audienceId, privilege
func (_m *MockStore) CreateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationPolicy'
type MockStore_CreateOrganizationPolicy_Call struct {
	*mock.Call
}

// CreateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) CreateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockStore_CreateOrganizationPolicy_Call {
	return &MockStore_CreateOrganizationPolicy_Call{Call: _e.mock.On("CreateOrganizationPolicy", ctx, orgId, audienceType, audienceId, privilege)}
}

func (_c *MockStore_CreateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_CreateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_CreateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationTeam provides a mock function with given fields: ctx, organizationId, team
func (_m *MockStore) CreateOrganizationTeam(ctx context.Context, organizationId uuid.UUID, team models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, team)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) (*models.Team, error)); ok {
		return rf(ctx, organizationId, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) *models.Team); ok {
		r0 = rf(ctx, organizationId, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.Team) error); ok {
		r1 = rf(ctx, organizationId, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateOrganizationTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationTeam'
type MockStore_CreateOrganizationTeam_Call struct {
	*mock.Call
}

// CreateOrganizationTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - team models.Team
func (_e *MockStore_Expecter) CreateOrganizationTeam(ctx interface{}, organizationId interface{}, team interface{}) *MockStore_CreateOrganizationTeam_Call {
	return &MockStore_CreateOrganizationTeam_Call{Call: _e.mock.On("CreateOrganizationTeam", ctx, organizationId, team)}
}

func (_c *MockStore_CreateOrganizationTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, team models.Team)) *MockStore_CreateOrganizationTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.Team))
	})
	return _c
}

func (_c *MockStore_CreateOrganizationTeam_Call) Return(_a0 *models.Team, _a1 error) *MockStore_CreateOrganizationTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateOrganizationTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.Team) (*models.Team, error)) *MockStore_CreateOrganizationTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePage provides a mock function with given fields: ctx, name, description
func (_m *MockStore) CreatePage(ctx context.Context, name string, description string) (*models.Page, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreatePage")
	}

	var r0 *models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Page, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Page); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreatePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePage'
type MockStore_CreatePage_Call struct {
	*mock.Call
}

// CreatePage is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockStore_Expecter) CreatePage(ctx interface{}, name interface{}, description interface{}) *MockStore_CreatePage_Call {
	return &MockStore_CreatePage_Call{Call: _e.mock.On("CreatePage", ctx, name, description)}
}

func (_c *MockStore_CreatePage_Call) Run(run func(ctx context.Context, name string, description string)) *MockStore_CreatePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_CreatePage_Call) Return(_a0 *models.Page, _a1 error) *MockStore_CreatePage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreatePage_Call) RunAndReturn(run func(context.Context, string, string) (*models.Page, error)) *MockStore_CreatePage_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePagePolicy provides a mock function with given fields: ctx, pageId, audienceType, audienceId, privilege
func (_m *MockStore) CreatePagePolicy(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreatePagePolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreatePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePagePolicy'
type MockStore_CreatePagePolicy_Call struct {
	*mock.Call
}

// CreatePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) CreatePagePolicy(ctx interface{}, pageId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockStore_CreatePagePolicy_Call {
	return &MockStore_CreatePagePolicy_Call{Call: _e.mock.On("CreatePagePolicy", ctx, pageId, audienceType, audienceId, privilege)}
}

func (_c *MockStore_CreatePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_CreatePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_CreatePagePolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_CreatePagePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreatePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_CreatePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePaymentsConfig provides a mock function with given fields: ctx, paymentsConfig
func (_m *MockStore) CreatePaymentsConfig(ctx context.Context, paymentsConfig models.PaymentsConfig) (models.PaymentsConfig, error) {
	ret := _m.Called(ctx, paymentsConfig)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentsConfig")
	}

	var r0 models.PaymentsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PaymentsConfig) (models.PaymentsConfig, error)); ok {
		return rf(ctx, paymentsConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PaymentsConfig) models.PaymentsConfig); ok {
		r0 = rf(ctx, paymentsConfig)
	} else {
		r0 = ret.Get(0).(models.PaymentsConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PaymentsConfig) error); ok {
		r1 = rf(ctx, paymentsConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreatePaymentsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentsConfig'
type MockStore_CreatePaymentsConfig_Call struct {
	*mock.Call
}

// CreatePaymentsConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentsConfig models.PaymentsConfig
func (_e *MockStore_Expecter) CreatePaymentsConfig(ctx interface{}, paymentsConfig interface{}) *MockStore_CreatePaymentsConfig_Call {
	return &MockStore_CreatePaymentsConfig_Call{Call: _e.mock.On("CreatePaymentsConfig", ctx, paymentsConfig)}
}

func (_c *MockStore_CreatePaymentsConfig_Call) Run(run func(ctx context.Context, paymentsConfig models.PaymentsConfig)) *MockStore_CreatePaymentsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PaymentsConfig))
	})
	return _c
}

func (_c *MockStore_CreatePaymentsConfig_Call) Return(_a0 models.PaymentsConfig, _a1 error) *MockStore_CreatePaymentsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreatePaymentsConfig_Call) RunAndReturn(run func(context.Context, models.PaymentsConfig) (models.PaymentsConfig, error)) *MockStore_CreatePaymentsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRule provides a mock function with given fields: ctx, params
func (_m *MockStore) CreateRule(ctx context.Context, params models.CreateRuleParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRuleParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRule'
type MockStore_CreateRule_Call struct {
	*mock.Call
}

// CreateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.CreateRuleParams
func (_e *MockStore_Expecter) CreateRule(ctx interface{}, params interface{}) *MockStore_CreateRule_Call {
	return &MockStore_CreateRule_Call{Call: _e.mock.On("CreateRule", ctx, params)}
}

func (_c *MockStore_CreateRule_Call) Run(run func(ctx context.Context, params models.CreateRuleParams)) *MockStore_CreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateRuleParams))
	})
	return _c
}

func (_c *MockStore_CreateRule_Call) Return(_a0 error) *MockStore_CreateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateRule_Call) RunAndReturn(run func(context.Context, models.CreateRuleParams) error) *MockStore_CreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSSOConfig provides a mock function with given fields: ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain
func (_m *MockStore) CreateSSOConfig(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSOConfig")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) error); ok {
		r1 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSSOConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSSOConfig'
type MockStore_CreateSSOConfig_Call struct {
	*mock.Call
}

// CreateSSOConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - ssoProviderID string
//   - ssoProviderName string
//   - ssoConfig json.RawMessage
//   - emailDomain string
func (_e *MockStore_Expecter) CreateSSOConfig(ctx interface{}, organizationId interface{}, ssoProviderID interface{}, ssoProviderName interface{}, ssoConfig interface{}, emailDomain interface{}) *MockStore_CreateSSOConfig_Call {
	return &MockStore_CreateSSOConfig_Call{Call: _e.mock.On("CreateSSOConfig", ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)}
}

func (_c *MockStore_CreateSSOConfig_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string)) *MockStore_CreateSSOConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(json.RawMessage), args[5].(string))
	})
	return _c
}

func (_c *MockStore_CreateSSOConfig_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockStore_CreateSSOConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSSOConfig_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)) *MockStore_CreateSSOConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSchedules provides a mock function with given fields: ctx, schedules
func (_m *MockStore) CreateSchedules(ctx context.Context, schedules []models.CreateScheduleParams) error {
	ret := _m.Called(ctx, schedules)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateScheduleParams) error); ok {
		r0 = rf(ctx, schedules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedules'
type MockStore_CreateSchedules_Call struct {
	*mock.Call
}

// CreateSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - schedules []models.CreateScheduleParams
func (_e *MockStore_Expecter) CreateSchedules(ctx interface{}, schedules interface{}) *MockStore_CreateSchedules_Call {
	return &MockStore_CreateSchedules_Call{Call: _e.mock.On("CreateSchedules", ctx, schedules)}
}

func (_c *MockStore_CreateSchedules_Call) Run(run func(ctx context.Context, schedules []models.CreateScheduleParams)) *MockStore_CreateSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.CreateScheduleParams))
	})
	return _c
}

func (_c *MockStore_CreateSchedules_Call) Return(_a0 error) *MockStore_CreateSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateSchedules_Call) RunAndReturn(run func(context.Context, []models.CreateScheduleParams) error) *MockStore_CreateSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSheet provides a mock function with given fields: ctx, sheet
func (_m *MockStore) CreateSheet(ctx context.Context, sheet models.Sheet) (*models.Sheet, error) {
	ret := _m.Called(ctx, sheet)

	if len(ret) == 0 {
		panic("no return value specified for CreateSheet")
	}

	var r0 *models.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Sheet) (*models.Sheet, error)); ok {
		return rf(ctx, sheet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Sheet) *models.Sheet); ok {
		r0 = rf(ctx, sheet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Sheet) error); ok {
		r1 = rf(ctx, sheet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSheet'
type MockStore_CreateSheet_Call struct {
	*mock.Call
}

// CreateSheet is a helper method to define mock.On call
//   - ctx context.Context
//   - sheet models.Sheet
func (_e *MockStore_Expecter) CreateSheet(ctx interface{}, sheet interface{}) *MockStore_CreateSheet_Call {
	return &MockStore_CreateSheet_Call{Call: _e.mock.On("CreateSheet", ctx, sheet)}
}

func (_c *MockStore_CreateSheet_Call) Run(run func(ctx context.Context, sheet models.Sheet)) *MockStore_CreateSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Sheet))
	})
	return _c
}

func (_c *MockStore_CreateSheet_Call) Return(_a0 *models.Sheet, _a1 error) *MockStore_CreateSheet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSheet_Call) RunAndReturn(run func(context.Context, models.Sheet) (*models.Sheet, error)) *MockStore_CreateSheet_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamMembership provides a mock function with given fields: ctx, teamId, userId
func (_m *MockStore) CreateTeamMembership(ctx context.Context, teamId uuid.UUID, userId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, teamId, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamMembership")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, teamId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, teamId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateTeamMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamMembership'
type MockStore_CreateTeamMembership_Call struct {
	*mock.Call
}

// CreateTeamMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
//   - userId uuid.UUID
func (_e *MockStore_Expecter) CreateTeamMembership(ctx interface{}, teamId interface{}, userId interface{}) *MockStore_CreateTeamMembership_Call {
	return &MockStore_CreateTeamMembership_Call{Call: _e.mock.On("CreateTeamMembership", ctx, teamId, userId)}
}

func (_c *MockStore_CreateTeamMembership_Call) Run(run func(ctx context.Context, teamId uuid.UUID, userId uuid.UUID)) *MockStore_CreateTeamMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_CreateTeamMembership_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockStore_CreateTeamMembership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateTeamMembership_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)) *MockStore_CreateTeamMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockStore) CreateWidgetInstance(ctx context.Context, widgetInstance *models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for CreateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWidgetInstance'
type MockStore_CreateWidgetInstance_Call struct {
	*mock.Call
}

// CreateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance *models.WidgetInstance
func (_e *MockStore_Expecter) CreateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockStore_CreateWidgetInstance_Call {
	return &MockStore_CreateWidgetInstance_Call{Call: _e.mock.On("CreateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockStore_CreateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance *models.WidgetInstance)) *MockStore_CreateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WidgetInstance))
	})
	return _c
}

func (_c *MockStore_CreateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockStore_CreateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateWidgetInstance_Call) RunAndReturn(run func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)) *MockStore_CreateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataset provides a mock function with given fields: ctx, dataset
func (_m *MockStore) DeleteDataset(ctx context.Context, dataset models.Dataset) error {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) error); ok {
		r0 = rf(ctx, dataset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataset'
type MockStore_DeleteDataset_Call struct {
	*mock.Call
}

// DeleteDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockStore_Expecter) DeleteDataset(ctx interface{}, dataset interface{}) *MockStore_DeleteDataset_Call {
	return &MockStore_DeleteDataset_Call{Call: _e.mock.On("DeleteDataset", ctx, dataset)}
}

func (_c *MockStore_DeleteDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockStore_DeleteDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockStore_DeleteDataset_Call) Return(_a0 error) *MockStore_DeleteDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) error) *MockStore_DeleteDataset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId
func (_m *MockStore) DeleteDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatasetPolicy'
type MockStore_DeleteDatasetPolicy_Call struct {
	*mock.Call
}

// DeleteDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockStore_Expecter) DeleteDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}) *MockStore_DeleteDatasetPolicy_Call {
	return &MockStore_DeleteDatasetPolicy_Call{Call: _e.mock.On("DeleteDatasetPolicy", ctx, datasetId, audienceType, audienceId)}
}

func (_c *MockStore_DeleteDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockStore_DeleteDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeleteDatasetPolicy_Call) Return(_a0 error) *MockStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId
func (_m *MockStore) DeleteOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, orgId, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgId, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationPolicy'
type MockStore_DeleteOrganizationPolicy_Call struct {
	*mock.Call
}

// DeleteOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
func (_e *MockStore_Expecter) DeleteOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}) *MockStore_DeleteOrganizationPolicy_Call {
	return &MockStore_DeleteOrganizationPolicy_Call{Call: _e.mock.On("DeleteOrganizationPolicy", ctx, orgId, audienceId)}
}

func (_c *MockStore_DeleteOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID)) *MockStore_DeleteOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeleteOrganizationPolicy_Call) Return(_a0 error) *MockStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePagePolicy provides a mock function with given fields: ctx, pageId, audienceType, audienceId
func (_m *MockStore) DeletePagePolicy(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, pageId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePagePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, pageId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeletePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePagePolicy'
type MockStore_DeletePagePolicy_Call struct {
	*mock.Call
}

// DeletePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockStore_Expecter) DeletePagePolicy(ctx interface{}, pageId interface{}, audienceType interface{}, audienceId interface{}) *MockStore_DeletePagePolicy_Call {
	return &MockStore_DeletePagePolicy_Call{Call: _e.mock.On("DeletePagePolicy", ctx, pageId, audienceType, audienceId)}
}

func (_c *MockStore_DeletePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockStore_DeletePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeletePagePolicy_Call) Return(_a0 error) *MockStore_DeletePagePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeletePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockStore_DeletePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePaymentsConfigById provides a mock function with given fields: ctx, paymentsConfigId
func (_m *MockStore) DeletePaymentsConfigById(ctx context.Context, paymentsConfigId uuid.UUID) error {
	ret := _m.Called(ctx, paymentsConfigId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePaymentsConfigById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, paymentsConfigId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeletePaymentsConfigById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePaymentsConfigById'
type MockStore_DeletePaymentsConfigById_Call struct {
	*mock.Call
}

// DeletePaymentsConfigById is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentsConfigId uuid.UUID
func (_e *MockStore_Expecter) DeletePaymentsConfigById(ctx interface{}, paymentsConfigId interface{}) *MockStore_DeletePaymentsConfigById_Call {
	return &MockStore_DeletePaymentsConfigById_Call{Call: _e.mock.On("DeletePaymentsConfigById", ctx, paymentsConfigId)}
}

func (_c *MockStore_DeletePaymentsConfigById_Call) Run(run func(ctx context.Context, paymentsConfigId uuid.UUID)) *MockStore_DeletePaymentsConfigById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeletePaymentsConfigById_Call) Return(_a0 error) *MockStore_DeletePaymentsConfigById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeletePaymentsConfigById_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockStore_DeletePaymentsConfigById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRule provides a mock function with given fields: ctx, params
func (_m *MockStore) DeleteRule(ctx context.Context, params models.DeleteRuleParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DeleteRuleParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRule'
type MockStore_DeleteRule_Call struct {
	*mock.Call
}

// DeleteRule is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.DeleteRuleParams
func (_e *MockStore_Expecter) DeleteRule(ctx interface{}, params interface{}) *MockStore_DeleteRule_Call {
	return &MockStore_DeleteRule_Call{Call: _e.mock.On("DeleteRule", ctx, params)}
}

func (_c *MockStore_DeleteRule_Call) Run(run func(ctx context.Context, params models.DeleteRuleParams)) *MockStore_DeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DeleteRuleParams))
	})
	return _c
}

func (_c *MockStore_DeleteRule_Call) Return(_a0 error) *MockStore_DeleteRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteRule_Call) RunAndReturn(run func(context.Context, models.DeleteRuleParams) error) *MockStore_DeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, organizationId, teamId
func (_m *MockStore) DeleteTeam(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID) error {
	ret := _m.Called(ctx, organizationId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, organizationId, teamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockStore_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockStore_Expecter) DeleteTeam(ctx interface{}, organizationId interface{}, teamId interface{}) *MockStore_DeleteTeam_Call {
	return &MockStore_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, organizationId, teamId)}
}

func (_c *MockStore_DeleteTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID)) *MockStore_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeleteTeam_Call) Return(_a0 error) *MockStore_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockStore_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamMembership provides a mock function with given fields: ctx, teamId, teamMembershipId
func (_m *MockStore) DeleteTeamMembership(ctx context.Context, teamId uuid.UUID, teamMembershipId uuid.UUID) error {
	ret := _m.Called(ctx, teamId, teamMembershipId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, teamId, teamMembershipId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteTeamMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamMembership'
type MockStore_DeleteTeamMembership_Call struct {
	*mock.Call
}

// DeleteTeamMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
//   - teamMembershipId uuid.UUID
func (_e *MockStore_Expecter) DeleteTeamMembership(ctx interface{}, teamId interface{}, teamMembershipId interface{}) *MockStore_DeleteTeamMembership_Call {
	return &MockStore_DeleteTeamMembership_Call{Call: _e.mock.On("DeleteTeamMembership", ctx, teamId, teamMembershipId)}
}

func (_c *MockStore_DeleteTeamMembership_Call) Run(run func(ctx context.Context, teamId uuid.UUID, teamMembershipId uuid.UUID)) *MockStore_DeleteTeamMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeleteTeamMembership_Call) Return(_a0 error) *MockStore_DeleteTeamMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteTeamMembership_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockStore_DeleteTeamMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllConnectors provides a mock function with given fields: ctx
func (_m *MockStore) GetAllConnectors(ctx context.Context) ([]models.ConnectorWithActiveConnectionsCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllConnectors")
	}

	var r0 []models.ConnectorWithActiveConnectionsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.ConnectorWithActiveConnectionsCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConnectorWithActiveConnectionsCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetAllConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllConnectors'
type MockStore_GetAllConnectors_Call struct {
	*mock.Call
}

// GetAllConnectors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetAllConnectors(ctx interface{}) *MockStore_GetAllConnectors_Call {
	return &MockStore_GetAllConnectors_Call{Call: _e.mock.On("GetAllConnectors", ctx)}
}

func (_c *MockStore_GetAllConnectors_Call) Run(run func(ctx context.Context)) *MockStore_GetAllConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetAllConnectors_Call) Return(_a0 []models.ConnectorWithActiveConnectionsCount, _a1 error) *MockStore_GetAllConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetAllConnectors_Call) RunAndReturn(run func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)) *MockStore_GetAllConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFileUploads provides a mock function with given fields: ctx
func (_m *MockStore) GetAllFileUploads(ctx context.Context) ([]*models.FileUpload, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFileUploads")
	}

	var r0 []*models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.FileUpload, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.FileUpload); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetAllFileUploads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFileUploads'
type MockStore_GetAllFileUploads_Call struct {
	*mock.Call
}

// GetAllFileUploads is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetAllFileUploads(ctx interface{}) *MockStore_GetAllFileUploads_Call {
	return &MockStore_GetAllFileUploads_Call{Call: _e.mock.On("GetAllFileUploads", ctx)}
}

func (_c *MockStore_GetAllFileUploads_Call) Run(run func(ctx context.Context)) *MockStore_GetAllFileUploads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetAllFileUploads_Call) Return(_a0 []*models.FileUpload, _a1 error) *MockStore_GetAllFileUploads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetAllFileUploads_Call) RunAndReturn(run func(context.Context) ([]*models.FileUpload, error)) *MockStore_GetAllFileUploads_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionByID provides a mock function with given fields: ctx, id
func (_m *MockStore) GetConnectionByID(ctx context.Context, id uuid.UUID) (*models.Connection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionByID")
	}

	var r0 *models.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Connection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Connection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetConnectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionByID'
type MockStore_GetConnectionByID_Call struct {
	*mock.Call
}

// GetConnectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStore_Expecter) GetConnectionByID(ctx interface{}, id interface{}) *MockStore_GetConnectionByID_Call {
	return &MockStore_GetConnectionByID_Call{Call: _e.mock.On("GetConnectionByID", ctx, id)}
}

func (_c *MockStore_GetConnectionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStore_GetConnectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetConnectionByID_Call) Return(_a0 *models.Connection, _a1 error) *MockStore_GetConnectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetConnectionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Connection, error)) *MockStore_GetConnectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionPolicies provides a mock function with given fields: ctx, connectionId
func (_m *MockStore) GetConnectionPolicies(ctx context.Context, connectionId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, connectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, connectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetConnectionPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionPolicies'
type MockStore_GetConnectionPolicies_Call struct {
	*mock.Call
}

// GetConnectionPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
func (_e *MockStore_Expecter) GetConnectionPolicies(ctx interface{}, connectionId interface{}) *MockStore_GetConnectionPolicies_Call {
	return &MockStore_GetConnectionPolicies_Call{Call: _e.mock.On("GetConnectionPolicies", ctx, connectionId)}
}

func (_c *MockStore_GetConnectionPolicies_Call) Run(run func(ctx context.Context, connectionId uuid.UUID)) *MockStore_GetConnectionPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetConnectionPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetConnectionPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetConnectionPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetConnectionPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnections provides a mock function with given fields: ctx
func (_m *MockStore) GetConnections(ctx context.Context) ([]models.Connection, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 []models.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Connection, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Connection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnections'
type MockStore_GetConnections_Call struct {
	*mock.Call
}

// GetConnections is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetConnections(ctx interface{}) *MockStore_GetConnections_Call {
	return &MockStore_GetConnections_Call{Call: _e.mock.On("GetConnections", ctx)}
}

func (_c *MockStore_GetConnections_Call) Run(run func(ctx context.Context)) *MockStore_GetConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetConnections_Call) Return(_a0 []models.Connection, _a1 error) *MockStore_GetConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetConnections_Call) RunAndReturn(run func(context.Context) ([]models.Connection, error)) *MockStore_GetConnections_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectorById provides a mock function with given fields: ctx, id
func (_m *MockStore) GetConnectorById(ctx context.Context, id uuid.UUID) (*models.Connector, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorById")
	}

	var r0 *models.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Connector, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Connector); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetConnectorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectorById'
type MockStore_GetConnectorById_Call struct {
	*mock.Call
}

// GetConnectorById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStore_Expecter) GetConnectorById(ctx interface{}, id interface{}) *MockStore_GetConnectorById_Call {
	return &MockStore_GetConnectorById_Call{Call: _e.mock.On("GetConnectorById", ctx, id)}
}

func (_c *MockStore_GetConnectorById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStore_GetConnectorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetConnectorById_Call) Return(_a0 *models.Connector, _a1 error) *MockStore_GetConnectorById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetConnectorById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Connector, error)) *MockStore_GetConnectorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetActionFromActionId provides a mock function with given fields: ctx, actionId
func (_m *MockStore) GetDatasetActionFromActionId(ctx context.Context, actionId string) (*models.DatasetAction, error) {
	ret := _m.Called(ctx, actionId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetActionFromActionId")
	}

	var r0 *models.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.DatasetAction, error)); ok {
		return rf(ctx, actionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.DatasetAction); ok {
		r0 = rf(ctx, actionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetActionFromActionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetActionFromActionId'
type MockStore_GetDatasetActionFromActionId_Call struct {
	*mock.Call
}

// GetDatasetActionFromActionId is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
func (_e *MockStore_Expecter) GetDatasetActionFromActionId(ctx interface{}, actionId interface{}) *MockStore_GetDatasetActionFromActionId_Call {
	return &MockStore_GetDatasetActionFromActionId_Call{Call: _e.mock.On("GetDatasetActionFromActionId", ctx, actionId)}
}

func (_c *MockStore_GetDatasetActionFromActionId_Call) Run(run func(ctx context.Context, actionId string)) *MockStore_GetDatasetActionFromActionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetDatasetActionFromActionId_Call) Return(_a0 *models.DatasetAction, _a1 error) *MockStore_GetDatasetActionFromActionId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetActionFromActionId_Call) RunAndReturn(run func(context.Context, string) (*models.DatasetAction, error)) *MockStore_GetDatasetActionFromActionId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetActions provides a mock function with given fields: ctx, organizationId, filters
func (_m *MockStore) GetDatasetActions(ctx context.Context, organizationId uuid.UUID, filters models.DatasetActionFilters) ([]models.DatasetAction, error) {
	ret := _m.Called(ctx, organizationId, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetActions")
	}

	var r0 []models.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]models.DatasetAction, error)); ok {
		return rf(ctx, organizationId, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) []models.DatasetAction); ok {
		r0 = rf(ctx, organizationId, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DatasetAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.DatasetActionFilters) error); ok {
		r1 = rf(ctx, organizationId, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetActions'
type MockStore_GetDatasetActions_Call struct {
	*mock.Call
}

// GetDatasetActions is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - filters models.DatasetActionFilters
func (_e *MockStore_Expecter) GetDatasetActions(ctx interface{}, organizationId interface{}, filters interface{}) *MockStore_GetDatasetActions_Call {
	return &MockStore_GetDatasetActions_Call{Call: _e.mock.On("GetDatasetActions", ctx, organizationId, filters)}
}

func (_c *MockStore_GetDatasetActions_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, filters models.DatasetActionFilters)) *MockStore_GetDatasetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.DatasetActionFilters))
	})
	return _c
}

func (_c *MockStore_GetDatasetActions_Call) Return(_a0 []models.DatasetAction, _a1 error) *MockStore_GetDatasetActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetActions_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]models.DatasetAction, error)) *MockStore_GetDatasetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetById provides a mock function with given fields: ctx, datasetId
func (_m *MockStore) GetDatasetById(ctx context.Context, datasetId string) (*models.Dataset, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetById")
	}

	var r0 *models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Dataset, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Dataset); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetById'
type MockStore_GetDatasetById_Call struct {
	*mock.Call
}

// GetDatasetById is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId string
func (_e *MockStore_Expecter) GetDatasetById(ctx interface{}, datasetId interface{}) *MockStore_GetDatasetById_Call {
	return &MockStore_GetDatasetById_Call{Call: _e.mock.On("GetDatasetById", ctx, datasetId)}
}

func (_c *MockStore_GetDatasetById_Call) Run(run func(ctx context.Context, datasetId string)) *MockStore_GetDatasetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetDatasetById_Call) Return(_a0 *models.Dataset, _a1 error) *MockStore_GetDatasetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetById_Call) RunAndReturn(run func(context.Context, string) (*models.Dataset, error)) *MockStore_GetDatasetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetCount provides a mock function with given fields: ctx, filters
func (_m *MockStore) GetDatasetCount(ctx context.Context, filters models.DatasetFilters) (int64, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) (int64, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) int64); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetCount'
type MockStore_GetDatasetCount_Call struct {
	*mock.Call
}

// GetDatasetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockStore_Expecter) GetDatasetCount(ctx interface{}, filters interface{}) *MockStore_GetDatasetCount_Call {
	return &MockStore_GetDatasetCount_Call{Call: _e.mock.On("GetDatasetCount", ctx, filters)}
}

func (_c *MockStore_GetDatasetCount_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockStore_GetDatasetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockStore_GetDatasetCount_Call) Return(_a0 int64, _a1 error) *MockStore_GetDatasetCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetCount_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) (int64, error)) *MockStore_GetDatasetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetFileUploadByDatasetId provides a mock function with given fields: ctx, datasetId
func (_m *MockStore) GetDatasetFileUploadByDatasetId(ctx context.Context, datasetId uuid.UUID) ([]models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetFileUploadByDatasetId")
	}

	var r0 []models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.DatasetFileUpload, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.DatasetFileUpload); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetFileUploadByDatasetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetFileUploadByDatasetId'
type MockStore_GetDatasetFileUploadByDatasetId_Call struct {
	*mock.Call
}

// GetDatasetFileUploadByDatasetId is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockStore_Expecter) GetDatasetFileUploadByDatasetId(ctx interface{}, datasetId interface{}) *MockStore_GetDatasetFileUploadByDatasetId_Call {
	return &MockStore_GetDatasetFileUploadByDatasetId_Call{Call: _e.mock.On("GetDatasetFileUploadByDatasetId", ctx, datasetId)}
}

func (_c *MockStore_GetDatasetFileUploadByDatasetId_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetDatasetFileUploadByDatasetId_Call) Return(_a0 []models.DatasetFileUpload, _a1 error) *MockStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetFileUploadByDatasetId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.DatasetFileUpload, error)) *MockStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetFileUploadById provides a mock function with given fields: ctx, fileUploadId
func (_m *MockStore) GetDatasetFileUploadById(ctx context.Context, fileUploadId uuid.UUID) (models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, fileUploadId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetFileUploadById")
	}

	var r0 models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.DatasetFileUpload, error)); ok {
		return rf(ctx, fileUploadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.DatasetFileUpload); ok {
		r0 = rf(ctx, fileUploadId)
	} else {
		r0 = ret.Get(0).(models.DatasetFileUpload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fileUploadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetFileUploadById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetFileUploadById'
type MockStore_GetDatasetFileUploadById_Call struct {
	*mock.Call
}

// GetDatasetFileUploadById is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
func (_e *MockStore_Expecter) GetDatasetFileUploadById(ctx interface{}, fileUploadId interface{}) *MockStore_GetDatasetFileUploadById_Call {
	return &MockStore_GetDatasetFileUploadById_Call{Call: _e.mock.On("GetDatasetFileUploadById", ctx, fileUploadId)}
}

func (_c *MockStore_GetDatasetFileUploadById_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID)) *MockStore_GetDatasetFileUploadById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetDatasetFileUploadById_Call) Return(_a0 models.DatasetFileUpload, _a1 error) *MockStore_GetDatasetFileUploadById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetFileUploadById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.DatasetFileUpload, error)) *MockStore_GetDatasetFileUploadById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPolicies provides a mock function with given fields: ctx, datasetId
func (_m *MockStore) GetDatasetPolicies(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPolicies'
type MockStore_GetDatasetPolicies_Call struct {
	*mock.Call
}

// GetDatasetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockStore_Expecter) GetDatasetPolicies(ctx interface{}, datasetId interface{}) *MockStore_GetDatasetPolicies_Call {
	return &MockStore_GetDatasetPolicies_Call{Call: _e.mock.On("GetDatasetPolicies", ctx, datasetId)}
}

func (_c *MockStore_GetDatasetPolicies_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockStore_GetDatasetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetDatasetPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetDatasetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetDatasetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPoliciesByEmail provides a mock function with given fields: ctx, datasetId, email
func (_m *MockStore) GetDatasetPoliciesByEmail(ctx context.Context, datasetId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, datasetId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPoliciesByEmail'
type MockStore_GetDatasetPoliciesByEmail_Call struct {
	*mock.Call
}

// GetDatasetPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - email string
func (_e *MockStore_Expecter) GetDatasetPoliciesByEmail(ctx interface{}, datasetId interface{}, email interface{}) *MockStore_GetDatasetPoliciesByEmail_Call {
	return &MockStore_GetDatasetPoliciesByEmail_Call{Call: _e.mock.On("GetDatasetPoliciesByEmail", ctx, datasetId, email)}
}

func (_c *MockStore_GetDatasetPoliciesByEmail_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, email string)) *MockStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStore_GetDatasetPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetsAll provides a mock function with given fields: ctx, filters
func (_m *MockStore) GetDatasetsAll(ctx context.Context, filters models.DatasetFilters) ([]models.Dataset, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetsAll")
	}

	var r0 []models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) ([]models.Dataset, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) []models.Dataset); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetDatasetsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetsAll'
type MockStore_GetDatasetsAll_Call struct {
	*mock.Call
}

// GetDatasetsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockStore_Expecter) GetDatasetsAll(ctx interface{}, filters interface{}) *MockStore_GetDatasetsAll_Call {
	return &MockStore_GetDatasetsAll_Call{Call: _e.mock.On("GetDatasetsAll", ctx, filters)}
}

func (_c *MockStore_GetDatasetsAll_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockStore_GetDatasetsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockStore_GetDatasetsAll_Call) Return(_a0 []models.Dataset, _a1 error) *MockStore_GetDatasetsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetDatasetsAll_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) ([]models.Dataset, error)) *MockStore_GetDatasetsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileUploadByIds provides a mock function with given fields: ctx, ids
func (_m *MockStore) GetFileUploadByIds(ctx context.Context, ids []uuid.UUID) ([]models.FileUpload, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetFileUploadByIds")
	}

	var r0 []models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]models.FileUpload, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []models.FileUpload); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetFileUploadByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileUploadByIds'
type MockStore_GetFileUploadByIds_Call struct {
	*mock.Call
}

// GetFileUploadByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockStore_Expecter) GetFileUploadByIds(ctx interface{}, ids interface{}) *MockStore_GetFileUploadByIds_Call {
	return &MockStore_GetFileUploadByIds_Call{Call: _e.mock.On("GetFileUploadByIds", ctx, ids)}
}

func (_c *MockStore_GetFileUploadByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockStore_GetFileUploadByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetFileUploadByIds_Call) Return(_a0 []models.FileUpload, _a1 error) *MockStore_GetFileUploadByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetFileUploadByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]models.FileUpload, error)) *MockStore_GetFileUploadByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlattenedResourceAudiencePolicies provides a mock function with given fields: ctx, filters
func (_m *MockStore) GetFlattenedResourceAudiencePolicies(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetFlattenedResourceAudiencePolicies")
	}

	var r0 []models.FlattenedResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) []models.FlattenedResourceAudiencePolicy); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FlattenedResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetFlattenedResourceAudiencePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlattenedResourceAudiencePolicies'
type MockStore_GetFlattenedResourceAudiencePolicies_Call struct {
	*mock.Call
}

// GetFlattenedResourceAudiencePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.FlattenedResourceAudiencePoliciesFilters
func (_e *MockStore_Expecter) GetFlattenedResourceAudiencePolicies(ctx interface{}, filters interface{}) *MockStore_GetFlattenedResourceAudiencePolicies_Call {
	return &MockStore_GetFlattenedResourceAudiencePolicies_Call{Call: _e.mock.On("GetFlattenedResourceAudiencePolicies", ctx, filters)}
}

func (_c *MockStore_GetFlattenedResourceAudiencePolicies_Call) Run(run func(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters)) *MockStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FlattenedResourceAudiencePoliciesFilters))
	})
	return _c
}

func (_c *MockStore_GetFlattenedResourceAudiencePolicies_Call) Return(_a0 []models.FlattenedResourceAudiencePolicy, _a1 error) *MockStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetFlattenedResourceAudiencePolicies_Call) RunAndReturn(run func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)) *MockStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationById provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetOrganizationById(ctx context.Context, organizationId string) (*models.Organization, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationById")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Organization, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Organization); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationById'
type MockStore_GetOrganizationById_Call struct {
	*mock.Call
}

// GetOrganizationById is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
func (_e *MockStore_Expecter) GetOrganizationById(ctx interface{}, organizationId interface{}) *MockStore_GetOrganizationById_Call {
	return &MockStore_GetOrganizationById_Call{Call: _e.mock.On("GetOrganizationById", ctx, organizationId)}
}

func (_c *MockStore_GetOrganizationById_Call) Run(run func(ctx context.Context, organizationId string)) *MockStore_GetOrganizationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetOrganizationById_Call) Return(_a0 *models.Organization, _a1 error) *MockStore_GetOrganizationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationById_Call) RunAndReturn(run func(context.Context, string) (*models.Organization, error)) *MockStore_GetOrganizationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationById provides a mock function with given fields: ctx, invitationId
func (_m *MockStore) GetOrganizationInvitationById(ctx context.Context, invitationId uuid.UUID) (*models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationById")
	}

	var r0 *models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.OrganizationInvitation, error)); ok {
		return rf(ctx, invitationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.OrganizationInvitation); ok {
		r0 = rf(ctx, invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationInvitationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationById'
type MockStore_GetOrganizationInvitationById_Call struct {
	*mock.Call
}

// GetOrganizationInvitationById is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationInvitationById(ctx interface{}, invitationId interface{}) *MockStore_GetOrganizationInvitationById_Call {
	return &MockStore_GetOrganizationInvitationById_Call{Call: _e.mock.On("GetOrganizationInvitationById", ctx, invitationId)}
}

func (_c *MockStore_GetOrganizationInvitationById_Call) Run(run func(ctx context.Context, invitationId uuid.UUID)) *MockStore_GetOrganizationInvitationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationInvitationById_Call) Return(_a0 *models.OrganizationInvitation, _a1 error) *MockStore_GetOrganizationInvitationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationInvitationById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.OrganizationInvitation, error)) *MockStore_GetOrganizationInvitationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsAll provides a mock function with given fields: ctx
func (_m *MockStore) GetOrganizationInvitationsAll(ctx context.Context) ([]models.OrganizationInvitation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsAll")
	}

	var r0 []models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.OrganizationInvitation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.OrganizationInvitation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationInvitationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsAll'
type MockStore_GetOrganizationInvitationsAll_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetOrganizationInvitationsAll(ctx interface{}) *MockStore_GetOrganizationInvitationsAll_Call {
	return &MockStore_GetOrganizationInvitationsAll_Call{Call: _e.mock.On("GetOrganizationInvitationsAll", ctx)}
}

func (_c *MockStore_GetOrganizationInvitationsAll_Call) Run(run func(ctx context.Context)) *MockStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsAll_Call) Return(_a0 []models.OrganizationInvitation, _a1 error) *MockStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsAll_Call) RunAndReturn(run func(context.Context) ([]models.OrganizationInvitation, error)) *MockStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsAndMembershipRequests provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetOrganizationInvitationsAndMembershipRequests(ctx context.Context, organizationId uuid.UUID) (*models.Organization, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsAndMembershipRequests")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Organization, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Organization); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationInvitationsAndMembershipRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsAndMembershipRequests'
type MockStore_GetOrganizationInvitationsAndMembershipRequests_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsAndMembershipRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationInvitationsAndMembershipRequests(ctx interface{}, organizationId interface{}) *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	return &MockStore_GetOrganizationInvitationsAndMembershipRequests_Call{Call: _e.mock.On("GetOrganizationInvitationsAndMembershipRequests", ctx, organizationId)}
}

func (_c *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call) Return(_a0 *models.Organization, _a1 error) *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Organization, error)) *MockStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetOrganizationInvitationsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsByOrganizationId")
	}

	var r0 []models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationInvitationsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsByOrganizationId'
type MockStore_GetOrganizationInvitationsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationInvitationsByOrganizationId(ctx interface{}, organizationId interface{}) *MockStore_GetOrganizationInvitationsByOrganizationId_Call {
	return &MockStore_GetOrganizationInvitationsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationInvitationsByOrganizationId", ctx, organizationId)}
}

func (_c *MockStore_GetOrganizationInvitationsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsByOrganizationId_Call) Return(_a0 []models.OrganizationInvitation, _a1 error) *MockStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationInvitationsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationInvitation, error)) *MockStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationMembershipRequestsAll provides a mock function with given fields: ctx
func (_m *MockStore) GetOrganizationMembershipRequestsAll(ctx context.Context) ([]models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationMembershipRequestsAll")
	}

	var r0 []models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationMembershipRequestsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationMembershipRequestsAll'
type MockStore_GetOrganizationMembershipRequestsAll_Call struct {
	*mock.Call
}

// GetOrganizationMembershipRequestsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetOrganizationMembershipRequestsAll(ctx interface{}) *MockStore_GetOrganizationMembershipRequestsAll_Call {
	return &MockStore_GetOrganizationMembershipRequestsAll_Call{Call: _e.mock.On("GetOrganizationMembershipRequestsAll", ctx)}
}

func (_c *MockStore_GetOrganizationMembershipRequestsAll_Call) Run(run func(ctx context.Context)) *MockStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetOrganizationMembershipRequestsAll_Call) Return(_a0 []models.OrganizationMembershipRequest, _a1 error) *MockStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationMembershipRequestsAll_Call) RunAndReturn(run func(context.Context) ([]models.OrganizationMembershipRequest, error)) *MockStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationMembershipRequestsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetOrganizationMembershipRequestsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationMembershipRequestsByOrganizationId")
	}

	var r0 []models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationMembershipRequestsByOrganizationId'
type MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationMembershipRequestsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationMembershipRequestsByOrganizationId(ctx interface{}, organizationId interface{}) *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	return &MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationMembershipRequestsByOrganizationId", ctx, organizationId)}
}

func (_c *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call) Return(_a0 []models.OrganizationMembershipRequest, _a1 error) *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationMembershipRequest, error)) *MockStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicies provides a mock function with given fields: ctx, orgId
func (_m *MockStore) GetOrganizationPolicies(ctx context.Context, orgId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicies'
type MockStore_GetOrganizationPolicies_Call struct {
	*mock.Call
}

// GetOrganizationPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationPolicies(ctx interface{}, orgId interface{}) *MockStore_GetOrganizationPolicies_Call {
	return &MockStore_GetOrganizationPolicies_Call{Call: _e.mock.On("GetOrganizationPolicies", ctx, orgId)}
}

func (_c *MockStore_GetOrganizationPolicies_Call) Run(run func(ctx context.Context, orgId uuid.UUID)) *MockStore_GetOrganizationPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetOrganizationPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetOrganizationPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPoliciesByEmail provides a mock function with given fields: ctx, organizationId, email
func (_m *MockStore) GetOrganizationPoliciesByEmail(ctx context.Context, organizationId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, organizationId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPoliciesByEmail'
type MockStore_GetOrganizationPoliciesByEmail_Call struct {
	*mock.Call
}

// GetOrganizationPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - email string
func (_e *MockStore_Expecter) GetOrganizationPoliciesByEmail(ctx interface{}, organizationId interface{}, email interface{}) *MockStore_GetOrganizationPoliciesByEmail_Call {
	return &MockStore_GetOrganizationPoliciesByEmail_Call{Call: _e.mock.On("GetOrganizationPoliciesByEmail", ctx, organizationId, email)}
}

func (_c *MockStore_GetOrganizationPoliciesByEmail_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, email string)) *MockStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStore_GetOrganizationPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicyByUser provides a mock function with given fields: ctx, organizationId, userId
func (_m *MockStore) GetOrganizationPolicyByUser(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByUser")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationPolicyByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicyByUser'
type MockStore_GetOrganizationPolicyByUser_Call struct {
	*mock.Call
}

// GetOrganizationPolicyByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationPolicyByUser(ctx interface{}, organizationId interface{}, userId interface{}) *MockStore_GetOrganizationPolicyByUser_Call {
	return &MockStore_GetOrganizationPolicyByUser_Call{Call: _e.mock.On("GetOrganizationPolicyByUser", ctx, organizationId, userId)}
}

func (_c *MockStore_GetOrganizationPolicyByUser_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID)) *MockStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationPolicyByUser_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationPolicyByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)) *MockStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSSOConfigsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetOrganizationSSOConfigsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSSOConfigsByOrganizationId")
	}

	var r0 []models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationSSOConfigsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSSOConfigsByOrganizationId'
type MockStore_GetOrganizationSSOConfigsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationSSOConfigsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationSSOConfigsByOrganizationId(ctx interface{}, organizationId interface{}) *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	return &MockStore_GetOrganizationSSOConfigsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationSSOConfigsByOrganizationId", ctx, organizationId)}
}

func (_c *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call) Return(_a0 []models.OrganizationSSOConfig, _a1 error) *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationSSOConfig, error)) *MockStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsAll provides a mock function with given fields: ctx
func (_m *MockStore) GetOrganizationsAll(ctx context.Context) ([]models.Organization, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsAll")
	}

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Organization, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsAll'
type MockStore_GetOrganizationsAll_Call struct {
	*mock.Call
}

// GetOrganizationsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetOrganizationsAll(ctx interface{}) *MockStore_GetOrganizationsAll_Call {
	return &MockStore_GetOrganizationsAll_Call{Call: _e.mock.On("GetOrganizationsAll", ctx)}
}

func (_c *MockStore_GetOrganizationsAll_Call) Run(run func(ctx context.Context)) *MockStore_GetOrganizationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetOrganizationsAll_Call) Return(_a0 []models.Organization, _a1 error) *MockStore_GetOrganizationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationsAll_Call) RunAndReturn(run func(context.Context) ([]models.Organization, error)) *MockStore_GetOrganizationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsByMemberId provides a mock function with given fields: ctx, memberId
func (_m *MockStore) GetOrganizationsByMemberId(ctx context.Context, memberId uuid.UUID) ([]models.Organization, error) {
	ret := _m.Called(ctx, memberId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsByMemberId")
	}

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Organization, error)); ok {
		return rf(ctx, memberId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Organization); ok {
		r0 = rf(ctx, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetOrganizationsByMemberId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsByMemberId'
type MockStore_GetOrganizationsByMemberId_Call struct {
	*mock.Call
}

// GetOrganizationsByMemberId is a helper method to define mock.On call
//   - ctx context.Context
//   - memberId uuid.UUID
func (_e *MockStore_Expecter) GetOrganizationsByMemberId(ctx interface{}, memberId interface{}) *MockStore_GetOrganizationsByMemberId_Call {
	return &MockStore_GetOrganizationsByMemberId_Call{Call: _e.mock.On("GetOrganizationsByMemberId", ctx, memberId)}
}

func (_c *MockStore_GetOrganizationsByMemberId_Call) Run(run func(ctx context.Context, memberId uuid.UUID)) *MockStore_GetOrganizationsByMemberId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetOrganizationsByMemberId_Call) Return(_a0 []models.Organization, _a1 error) *MockStore_GetOrganizationsByMemberId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetOrganizationsByMemberId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Organization, error)) *MockStore_GetOrganizationsByMemberId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageById provides a mock function with given fields: ctx, pageId
func (_m *MockStore) GetPageById(ctx context.Context, pageId uuid.UUID) (*models.Page, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageById")
	}

	var r0 *models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Page, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Page); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPageById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageById'
type MockStore_GetPageById_Call struct {
	*mock.Call
}

// GetPageById is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockStore_Expecter) GetPageById(ctx interface{}, pageId interface{}) *MockStore_GetPageById_Call {
	return &MockStore_GetPageById_Call{Call: _e.mock.On("GetPageById", ctx, pageId)}
}

func (_c *MockStore_GetPageById_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockStore_GetPageById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetPageById_Call) Return(_a0 *models.Page, _a1 error) *MockStore_GetPageById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPageById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Page, error)) *MockStore_GetPageById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagePoliciesByEmail provides a mock function with given fields: ctx, pageId, email
func (_m *MockStore) GetPagePoliciesByEmail(ctx context.Context, pageId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetPagePoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, pageId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPagePoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagePoliciesByEmail'
type MockStore_GetPagePoliciesByEmail_Call struct {
	*mock.Call
}

// GetPagePoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - email string
func (_e *MockStore_Expecter) GetPagePoliciesByEmail(ctx interface{}, pageId interface{}, email interface{}) *MockStore_GetPagePoliciesByEmail_Call {
	return &MockStore_GetPagePoliciesByEmail_Call{Call: _e.mock.On("GetPagePoliciesByEmail", ctx, pageId, email)}
}

func (_c *MockStore_GetPagePoliciesByEmail_Call) Run(run func(ctx context.Context, pageId uuid.UUID, email string)) *MockStore_GetPagePoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStore_GetPagePoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetPagePoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPagePoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetPagePoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesAll provides a mock function with given fields: ctx, filters
func (_m *MockStore) GetPagesAll(ctx context.Context, filters models.PageFilters) ([]models.Page, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesAll")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PageFilters) ([]models.Page, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PageFilters) []models.Page); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PageFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPagesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesAll'
type MockStore_GetPagesAll_Call struct {
	*mock.Call
}

// GetPagesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.PageFilters
func (_e *MockStore_Expecter) GetPagesAll(ctx interface{}, filters interface{}) *MockStore_GetPagesAll_Call {
	return &MockStore_GetPagesAll_Call{Call: _e.mock.On("GetPagesAll", ctx, filters)}
}

func (_c *MockStore_GetPagesAll_Call) Run(run func(ctx context.Context, filters models.PageFilters)) *MockStore_GetPagesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PageFilters))
	})
	return _c
}

func (_c *MockStore_GetPagesAll_Call) Return(_a0 []models.Page, _a1 error) *MockStore_GetPagesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPagesAll_Call) RunAndReturn(run func(context.Context, models.PageFilters) ([]models.Page, error)) *MockStore_GetPagesAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetPagesByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.Page, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesByOrganizationId")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Page, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Page); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPagesByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesByOrganizationId'
type MockStore_GetPagesByOrganizationId_Call struct {
	*mock.Call
}

// GetPagesByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetPagesByOrganizationId(ctx interface{}, organizationId interface{}) *MockStore_GetPagesByOrganizationId_Call {
	return &MockStore_GetPagesByOrganizationId_Call{Call: _e.mock.On("GetPagesByOrganizationId", ctx, organizationId)}
}

func (_c *MockStore_GetPagesByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetPagesByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetPagesByOrganizationId_Call) Return(_a0 []models.Page, _a1 error) *MockStore_GetPagesByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPagesByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Page, error)) *MockStore_GetPagesByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesPolicies provides a mock function with given fields: ctx, pageId
func (_m *MockStore) GetPagesPolicies(ctx context.Context, pageId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPagesPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesPolicies'
type MockStore_GetPagesPolicies_Call struct {
	*mock.Call
}

// GetPagesPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockStore_Expecter) GetPagesPolicies(ctx interface{}, pageId interface{}) *MockStore_GetPagesPolicies_Call {
	return &MockStore_GetPagesPolicies_Call{Call: _e.mock.On("GetPagesPolicies", ctx, pageId)}
}

func (_c *MockStore_GetPagesPolicies_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockStore_GetPagesPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetPagesPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockStore_GetPagesPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPagesPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockStore_GetPagesPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentsConfigsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetPaymentsConfigsByOrganizationId(ctx context.Context, organizationId string) (models.PaymentsConfig, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsConfigsByOrganizationId")
	}

	var r0 models.PaymentsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.PaymentsConfig, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.PaymentsConfig); ok {
		r0 = rf(ctx, organizationId)
	} else {
		r0 = ret.Get(0).(models.PaymentsConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPaymentsConfigsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentsConfigsByOrganizationId'
type MockStore_GetPaymentsConfigsByOrganizationId_Call struct {
	*mock.Call
}

// GetPaymentsConfigsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
func (_e *MockStore_Expecter) GetPaymentsConfigsByOrganizationId(ctx interface{}, organizationId interface{}) *MockStore_GetPaymentsConfigsByOrganizationId_Call {
	return &MockStore_GetPaymentsConfigsByOrganizationId_Call{Call: _e.mock.On("GetPaymentsConfigsByOrganizationId", ctx, organizationId)}
}

func (_c *MockStore_GetPaymentsConfigsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId string)) *MockStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetPaymentsConfigsByOrganizationId_Call) Return(_a0 models.PaymentsConfig, _a1 error) *MockStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPaymentsConfigsByOrganizationId_Call) RunAndReturn(run func(context.Context, string) (models.PaymentsConfig, error)) *MockStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrimarySSOConfigByDomain provides a mock function with given fields: ctx, domain
func (_m *MockStore) GetPrimarySSOConfigByDomain(ctx context.Context, domain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimarySSOConfigByDomain")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPrimarySSOConfigByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrimarySSOConfigByDomain'
type MockStore_GetPrimarySSOConfigByDomain_Call struct {
	*mock.Call
}

// GetPrimarySSOConfigByDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockStore_Expecter) GetPrimarySSOConfigByDomain(ctx interface{}, domain interface{}) *MockStore_GetPrimarySSOConfigByDomain_Call {
	return &MockStore_GetPrimarySSOConfigByDomain_Call{Call: _e.mock.On("GetPrimarySSOConfigByDomain", ctx, domain)}
}

func (_c *MockStore_GetPrimarySSOConfigByDomain_Call) Run(run func(ctx context.Context, domain string)) *MockStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetPrimarySSOConfigByDomain_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPrimarySSOConfigByDomain_Call) RunAndReturn(run func(context.Context, string) (*models.OrganizationSSOConfig, error)) *MockStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleById provides a mock function with given fields: ctx, ruleId
func (_m *MockStore) GetRuleById(ctx context.Context, ruleId uuid.UUID) (models.Rule, error) {
	ret := _m.Called(ctx, ruleId)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleById")
	}

	var r0 models.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Rule, error)); ok {
		return rf(ctx, ruleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Rule); ok {
		r0 = rf(ctx, ruleId)
	} else {
		r0 = ret.Get(0).(models.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ruleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetRuleById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleById'
type MockStore_GetRuleById_Call struct {
	*mock.Call
}

// GetRuleById is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleId uuid.UUID
func (_e *MockStore_Expecter) GetRuleById(ctx interface{}, ruleId interface{}) *MockStore_GetRuleById_Call {
	return &MockStore_GetRuleById_Call{Call: _e.mock.On("GetRuleById", ctx, ruleId)}
}

func (_c *MockStore_GetRuleById_Call) Run(run func(ctx context.Context, ruleId uuid.UUID)) *MockStore_GetRuleById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetRuleById_Call) Return(_a0 models.Rule, _a1 error) *MockStore_GetRuleById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetRuleById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.Rule, error)) *MockStore_GetRuleById_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleByIds provides a mock function with given fields: ctx, ruleIds
func (_m *MockStore) GetRuleByIds(ctx context.Context, ruleIds []uuid.UUID) ([]models.Rule, error) {
	ret := _m.Called(ctx, ruleIds)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleByIds")
	}

	var r0 []models.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]models.Rule, error)); ok {
		return rf(ctx, ruleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []models.Rule); ok {
		r0 = rf(ctx, ruleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ruleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetRuleByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleByIds'
type MockStore_GetRuleByIds_Call struct {
	*mock.Call
}

// GetRuleByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleIds []uuid.UUID
func (_e *MockStore_Expecter) GetRuleByIds(ctx interface{}, ruleIds interface{}) *MockStore_GetRuleByIds_Call {
	return &MockStore_GetRuleByIds_Call{Call: _e.mock.On("GetRuleByIds", ctx, ruleIds)}
}

func (_c *MockStore_GetRuleByIds_Call) Run(run func(ctx context.Context, ruleIds []uuid.UUID)) *MockStore_GetRuleByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetRuleByIds_Call) Return(_a0 []models.Rule, _a1 error) *MockStore_GetRuleByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetRuleByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]models.Rule, error)) *MockStore_GetRuleByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetRules provides a mock function with given fields: ctx, params
func (_m *MockStore) GetRules(ctx context.Context, params models.FilterRuleParams) (map[string]map[string][]models.Rule, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetRules")
	}

	var r0 map[string]map[string][]models.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterRuleParams) (map[string]map[string][]models.Rule, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterRuleParams) map[string]map[string][]models.Rule); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]models.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FilterRuleParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRules'
type MockStore_GetRules_Call struct {
	*mock.Call
}

// GetRules is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.FilterRuleParams
func (_e *MockStore_Expecter) GetRules(ctx interface{}, params interface{}) *MockStore_GetRules_Call {
	return &MockStore_GetRules_Call{Call: _e.mock.On("GetRules", ctx, params)}
}

func (_c *MockStore_GetRules_Call) Run(run func(ctx context.Context, params models.FilterRuleParams)) *MockStore_GetRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FilterRuleParams))
	})
	return _c
}

func (_c *MockStore_GetRules_Call) Return(_a0 map[string]map[string][]models.Rule, _a1 error) *MockStore_GetRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetRules_Call) RunAndReturn(run func(context.Context, models.FilterRuleParams) (map[string]map[string][]models.Rule, error)) *MockStore_GetRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSOConfigByDomain provides a mock function with given fields: ctx, domain
func (_m *MockStore) GetSSOConfigByDomain(ctx context.Context, domain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetSSOConfigByDomain")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSSOConfigByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSOConfigByDomain'
type MockStore_GetSSOConfigByDomain_Call struct {
	*mock.Call
}

// GetSSOConfigByDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockStore_Expecter) GetSSOConfigByDomain(ctx interface{}, domain interface{}) *MockStore_GetSSOConfigByDomain_Call {
	return &MockStore_GetSSOConfigByDomain_Call{Call: _e.mock.On("GetSSOConfigByDomain", ctx, domain)}
}

func (_c *MockStore_GetSSOConfigByDomain_Call) Run(run func(ctx context.Context, domain string)) *MockStore_GetSSOConfigByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetSSOConfigByDomain_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockStore_GetSSOConfigByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSSOConfigByDomain_Call) RunAndReturn(run func(context.Context, string) (*models.OrganizationSSOConfig, error)) *MockStore_GetSSOConfigByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedulesByConnectionID provides a mock function with given fields: ctx, connectionID
func (_m *MockStore) GetSchedulesByConnectionID(ctx context.Context, connectionID uuid.UUID) ([]models.Schedule, error) {
	ret := _m.Called(ctx, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSchedulesByConnectionID")
	}

	var r0 []models.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Schedule, error)); ok {
		return rf(ctx, connectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Schedule); ok {
		r0 = rf(ctx, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSchedulesByConnectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedulesByConnectionID'
type MockStore_GetSchedulesByConnectionID_Call struct {
	*mock.Call
}

// GetSchedulesByConnectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionID uuid.UUID
func (_e *MockStore_Expecter) GetSchedulesByConnectionID(ctx interface{}, connectionID interface{}) *MockStore_GetSchedulesByConnectionID_Call {
	return &MockStore_GetSchedulesByConnectionID_Call{Call: _e.mock.On("GetSchedulesByConnectionID", ctx, connectionID)}
}

func (_c *MockStore_GetSchedulesByConnectionID_Call) Run(run func(ctx context.Context, connectionID uuid.UUID)) *MockStore_GetSchedulesByConnectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetSchedulesByConnectionID_Call) Return(_a0 []models.Schedule, _a1 error) *MockStore_GetSchedulesByConnectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSchedulesByConnectionID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Schedule, error)) *MockStore_GetSchedulesByConnectionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSheetById provides a mock function with given fields: ctx, sheetId
func (_m *MockStore) GetSheetById(ctx context.Context, sheetId uuid.UUID) (*models.Sheet, error) {
	ret := _m.Called(ctx, sheetId)

	if len(ret) == 0 {
		panic("no return value specified for GetSheetById")
	}

	var r0 *models.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Sheet, error)); ok {
		return rf(ctx, sheetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Sheet); ok {
		r0 = rf(ctx, sheetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sheetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSheetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSheetById'
type MockStore_GetSheetById_Call struct {
	*mock.Call
}

// GetSheetById is a helper method to define mock.On call
//   - ctx context.Context
//   - sheetId uuid.UUID
func (_e *MockStore_Expecter) GetSheetById(ctx interface{}, sheetId interface{}) *MockStore_GetSheetById_Call {
	return &MockStore_GetSheetById_Call{Call: _e.mock.On("GetSheetById", ctx, sheetId)}
}

func (_c *MockStore_GetSheetById_Call) Run(run func(ctx context.Context, sheetId uuid.UUID)) *MockStore_GetSheetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetSheetById_Call) Return(_a0 *models.Sheet, _a1 error) *MockStore_GetSheetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSheetById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Sheet, error)) *MockStore_GetSheetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetSheetsAll provides a mock function with given fields: ctx, filters
func (_m *MockStore) GetSheetsAll(ctx context.Context, filters models.SheetFilters) ([]models.Sheet, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetSheetsAll")
	}

	var r0 []models.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SheetFilters) ([]models.Sheet, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SheetFilters) []models.Sheet); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SheetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSheetsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSheetsAll'
type MockStore_GetSheetsAll_Call struct {
	*mock.Call
}

// GetSheetsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.SheetFilters
func (_e *MockStore_Expecter) GetSheetsAll(ctx interface{}, filters interface{}) *MockStore_GetSheetsAll_Call {
	return &MockStore_GetSheetsAll_Call{Call: _e.mock.On("GetSheetsAll", ctx, filters)}
}

func (_c *MockStore_GetSheetsAll_Call) Run(run func(ctx context.Context, filters models.SheetFilters)) *MockStore_GetSheetsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SheetFilters))
	})
	return _c
}

func (_c *MockStore_GetSheetsAll_Call) Return(_a0 []models.Sheet, _a1 error) *MockStore_GetSheetsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSheetsAll_Call) RunAndReturn(run func(context.Context, models.SheetFilters) ([]models.Sheet, error)) *MockStore_GetSheetsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, organizationId, teamId
func (_m *MockStore) GetTeam(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)); ok {
		return rf(ctx, organizationId, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.Team); ok {
		r0 = rf(ctx, organizationId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockStore_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockStore_Expecter) GetTeam(ctx interface{}, organizationId interface{}, teamId interface{}) *MockStore_GetTeam_Call {
	return &MockStore_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, organizationId, teamId)}
}

func (_c *MockStore_GetTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID)) *MockStore_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetTeam_Call) Return(_a0 *models.Team, _a1 error) *MockStore_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)) *MockStore_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByName provides a mock function with given fields: ctx, organizationId, name
func (_m *MockStore) GetTeamByName(ctx context.Context, organizationId uuid.UUID, name string) ([]models.Team, error) {
	ret := _m.Called(ctx, organizationId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByName")
	}

	var r0 []models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.Team, error)); ok {
		return rf(ctx, organizationId, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.Team); ok {
		r0 = rf(ctx, organizationId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, organizationId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByName'
type MockStore_GetTeamByName_Call struct {
	*mock.Call
}

// GetTeamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - name string
func (_e *MockStore_Expecter) GetTeamByName(ctx interface{}, organizationId interface{}, name interface{}) *MockStore_GetTeamByName_Call {
	return &MockStore_GetTeamByName_Call{Call: _e.mock.On("GetTeamByName", ctx, organizationId, name)}
}

func (_c *MockStore_GetTeamByName_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, name string)) *MockStore_GetTeamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStore_GetTeamByName_Call) Return(_a0 []models.Team, _a1 error) *MockStore_GetTeamByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeamByName_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.Team, error)) *MockStore_GetTeamByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembershipById provides a mock function with given fields: ctx, teamMembershipId
func (_m *MockStore) GetTeamMembershipById(ctx context.Context, teamMembershipId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, teamMembershipId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembershipById")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, teamMembershipId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, teamMembershipId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamMembershipId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeamMembershipById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembershipById'
type MockStore_GetTeamMembershipById_Call struct {
	*mock.Call
}

// GetTeamMembershipById is a helper method to define mock.On call
//   - ctx context.Context
//   - teamMembershipId uuid.UUID
func (_e *MockStore_Expecter) GetTeamMembershipById(ctx interface{}, teamMembershipId interface{}) *MockStore_GetTeamMembershipById_Call {
	return &MockStore_GetTeamMembershipById_Call{Call: _e.mock.On("GetTeamMembershipById", ctx, teamMembershipId)}
}

func (_c *MockStore_GetTeamMembershipById_Call) Run(run func(ctx context.Context, teamMembershipId uuid.UUID)) *MockStore_GetTeamMembershipById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetTeamMembershipById_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockStore_GetTeamMembershipById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeamMembershipById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.TeamMembership, error)) *MockStore_GetTeamMembershipById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembershipByUserIdTeamId provides a mock function with given fields: ctx, userId, teamId
func (_m *MockStore) GetTeamMembershipByUserIdTeamId(ctx context.Context, userId uuid.UUID, teamId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, userId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembershipByUserIdTeamId")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, userId, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, userId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeamMembershipByUserIdTeamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembershipByUserIdTeamId'
type MockStore_GetTeamMembershipByUserIdTeamId_Call struct {
	*mock.Call
}

// GetTeamMembershipByUserIdTeamId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockStore_Expecter) GetTeamMembershipByUserIdTeamId(ctx interface{}, userId interface{}, teamId interface{}) *MockStore_GetTeamMembershipByUserIdTeamId_Call {
	return &MockStore_GetTeamMembershipByUserIdTeamId_Call{Call: _e.mock.On("GetTeamMembershipByUserIdTeamId", ctx, userId, teamId)}
}

func (_c *MockStore_GetTeamMembershipByUserIdTeamId_Call) Run(run func(ctx context.Context, userId uuid.UUID, teamId uuid.UUID)) *MockStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetTeamMembershipByUserIdTeamId_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeamMembershipByUserIdTeamId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)) *MockStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMemberships provides a mock function with given fields: ctx, teamId
func (_m *MockStore) GetTeamMemberships(ctx context.Context, teamId uuid.UUID) ([]models.TeamMembership, error) {
	ret := _m.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMemberships")
	}

	var r0 []models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.TeamMembership, error)); ok {
		return rf(ctx, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.TeamMembership); ok {
		r0 = rf(ctx, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeamMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMemberships'
type MockStore_GetTeamMemberships_Call struct {
	*mock.Call
}

// GetTeamMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
func (_e *MockStore_Expecter) GetTeamMemberships(ctx interface{}, teamId interface{}) *MockStore_GetTeamMemberships_Call {
	return &MockStore_GetTeamMemberships_Call{Call: _e.mock.On("GetTeamMemberships", ctx, teamId)}
}

func (_c *MockStore_GetTeamMemberships_Call) Run(run func(ctx context.Context, teamId uuid.UUID)) *MockStore_GetTeamMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetTeamMemberships_Call) Return(_a0 []models.TeamMembership, _a1 error) *MockStore_GetTeamMemberships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeamMemberships_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.TeamMembership, error)) *MockStore_GetTeamMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx, organizationId
func (_m *MockStore) GetTeams(ctx context.Context, organizationId uuid.UUID) ([]models.Team, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Team, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Team); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockStore_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockStore_Expecter) GetTeams(ctx interface{}, organizationId interface{}) *MockStore_GetTeams_Call {
	return &MockStore_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx, organizationId)}
}

func (_c *MockStore_GetTeams_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockStore_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetTeams_Call) Return(_a0 []models.Team, _a1 error) *MockStore_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Team, error)) *MockStore_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *MockStore) GetUserById(ctx context.Context, userId string) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockStore_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockStore_Expecter) GetUserById(ctx interface{}, userId interface{}) *MockStore_GetUserById_Call {
	return &MockStore_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *MockStore_GetUserById_Call) Run(run func(ctx context.Context, userId string)) *MockStore_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetUserById_Call) Return(_a0 *models.User, _a1 error) *MockStore_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserById_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockStore_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersAll provides a mock function with given fields: ctx
func (_m *MockStore) GetUsersAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUsersAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersAll'
type MockStore_GetUsersAll_Call struct {
	*mock.Call
}

// GetUsersAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) GetUsersAll(ctx interface{}) *MockStore_GetUsersAll_Call {
	return &MockStore_GetUsersAll_Call{Call: _e.mock.On("GetUsersAll", ctx)}
}

func (_c *MockStore_GetUsersAll_Call) Run(run func(ctx context.Context)) *MockStore_GetUsersAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_GetUsersAll_Call) Return(_a0 []models.User, _a1 error) *MockStore_GetUsersAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUsersAll_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *MockStore_GetUsersAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetInstanceByID provides a mock function with given fields: ctx, widgetInstanceID
func (_m *MockStore) GetWidgetInstanceByID(ctx context.Context, widgetInstanceID uuid.UUID) (models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetInstanceByID")
	}

	var r0 models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstanceID)
	} else {
		r0 = ret.Get(0).(models.WidgetInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, widgetInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetWidgetInstanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetInstanceByID'
type MockStore_GetWidgetInstanceByID_Call struct {
	*mock.Call
}

// GetWidgetInstanceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstanceID uuid.UUID
func (_e *MockStore_Expecter) GetWidgetInstanceByID(ctx interface{}, widgetInstanceID interface{}) *MockStore_GetWidgetInstanceByID_Call {
	return &MockStore_GetWidgetInstanceByID_Call{Call: _e.mock.On("GetWidgetInstanceByID", ctx, widgetInstanceID)}
}

func (_c *MockStore_GetWidgetInstanceByID_Call) Run(run func(ctx context.Context, widgetInstanceID uuid.UUID)) *MockStore_GetWidgetInstanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetWidgetInstanceByID_Call) Return(_a0 models.WidgetInstance, _a1 error) *MockStore_GetWidgetInstanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetWidgetInstanceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.WidgetInstance, error)) *MockStore_GetWidgetInstanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetTemplate provides a mock function with given fields: ctx, widgetType
func (_m *MockStore) GetWidgetTemplate(ctx context.Context, widgetType string) (models.Widget, error) {
	ret := _m.Called(ctx, widgetType)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetTemplate")
	}

	var r0 models.Widget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Widget, error)); ok {
		return rf(ctx, widgetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Widget); ok {
		r0 = rf(ctx, widgetType)
	} else {
		r0 = ret.Get(0).(models.Widget)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, widgetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetWidgetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetTemplate'
type MockStore_GetWidgetTemplate_Call struct {
	*mock.Call
}

// GetWidgetTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetType string
func (_e *MockStore_Expecter) GetWidgetTemplate(ctx interface{}, widgetType interface{}) *MockStore_GetWidgetTemplate_Call {
	return &MockStore_GetWidgetTemplate_Call{Call: _e.mock.On("GetWidgetTemplate", ctx, widgetType)}
}

func (_c *MockStore_GetWidgetTemplate_Call) Run(run func(ctx context.Context, widgetType string)) *MockStore_GetWidgetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetWidgetTemplate_Call) Return(_a0 models.Widget, _a1 error) *MockStore_GetWidgetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetWidgetTemplate_Call) RunAndReturn(run func(context.Context, string) (models.Widget, error)) *MockStore_GetWidgetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectionPolicy provides a mock function with given fields: ctx, connectionId, audienceId, privilege
func (_m *MockStore) UpdateConnectionPolicy(ctx context.Context, connectionId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, connectionId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectionPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, connectionId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, connectionId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, connectionId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateConnectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectionPolicy'
type MockStore_UpdateConnectionPolicy_Call struct {
	*mock.Call
}

// UpdateConnectionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) UpdateConnectionPolicy(ctx interface{}, connectionId interface{}, audienceId interface{}, privilege interface{}) *MockStore_UpdateConnectionPolicy_Call {
	return &MockStore_UpdateConnectionPolicy_Call{Call: _e.mock.On("UpdateConnectionPolicy", ctx, connectionId, audienceId, privilege)}
}

func (_c *MockStore_UpdateConnectionPolicy_Call) Run(run func(ctx context.Context, connectionId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_UpdateConnectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_UpdateConnectionPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_UpdateConnectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateConnectionPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_UpdateConnectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockStore) UpdateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataset'
type MockStore_UpdateDataset_Call struct {
	*mock.Call
}

// UpdateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockStore_Expecter) UpdateDataset(ctx interface{}, dataset interface{}) *MockStore_UpdateDataset_Call {
	return &MockStore_UpdateDataset_Call{Call: _e.mock.On("UpdateDataset", ctx, dataset)}
}

func (_c *MockStore_UpdateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockStore_UpdateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockStore_UpdateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockStore_UpdateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockStore_UpdateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionConfig provides a mock function with given fields: ctx, actionId, config
func (_m *MockStore) UpdateDatasetActionConfig(ctx context.Context, actionId string, config map[string]interface{}) error {
	ret := _m.Called(ctx, actionId, config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, actionId, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateDatasetActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionConfig'
type MockStore_UpdateDatasetActionConfig_Call struct {
	*mock.Call
}

// UpdateDatasetActionConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - config map[string]interface{}
func (_e *MockStore_Expecter) UpdateDatasetActionConfig(ctx interface{}, actionId interface{}, config interface{}) *MockStore_UpdateDatasetActionConfig_Call {
	return &MockStore_UpdateDatasetActionConfig_Call{Call: _e.mock.On("UpdateDatasetActionConfig", ctx, actionId, config)}
}

func (_c *MockStore_UpdateDatasetActionConfig_Call) Run(run func(ctx context.Context, actionId string, config map[string]interface{})) *MockStore_UpdateDatasetActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockStore_UpdateDatasetActionConfig_Call) Return(_a0 error) *MockStore_UpdateDatasetActionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateDatasetActionConfig_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *MockStore_UpdateDatasetActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionStatus provides a mock function with given fields: ctx, actionId, status
func (_m *MockStore) UpdateDatasetActionStatus(ctx context.Context, actionId string, status string) error {
	ret := _m.Called(ctx, actionId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, actionId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateDatasetActionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionStatus'
type MockStore_UpdateDatasetActionStatus_Call struct {
	*mock.Call
}

// UpdateDatasetActionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - status string
func (_e *MockStore_Expecter) UpdateDatasetActionStatus(ctx interface{}, actionId interface{}, status interface{}) *MockStore_UpdateDatasetActionStatus_Call {
	return &MockStore_UpdateDatasetActionStatus_Call{Call: _e.mock.On("UpdateDatasetActionStatus", ctx, actionId, status)}
}

func (_c *MockStore_UpdateDatasetActionStatus_Call) Run(run func(ctx context.Context, actionId string, status string)) *MockStore_UpdateDatasetActionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_UpdateDatasetActionStatus_Call) Return(_a0 error) *MockStore_UpdateDatasetActionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateDatasetActionStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *MockStore_UpdateDatasetActionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetFileUploadStatus provides a mock function with given fields: ctx, id, fileAllignmentStatus, metadata
func (_m *MockStore) UpdateDatasetFileUploadStatus(ctx context.Context, id uuid.UUID, fileAllignmentStatus models.DatasetFileAllignmentStatus, metadata models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, id, fileAllignmentStatus, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetFileUploadStatus")
	}

	var r0 *models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error)); ok {
		return rf(ctx, id, fileAllignmentStatus, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) *models.DatasetFileUpload); ok {
		r0 = rf(ctx, id, fileAllignmentStatus, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) error); ok {
		r1 = rf(ctx, id, fileAllignmentStatus, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateDatasetFileUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetFileUploadStatus'
type MockStore_UpdateDatasetFileUploadStatus_Call struct {
	*mock.Call
}

// UpdateDatasetFileUploadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - fileAllignmentStatus models.DatasetFileAllignmentStatus
//   - metadata models.DatasetFileUploadMetadata
func (_e *MockStore_Expecter) UpdateDatasetFileUploadStatus(ctx interface{}, id interface{}, fileAllignmentStatus interface{}, metadata interface{}) *MockStore_UpdateDatasetFileUploadStatus_Call {
	return &MockStore_UpdateDatasetFileUploadStatus_Call{Call: _e.mock.On("UpdateDatasetFileUploadStatus", ctx, id, fileAllignmentStatus, metadata)}
}

func (_c *MockStore_UpdateDatasetFileUploadStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, fileAllignmentStatus models.DatasetFileAllignmentStatus, metadata models.DatasetFileUploadMetadata)) *MockStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.DatasetFileAllignmentStatus), args[3].(models.DatasetFileUploadMetadata))
	})
	return _c
}

func (_c *MockStore_UpdateDatasetFileUploadStatus_Call) Return(_a0 *models.DatasetFileUpload, _a1 error) *MockStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateDatasetFileUploadStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error)) *MockStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockStore) UpdateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetPolicy'
type MockStore_UpdateDatasetPolicy_Call struct {
	*mock.Call
}

// UpdateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) UpdateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockStore_UpdateDatasetPolicy_Call {
	return &MockStore_UpdateDatasetPolicy_Call{Call: _e.mock.On("UpdateDatasetPolicy", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockStore_UpdateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_UpdateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_UpdateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileUploadStatus provides a mock function with given fields: ctx, fileUploadId, status
func (_m *MockStore) UpdateFileUploadStatus(ctx context.Context, fileUploadId uuid.UUID, status models.FileUploadStatus) (*models.FileUpload, error) {
	ret := _m.Called(ctx, fileUploadId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileUploadStatus")
	}

	var r0 *models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.FileUploadStatus) (*models.FileUpload, error)); ok {
		return rf(ctx, fileUploadId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.FileUploadStatus) *models.FileUpload); ok {
		r0 = rf(ctx, fileUploadId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.FileUploadStatus) error); ok {
		r1 = rf(ctx, fileUploadId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateFileUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileUploadStatus'
type MockStore_UpdateFileUploadStatus_Call struct {
	*mock.Call
}

// UpdateFileUploadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
//   - status models.FileUploadStatus
func (_e *MockStore_Expecter) UpdateFileUploadStatus(ctx interface{}, fileUploadId interface{}, status interface{}) *MockStore_UpdateFileUploadStatus_Call {
	return &MockStore_UpdateFileUploadStatus_Call{Call: _e.mock.On("UpdateFileUploadStatus", ctx, fileUploadId, status)}
}

func (_c *MockStore_UpdateFileUploadStatus_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID, status models.FileUploadStatus)) *MockStore_UpdateFileUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.FileUploadStatus))
	})
	return _c
}

func (_c *MockStore_UpdateFileUploadStatus_Call) Return(_a0 *models.FileUpload, _a1 error) *MockStore_UpdateFileUploadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateFileUploadStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.FileUploadStatus) (*models.FileUpload, error)) *MockStore_UpdateFileUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockStore) UpdateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationStatus'
type MockStore_UpdateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockStore_Expecter) UpdateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockStore_UpdateOrganizationInvitationStatus_Call {
	return &MockStore_UpdateOrganizationInvitationStatus_Call{Call: _e.mock.On("UpdateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockStore_UpdateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockStore_UpdateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId, privilege
func (_m *MockStore) UpdateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationPolicy'
type MockStore_UpdateOrganizationPolicy_Call struct {
	*mock.Call
}

// UpdateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) UpdateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}, privilege interface{}) *MockStore_UpdateOrganizationPolicy_Call {
	return &MockStore_UpdateOrganizationPolicy_Call{Call: _e.mock.On("UpdateOrganizationPolicy", ctx, orgId, audienceId, privilege)}
}

func (_c *MockStore_UpdateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_UpdateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_UpdateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePagePolicy provides a mock function with given fields: ctx, pageId, audienceId, privilege
func (_m *MockStore) UpdatePagePolicy(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePagePolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdatePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePagePolicy'
type MockStore_UpdatePagePolicy_Call struct {
	*mock.Call
}

// UpdatePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockStore_Expecter) UpdatePagePolicy(ctx interface{}, pageId interface{}, audienceId interface{}, privilege interface{}) *MockStore_UpdatePagePolicy_Call {
	return &MockStore_UpdatePagePolicy_Call{Call: _e.mock.On("UpdatePagePolicy", ctx, pageId, audienceId, privilege)}
}

func (_c *MockStore_UpdatePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockStore_UpdatePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockStore_UpdatePagePolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockStore_UpdatePagePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdatePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockStore_UpdatePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaymentsConfig provides a mock function with given fields: ctx, paymentsConfigId, config
func (_m *MockStore) UpdatePaymentsConfig(ctx context.Context, paymentsConfigId uuid.UUID, config json.RawMessage) (models.PaymentsConfig, error) {
	ret := _m.Called(ctx, paymentsConfigId, config)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentsConfig")
	}

	var r0 models.PaymentsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, json.RawMessage) (models.PaymentsConfig, error)); ok {
		return rf(ctx, paymentsConfigId, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, json.RawMessage) models.PaymentsConfig); ok {
		r0 = rf(ctx, paymentsConfigId, config)
	} else {
		r0 = ret.Get(0).(models.PaymentsConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, json.RawMessage) error); ok {
		r1 = rf(ctx, paymentsConfigId, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdatePaymentsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentsConfig'
type MockStore_UpdatePaymentsConfig_Call struct {
	*mock.Call
}

// UpdatePaymentsConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentsConfigId uuid.UUID
//   - config json.RawMessage
func (_e *MockStore_Expecter) UpdatePaymentsConfig(ctx interface{}, paymentsConfigId interface{}, config interface{}) *MockStore_UpdatePaymentsConfig_Call {
	return &MockStore_UpdatePaymentsConfig_Call{Call: _e.mock.On("UpdatePaymentsConfig", ctx, paymentsConfigId, config)}
}

func (_c *MockStore_UpdatePaymentsConfig_Call) Run(run func(ctx context.Context, paymentsConfigId uuid.UUID, config json.RawMessage)) *MockStore_UpdatePaymentsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(json.RawMessage))
	})
	return _c
}

func (_c *MockStore_UpdatePaymentsConfig_Call) Return(_a0 models.PaymentsConfig, _a1 error) *MockStore_UpdatePaymentsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdatePaymentsConfig_Call) RunAndReturn(run func(context.Context, uuid.UUID, json.RawMessage) (models.PaymentsConfig, error)) *MockStore_UpdatePaymentsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaymentsConfigStatus provides a mock function with given fields: ctx, paymentsConfigId, status
func (_m *MockStore) UpdatePaymentsConfigStatus(ctx context.Context, paymentsConfigId uuid.UUID, status models.PaymentsConfigStatus) (models.PaymentsConfig, error) {
	ret := _m.Called(ctx, paymentsConfigId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentsConfigStatus")
	}

	var r0 models.PaymentsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.PaymentsConfigStatus) (models.PaymentsConfig, error)); ok {
		return rf(ctx, paymentsConfigId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.PaymentsConfigStatus) models.PaymentsConfig); ok {
		r0 = rf(ctx, paymentsConfigId, status)
	} else {
		r0 = ret.Get(0).(models.PaymentsConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.PaymentsConfigStatus) error); ok {
		r1 = rf(ctx, paymentsConfigId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdatePaymentsConfigStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentsConfigStatus'
type MockStore_UpdatePaymentsConfigStatus_Call struct {
	*mock.Call
}

// UpdatePaymentsConfigStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentsConfigId uuid.UUID
//   - status models.PaymentsConfigStatus
func (_e *MockStore_Expecter) UpdatePaymentsConfigStatus(ctx interface{}, paymentsConfigId interface{}, status interface{}) *MockStore_UpdatePaymentsConfigStatus_Call {
	return &MockStore_UpdatePaymentsConfigStatus_Call{Call: _e.mock.On("UpdatePaymentsConfigStatus", ctx, paymentsConfigId, status)}
}

func (_c *MockStore_UpdatePaymentsConfigStatus_Call) Run(run func(ctx context.Context, paymentsConfigId uuid.UUID, status models.PaymentsConfigStatus)) *MockStore_UpdatePaymentsConfigStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.PaymentsConfigStatus))
	})
	return _c
}

func (_c *MockStore_UpdatePaymentsConfigStatus_Call) Return(_a0 models.PaymentsConfig, _a1 error) *MockStore_UpdatePaymentsConfigStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdatePaymentsConfigStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.PaymentsConfigStatus) (models.PaymentsConfig, error)) *MockStore_UpdatePaymentsConfigStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePendingOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockStore) UpdatePendingOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePendingOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdatePendingOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePendingOrganizationMembershipRequest'
type MockStore_UpdatePendingOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// UpdatePendingOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockStore_Expecter) UpdatePendingOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockStore_UpdatePendingOrganizationMembershipRequest_Call {
	return &MockStore_UpdatePendingOrganizationMembershipRequest_Call{Call: _e.mock.On("UpdatePendingOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockStore_UpdatePendingOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockStore_UpdatePendingOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdatePendingOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRule provides a mock function with given fields: ctx, ruleId, params
func (_m *MockStore) UpdateRule(ctx context.Context, ruleId uuid.UUID, params models.UpdateRuleParams) error {
	ret := _m.Called(ctx, ruleId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateRuleParams) error); ok {
		r0 = rf(ctx, ruleId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRule'
type MockStore_UpdateRule_Call struct {
	*mock.Call
}

// UpdateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleId uuid.UUID
//   - params models.UpdateRuleParams
func (_e *MockStore_Expecter) UpdateRule(ctx interface{}, ruleId interface{}, params interface{}) *MockStore_UpdateRule_Call {
	return &MockStore_UpdateRule_Call{Call: _e.mock.On("UpdateRule", ctx, ruleId, params)}
}

func (_c *MockStore_UpdateRule_Call) Run(run func(ctx context.Context, ruleId uuid.UUID, params models.UpdateRuleParams)) *MockStore_UpdateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.UpdateRuleParams))
	})
	return _c
}

func (_c *MockStore_UpdateRule_Call) Return(_a0 error) *MockStore_UpdateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateRule_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.UpdateRuleParams) error) *MockStore_UpdateRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRulePriority provides a mock function with given fields: ctx, params
func (_m *MockStore) UpdateRulePriority(ctx context.Context, params models.UpdateRulePriorityParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRulePriority")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateRulePriorityParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateRulePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRulePriority'
type MockStore_UpdateRulePriority_Call struct {
	*mock.Call
}

// UpdateRulePriority is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.UpdateRulePriorityParams
func (_e *MockStore_Expecter) UpdateRulePriority(ctx interface{}, params interface{}) *MockStore_UpdateRulePriority_Call {
	return &MockStore_UpdateRulePriority_Call{Call: _e.mock.On("UpdateRulePriority", ctx, params)}
}

func (_c *MockStore_UpdateRulePriority_Call) Run(run func(ctx context.Context, params models.UpdateRulePriorityParams)) *MockStore_UpdateRulePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UpdateRulePriorityParams))
	})
	return _c
}

func (_c *MockStore_UpdateRulePriority_Call) Return(_a0 error) *MockStore_UpdateRulePriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateRulePriority_Call) RunAndReturn(run func(context.Context, models.UpdateRulePriorityParams) error) *MockStore_UpdateRulePriority_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSheet provides a mock function with given fields: ctx, sheet
func (_m *MockStore) UpdateSheet(ctx context.Context, sheet *models.Sheet) (*models.Sheet, error) {
	ret := _m.Called(ctx, sheet)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSheet")
	}

	var r0 *models.Sheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Sheet) (*models.Sheet, error)); ok {
		return rf(ctx, sheet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Sheet) *models.Sheet); ok {
		r0 = rf(ctx, sheet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Sheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Sheet) error); ok {
		r1 = rf(ctx, sheet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateSheet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSheet'
type MockStore_UpdateSheet_Call struct {
	*mock.Call
}

// UpdateSheet is a helper method to define mock.On call
//   - ctx context.Context
//   - sheet *models.Sheet
func (_e *MockStore_Expecter) UpdateSheet(ctx interface{}, sheet interface{}) *MockStore_UpdateSheet_Call {
	return &MockStore_UpdateSheet_Call{Call: _e.mock.On("UpdateSheet", ctx, sheet)}
}

func (_c *MockStore_UpdateSheet_Call) Run(run func(ctx context.Context, sheet *models.Sheet)) *MockStore_UpdateSheet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Sheet))
	})
	return _c
}

func (_c *MockStore_UpdateSheet_Call) Return(_a0 *models.Sheet, _a1 error) *MockStore_UpdateSheet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateSheet_Call) RunAndReturn(run func(context.Context, *models.Sheet) (*models.Sheet, error)) *MockStore_UpdateSheet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: ctx, organizationId, team
func (_m *MockStore) UpdateTeam(ctx context.Context, organizationId uuid.UUID, team models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, team)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) (*models.Team, error)); ok {
		return rf(ctx, organizationId, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) *models.Team); ok {
		r0 = rf(ctx, organizationId, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.Team) error); ok {
		r1 = rf(ctx, organizationId, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockStore_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - team models.Team
func (_e *MockStore_Expecter) UpdateTeam(ctx interface{}, organizationId interface{}, team interface{}) *MockStore_UpdateTeam_Call {
	return &MockStore_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx, organizationId, team)}
}

func (_c *MockStore_UpdateTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, team models.Team)) *MockStore_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.Team))
	})
	return _c
}

func (_c *MockStore_UpdateTeam_Call) Return(_a0 *models.Team, _a1 error) *MockStore_UpdateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.Team) (*models.Team, error)) *MockStore_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockStore) UpdateWidgetInstance(ctx context.Context, widgetInstance *models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWidgetInstance'
type MockStore_UpdateWidgetInstance_Call struct {
	*mock.Call
}

// UpdateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance *models.WidgetInstance
func (_e *MockStore_Expecter) UpdateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockStore_UpdateWidgetInstance_Call {
	return &MockStore_UpdateWidgetInstance_Call{Call: _e.mock.On("UpdateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockStore_UpdateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance *models.WidgetInstance)) *MockStore_UpdateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WidgetInstance))
	})
	return _c
}

func (_c *MockStore_UpdateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockStore_UpdateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateWidgetInstance_Call) RunAndReturn(run func(context.Context, *models.WidgetInstance) (*models.WidgetInstance, error)) *MockStore_UpdateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// WithDatasetTransaction provides a mock function with given fields: ctx, fn
func (_m *MockStore) WithDatasetTransaction(ctx context.Context, fn func(store.DatasetStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithDatasetTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.DatasetStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_WithDatasetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDatasetTransaction'
type MockStore_WithDatasetTransaction_Call struct {
	*mock.Call
}

// WithDatasetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.DatasetStore) error
func (_e *MockStore_Expecter) WithDatasetTransaction(ctx interface{}, fn interface{}) *MockStore_WithDatasetTransaction_Call {
	return &MockStore_WithDatasetTransaction_Call{Call: _e.mock.On("WithDatasetTransaction", ctx, fn)}
}

func (_c *MockStore_WithDatasetTransaction_Call) Run(run func(ctx context.Context, fn func(store.DatasetStore) error)) *MockStore_WithDatasetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.DatasetStore) error))
	})
	return _c
}

func (_c *MockStore_WithDatasetTransaction_Call) Return(_a0 error) *MockStore_WithDatasetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_WithDatasetTransaction_Call) RunAndReturn(run func(context.Context, func(store.DatasetStore) error) error) *MockStore_WithDatasetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithOrganizationTransaction provides a mock function with given fields: ctx, fn
func (_m *MockStore) WithOrganizationTransaction(ctx context.Context, fn func(store.OrganizationStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithOrganizationTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.OrganizationStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_WithOrganizationTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithOrganizationTransaction'
type MockStore_WithOrganizationTransaction_Call struct {
	*mock.Call
}

// WithOrganizationTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.OrganizationStore) error
func (_e *MockStore_Expecter) WithOrganizationTransaction(ctx interface{}, fn interface{}) *MockStore_WithOrganizationTransaction_Call {
	return &MockStore_WithOrganizationTransaction_Call{Call: _e.mock.On("WithOrganizationTransaction", ctx, fn)}
}

func (_c *MockStore_WithOrganizationTransaction_Call) Run(run func(ctx context.Context, fn func(store.OrganizationStore) error)) *MockStore_WithOrganizationTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.OrganizationStore) error))
	})
	return _c
}

func (_c *MockStore_WithOrganizationTransaction_Call) Return(_a0 error) *MockStore_WithOrganizationTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_WithOrganizationTransaction_Call) RunAndReturn(run func(context.Context, func(store.OrganizationStore) error) error) *MockStore_WithOrganizationTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithPageTransaction provides a mock function with given fields: ctx, fn
func (_m *MockStore) WithPageTransaction(ctx context.Context, fn func(store.PageStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithPageTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.PageStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_WithPageTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPageTransaction'
type MockStore_WithPageTransaction_Call struct {
	*mock.Call
}

// WithPageTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.PageStore) error
func (_e *MockStore_Expecter) WithPageTransaction(ctx interface{}, fn interface{}) *MockStore_WithPageTransaction_Call {
	return &MockStore_WithPageTransaction_Call{Call: _e.mock.On("WithPageTransaction", ctx, fn)}
}

func (_c *MockStore_WithPageTransaction_Call) Run(run func(ctx context.Context, fn func(store.PageStore) error)) *MockStore_WithPageTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.PageStore) error))
	})
	return _c
}

func (_c *MockStore_WithPageTransaction_Call) Return(_a0 error) *MockStore_WithPageTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_WithPageTransaction_Call) RunAndReturn(run func(context.Context, func(store.PageStore) error) error) *MockStore_WithPageTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithTeamTransaction provides a mock function with given fields: ctx, fn
func (_m *MockStore) WithTeamTransaction(ctx context.Context, fn func(store.TeamStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTeamTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.TeamStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_WithTeamTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTeamTransaction'
type MockStore_WithTeamTransaction_Call struct {
	*mock.Call
}

// WithTeamTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.TeamStore) error
func (_e *MockStore_Expecter) WithTeamTransaction(ctx interface{}, fn interface{}) *MockStore_WithTeamTransaction_Call {
	return &MockStore_WithTeamTransaction_Call{Call: _e.mock.On("WithTeamTransaction", ctx, fn)}
}

func (_c *MockStore_WithTeamTransaction_Call) Run(run func(ctx context.Context, fn func(store.TeamStore) error)) *MockStore_WithTeamTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.TeamStore) error))
	})
	return _c
}

func (_c *MockStore_WithTeamTransaction_Call) Return(_a0 error) *MockStore_WithTeamTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_WithTeamTransaction_Call) RunAndReturn(run func(context.Context, func(store.TeamStore) error) error) *MockStore_WithTeamTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *MockStore) WithTx(ctx context.Context, fn func(store.Store) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.Store) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockStore_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.Store) error
func (_e *MockStore_Expecter) WithTx(ctx interface{}, fn interface{}) *MockStore_WithTx_Call {
	return &MockStore_WithTx_Call{Call: _e.mock.On("WithTx", ctx, fn)}
}

func (_c *MockStore_WithTx_Call) Run(run func(ctx context.Context, fn func(store.Store) error)) *MockStore_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.Store) error))
	})
	return _c
}

func (_c *MockStore_WithTx_Call) Return(_a0 error) *MockStore_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_WithTx_Call) RunAndReturn(run func(context.Context, func(store.Store) error) error) *MockStore_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockdatasetPoliciesReadStore is an autogenerated mock type for the datasetPoliciesReadStore type
type MockdatasetPoliciesReadStore struct {
	mock.Mock
}

type MockdatasetPoliciesReadStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdatasetPoliciesReadStore) EXPECT() *MockdatasetPoliciesReadStore_Expecter {
	return &MockdatasetPoliciesReadStore_Expecter{mock: &_m.Mock}
}

// GetDatasetPolicies provides a mock function with given fields: ctx, datasetId
func (_m *MockdatasetPoliciesReadStore) GetDatasetPolicies(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesReadStore_GetDatasetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPolicies'
type MockdatasetPoliciesReadStore_GetDatasetPolicies_Call struct {
	*mock.Call
}

// GetDatasetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockdatasetPoliciesReadStore_Expecter) GetDatasetPolicies(ctx interface{}, datasetId interface{}) *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call {
	return &MockdatasetPoliciesReadStore_GetDatasetPolicies_Call{Call: _e.mock.On("GetDatasetPolicies", ctx, datasetId)}
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesReadStore_GetDatasetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPoliciesByEmail provides a mock function with given fields: ctx, datasetId, email
func (_m *MockdatasetPoliciesReadStore) GetDatasetPoliciesByEmail(ctx context.Context, datasetId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, datasetId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPoliciesByEmail'
type MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call struct {
	*mock.Call
}

// GetDatasetPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - email string
func (_e *MockdatasetPoliciesReadStore_Expecter) GetDatasetPoliciesByEmail(ctx interface{}, datasetId interface{}, email interface{}) *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call {
	return &MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call{Call: _e.mock.On("GetDatasetPoliciesByEmail", ctx, datasetId, email)}
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, email string)) *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockdatasetPoliciesReadStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdatasetPoliciesReadStore creates a new instance of MockdatasetPoliciesReadStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdatasetPoliciesReadStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdatasetPoliciesReadStore {
	mock := &MockdatasetPoliciesReadStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

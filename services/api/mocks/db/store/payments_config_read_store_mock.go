// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentsConfigReadStore is an autogenerated mock type for the PaymentsConfigReadStore type
type MockPaymentsConfigReadStore struct {
	mock.Mock
}

type MockPaymentsConfigReadStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentsConfigReadStore) EXPECT() *MockPaymentsConfigReadStore_Expecter {
	return &MockPaymentsConfigReadStore_Expecter{mock: &_m.Mock}
}

// GetPaymentsConfigsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockPaymentsConfigReadStore) GetPaymentsConfigsByOrganizationId(ctx context.Context, organizationId string) (models.PaymentsConfig, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsConfigsByOrganizationId")
	}

	var r0 models.PaymentsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.PaymentsConfig, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.PaymentsConfig); ok {
		r0 = rf(ctx, organizationId)
	} else {
		r0 = ret.Get(0).(models.PaymentsConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentsConfigsByOrganizationId'
type MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call struct {
	*mock.Call
}

// GetPaymentsConfigsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
func (_e *MockPaymentsConfigReadStore_Expecter) GetPaymentsConfigsByOrganizationId(ctx interface{}, organizationId interface{}) *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call {
	return &MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call{Call: _e.mock.On("GetPaymentsConfigsByOrganizationId", ctx, organizationId)}
}

func (_c *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId string)) *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call) Return(_a0 models.PaymentsConfig, _a1 error) *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call) RunAndReturn(run func(context.Context, string) (models.PaymentsConfig, error)) *MockPaymentsConfigReadStore_GetPaymentsConfigsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentsConfigReadStore creates a new instance of MockPaymentsConfigReadStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentsConfigReadStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentsConfigReadStore {
	mock := &MockPaymentsConfigReadStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

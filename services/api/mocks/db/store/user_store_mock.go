// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *MockUserStore) GetUserById(ctx context.Context, userId string) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserStore_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockUserStore_Expecter) GetUserById(ctx interface{}, userId interface{}) *MockUserStore_GetUserById_Call {
	return &MockUserStore_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *MockUserStore_GetUserById_Call) Run(run func(ctx context.Context, userId string)) *MockUserStore_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_GetUserById_Call) Return(_a0 *models.User, _a1 error) *MockUserStore_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_GetUserById_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserStore_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersAll provides a mock function with given fields: ctx
func (_m *MockUserStore) GetUsersAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUsersAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersAll'
type MockUserStore_GetUsersAll_Call struct {
	*mock.Call
}

// GetUsersAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserStore_Expecter) GetUsersAll(ctx interface{}) *MockUserStore_GetUsersAll_Call {
	return &MockUserStore_GetUsersAll_Call{Call: _e.mock.On("GetUsersAll", ctx)}
}

func (_c *MockUserStore_GetUsersAll_Call) Run(run func(ctx context.Context)) *MockUserStore_GetUsersAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserStore_GetUsersAll_Call) Return(_a0 []models.User, _a1 error) *MockUserStore_GetUsersAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_GetUsersAll_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *MockUserStore_GetUsersAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

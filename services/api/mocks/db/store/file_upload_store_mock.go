// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockFileUploadStore is an autogenerated mock type for the FileUploadStore type
type MockFileUploadStore struct {
	mock.Mock
}

type MockFileUploadStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileUploadStore) EXPECT() *MockFileUploadStore_Expecter {
	return &MockFileUploadStore_Expecter{mock: &_m.Mock}
}

// CreateFileUpload provides a mock function with given fields: ctx, fileUpload
func (_m *MockFileUploadStore) CreateFileUpload(ctx context.Context, fileUpload *models.FileUpload) (*models.FileUpload, error) {
	ret := _m.Called(ctx, fileUpload)

	if len(ret) == 0 {
		panic("no return value specified for CreateFileUpload")
	}

	var r0 *models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FileUpload) (*models.FileUpload, error)); ok {
		return rf(ctx, fileUpload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FileUpload) *models.FileUpload); ok {
		r0 = rf(ctx, fileUpload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FileUpload) error); ok {
		r1 = rf(ctx, fileUpload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileUploadStore_CreateFileUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFileUpload'
type MockFileUploadStore_CreateFileUpload_Call struct {
	*mock.Call
}

// CreateFileUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUpload *models.FileUpload
func (_e *MockFileUploadStore_Expecter) CreateFileUpload(ctx interface{}, fileUpload interface{}) *MockFileUploadStore_CreateFileUpload_Call {
	return &MockFileUploadStore_CreateFileUpload_Call{Call: _e.mock.On("CreateFileUpload", ctx, fileUpload)}
}

func (_c *MockFileUploadStore_CreateFileUpload_Call) Run(run func(ctx context.Context, fileUpload *models.FileUpload)) *MockFileUploadStore_CreateFileUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.FileUpload))
	})
	return _c
}

func (_c *MockFileUploadStore_CreateFileUpload_Call) Return(_a0 *models.FileUpload, _a1 error) *MockFileUploadStore_CreateFileUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileUploadStore_CreateFileUpload_Call) RunAndReturn(run func(context.Context, *models.FileUpload) (*models.FileUpload, error)) *MockFileUploadStore_CreateFileUpload_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFileUploads provides a mock function with given fields: ctx
func (_m *MockFileUploadStore) GetAllFileUploads(ctx context.Context) ([]*models.FileUpload, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFileUploads")
	}

	var r0 []*models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.FileUpload, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.FileUpload); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileUploadStore_GetAllFileUploads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFileUploads'
type MockFileUploadStore_GetAllFileUploads_Call struct {
	*mock.Call
}

// GetAllFileUploads is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFileUploadStore_Expecter) GetAllFileUploads(ctx interface{}) *MockFileUploadStore_GetAllFileUploads_Call {
	return &MockFileUploadStore_GetAllFileUploads_Call{Call: _e.mock.On("GetAllFileUploads", ctx)}
}

func (_c *MockFileUploadStore_GetAllFileUploads_Call) Run(run func(ctx context.Context)) *MockFileUploadStore_GetAllFileUploads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFileUploadStore_GetAllFileUploads_Call) Return(_a0 []*models.FileUpload, _a1 error) *MockFileUploadStore_GetAllFileUploads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileUploadStore_GetAllFileUploads_Call) RunAndReturn(run func(context.Context) ([]*models.FileUpload, error)) *MockFileUploadStore_GetAllFileUploads_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileUploadByIds provides a mock function with given fields: ctx, ids
func (_m *MockFileUploadStore) GetFileUploadByIds(ctx context.Context, ids []uuid.UUID) ([]models.FileUpload, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetFileUploadByIds")
	}

	var r0 []models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]models.FileUpload, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []models.FileUpload); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileUploadStore_GetFileUploadByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileUploadByIds'
type MockFileUploadStore_GetFileUploadByIds_Call struct {
	*mock.Call
}

// GetFileUploadByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockFileUploadStore_Expecter) GetFileUploadByIds(ctx interface{}, ids interface{}) *MockFileUploadStore_GetFileUploadByIds_Call {
	return &MockFileUploadStore_GetFileUploadByIds_Call{Call: _e.mock.On("GetFileUploadByIds", ctx, ids)}
}

func (_c *MockFileUploadStore_GetFileUploadByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockFileUploadStore_GetFileUploadByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockFileUploadStore_GetFileUploadByIds_Call) Return(_a0 []models.FileUpload, _a1 error) *MockFileUploadStore_GetFileUploadByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileUploadStore_GetFileUploadByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]models.FileUpload, error)) *MockFileUploadStore_GetFileUploadByIds_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileUploadStatus provides a mock function with given fields: ctx, fileUploadId, status
func (_m *MockFileUploadStore) UpdateFileUploadStatus(ctx context.Context, fileUploadId uuid.UUID, status models.FileUploadStatus) (*models.FileUpload, error) {
	ret := _m.Called(ctx, fileUploadId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileUploadStatus")
	}

	var r0 *models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.FileUploadStatus) (*models.FileUpload, error)); ok {
		return rf(ctx, fileUploadId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.FileUploadStatus) *models.FileUpload); ok {
		r0 = rf(ctx, fileUploadId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.FileUploadStatus) error); ok {
		r1 = rf(ctx, fileUploadId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileUploadStore_UpdateFileUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileUploadStatus'
type MockFileUploadStore_UpdateFileUploadStatus_Call struct {
	*mock.Call
}

// UpdateFileUploadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
//   - status models.FileUploadStatus
func (_e *MockFileUploadStore_Expecter) UpdateFileUploadStatus(ctx interface{}, fileUploadId interface{}, status interface{}) *MockFileUploadStore_UpdateFileUploadStatus_Call {
	return &MockFileUploadStore_UpdateFileUploadStatus_Call{Call: _e.mock.On("UpdateFileUploadStatus", ctx, fileUploadId, status)}
}

func (_c *MockFileUploadStore_UpdateFileUploadStatus_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID, status models.FileUploadStatus)) *MockFileUploadStore_UpdateFileUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.FileUploadStatus))
	})
	return _c
}

func (_c *MockFileUploadStore_UpdateFileUploadStatus_Call) Return(_a0 *models.FileUpload, _a1 error) *MockFileUploadStore_UpdateFileUploadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileUploadStore_UpdateFileUploadStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.FileUploadStatus) (*models.FileUpload, error)) *MockFileUploadStore_UpdateFileUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileUploadStore creates a new instance of MockFileUploadStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileUploadStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileUploadStore {
	mock := &MockFileUploadStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

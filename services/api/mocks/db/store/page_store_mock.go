// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_store

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockPageStore is an autogenerated mock type for the PageStore type
type MockPageStore struct {
	mock.Mock
}

type MockPageStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPageStore) EXPECT() *MockPageStore_Expecter {
	return &MockPageStore_Expecter{mock: &_m.Mock}
}

// CreatePage provides a mock function with given fields: ctx, name, description
func (_m *MockPageStore) CreatePage(ctx context.Context, name string, description string) (*models.Page, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreatePage")
	}

	var r0 *models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Page, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Page); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_CreatePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePage'
type MockPageStore_CreatePage_Call struct {
	*mock.Call
}

// CreatePage is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockPageStore_Expecter) CreatePage(ctx interface{}, name interface{}, description interface{}) *MockPageStore_CreatePage_Call {
	return &MockPageStore_CreatePage_Call{Call: _e.mock.On("CreatePage", ctx, name, description)}
}

func (_c *MockPageStore_CreatePage_Call) Run(run func(ctx context.Context, name string, description string)) *MockPageStore_CreatePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPageStore_CreatePage_Call) Return(_a0 *models.Page, _a1 error) *MockPageStore_CreatePage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_CreatePage_Call) RunAndReturn(run func(context.Context, string, string) (*models.Page, error)) *MockPageStore_CreatePage_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePagePolicy provides a mock function with given fields: ctx, pageId, audienceType, audienceId, privilege
func (_m *MockPageStore) CreatePagePolicy(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreatePagePolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_CreatePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePagePolicy'
type MockPageStore_CreatePagePolicy_Call struct {
	*mock.Call
}

// CreatePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockPageStore_Expecter) CreatePagePolicy(ctx interface{}, pageId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockPageStore_CreatePagePolicy_Call {
	return &MockPageStore_CreatePagePolicy_Call{Call: _e.mock.On("CreatePagePolicy", ctx, pageId, audienceType, audienceId, privilege)}
}

func (_c *MockPageStore_CreatePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockPageStore_CreatePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockPageStore_CreatePagePolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockPageStore_CreatePagePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_CreatePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockPageStore_CreatePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePagePolicy provides a mock function with given fields: ctx, pageId, audienceType, audienceId
func (_m *MockPageStore) DeletePagePolicy(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, pageId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePagePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, pageId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPageStore_DeletePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePagePolicy'
type MockPageStore_DeletePagePolicy_Call struct {
	*mock.Call
}

// DeletePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockPageStore_Expecter) DeletePagePolicy(ctx interface{}, pageId interface{}, audienceType interface{}, audienceId interface{}) *MockPageStore_DeletePagePolicy_Call {
	return &MockPageStore_DeletePagePolicy_Call{Call: _e.mock.On("DeletePagePolicy", ctx, pageId, audienceType, audienceId)}
}

func (_c *MockPageStore_DeletePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockPageStore_DeletePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockPageStore_DeletePagePolicy_Call) Return(_a0 error) *MockPageStore_DeletePagePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPageStore_DeletePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockPageStore_DeletePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageById provides a mock function with given fields: ctx, pageId
func (_m *MockPageStore) GetPageById(ctx context.Context, pageId uuid.UUID) (*models.Page, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageById")
	}

	var r0 *models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Page, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Page); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_GetPageById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageById'
type MockPageStore_GetPageById_Call struct {
	*mock.Call
}

// GetPageById is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockPageStore_Expecter) GetPageById(ctx interface{}, pageId interface{}) *MockPageStore_GetPageById_Call {
	return &MockPageStore_GetPageById_Call{Call: _e.mock.On("GetPageById", ctx, pageId)}
}

func (_c *MockPageStore_GetPageById_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockPageStore_GetPageById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPageStore_GetPageById_Call) Return(_a0 *models.Page, _a1 error) *MockPageStore_GetPageById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_GetPageById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Page, error)) *MockPageStore_GetPageById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagePoliciesByEmail provides a mock function with given fields: ctx, pageId, email
func (_m *MockPageStore) GetPagePoliciesByEmail(ctx context.Context, pageId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetPagePoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, pageId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_GetPagePoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagePoliciesByEmail'
type MockPageStore_GetPagePoliciesByEmail_Call struct {
	*mock.Call
}

// GetPagePoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - email string
func (_e *MockPageStore_Expecter) GetPagePoliciesByEmail(ctx interface{}, pageId interface{}, email interface{}) *MockPageStore_GetPagePoliciesByEmail_Call {
	return &MockPageStore_GetPagePoliciesByEmail_Call{Call: _e.mock.On("GetPagePoliciesByEmail", ctx, pageId, email)}
}

func (_c *MockPageStore_GetPagePoliciesByEmail_Call) Run(run func(ctx context.Context, pageId uuid.UUID, email string)) *MockPageStore_GetPagePoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockPageStore_GetPagePoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockPageStore_GetPagePoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_GetPagePoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockPageStore_GetPagePoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesAll provides a mock function with given fields: ctx, filters
func (_m *MockPageStore) GetPagesAll(ctx context.Context, filters models.PageFilters) ([]models.Page, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesAll")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PageFilters) ([]models.Page, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PageFilters) []models.Page); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PageFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_GetPagesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesAll'
type MockPageStore_GetPagesAll_Call struct {
	*mock.Call
}

// GetPagesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.PageFilters
func (_e *MockPageStore_Expecter) GetPagesAll(ctx interface{}, filters interface{}) *MockPageStore_GetPagesAll_Call {
	return &MockPageStore_GetPagesAll_Call{Call: _e.mock.On("GetPagesAll", ctx, filters)}
}

func (_c *MockPageStore_GetPagesAll_Call) Run(run func(ctx context.Context, filters models.PageFilters)) *MockPageStore_GetPagesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PageFilters))
	})
	return _c
}

func (_c *MockPageStore_GetPagesAll_Call) Return(_a0 []models.Page, _a1 error) *MockPageStore_GetPagesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_GetPagesAll_Call) RunAndReturn(run func(context.Context, models.PageFilters) ([]models.Page, error)) *MockPageStore_GetPagesAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockPageStore) GetPagesByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.Page, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesByOrganizationId")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Page, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Page); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_GetPagesByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesByOrganizationId'
type MockPageStore_GetPagesByOrganizationId_Call struct {
	*mock.Call
}

// GetPagesByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockPageStore_Expecter) GetPagesByOrganizationId(ctx interface{}, organizationId interface{}) *MockPageStore_GetPagesByOrganizationId_Call {
	return &MockPageStore_GetPagesByOrganizationId_Call{Call: _e.mock.On("GetPagesByOrganizationId", ctx, organizationId)}
}

func (_c *MockPageStore_GetPagesByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockPageStore_GetPagesByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPageStore_GetPagesByOrganizationId_Call) Return(_a0 []models.Page, _a1 error) *MockPageStore_GetPagesByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_GetPagesByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Page, error)) *MockPageStore_GetPagesByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesPolicies provides a mock function with given fields: ctx, pageId
func (_m *MockPageStore) GetPagesPolicies(ctx context.Context, pageId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_GetPagesPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesPolicies'
type MockPageStore_GetPagesPolicies_Call struct {
	*mock.Call
}

// GetPagesPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockPageStore_Expecter) GetPagesPolicies(ctx interface{}, pageId interface{}) *MockPageStore_GetPagesPolicies_Call {
	return &MockPageStore_GetPagesPolicies_Call{Call: _e.mock.On("GetPagesPolicies", ctx, pageId)}
}

func (_c *MockPageStore_GetPagesPolicies_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockPageStore_GetPagesPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPageStore_GetPagesPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockPageStore_GetPagesPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_GetPagesPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockPageStore_GetPagesPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePagePolicy provides a mock function with given fields: ctx, pageId, audienceId, privilege
func (_m *MockPageStore) UpdatePagePolicy(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePagePolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPageStore_UpdatePagePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePagePolicy'
type MockPageStore_UpdatePagePolicy_Call struct {
	*mock.Call
}

// UpdatePagePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockPageStore_Expecter) UpdatePagePolicy(ctx interface{}, pageId interface{}, audienceId interface{}, privilege interface{}) *MockPageStore_UpdatePagePolicy_Call {
	return &MockPageStore_UpdatePagePolicy_Call{Call: _e.mock.On("UpdatePagePolicy", ctx, pageId, audienceId, privilege)}
}

func (_c *MockPageStore_UpdatePagePolicy_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockPageStore_UpdatePagePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockPageStore_UpdatePagePolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockPageStore_UpdatePagePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPageStore_UpdatePagePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockPageStore_UpdatePagePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// WithPageTransaction provides a mock function with given fields: ctx, fn
func (_m *MockPageStore) WithPageTransaction(ctx context.Context, fn func(store.PageStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithPageTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.PageStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPageStore_WithPageTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPageTransaction'
type MockPageStore_WithPageTransaction_Call struct {
	*mock.Call
}

// WithPageTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.PageStore) error
func (_e *MockPageStore_Expecter) WithPageTransaction(ctx interface{}, fn interface{}) *MockPageStore_WithPageTransaction_Call {
	return &MockPageStore_WithPageTransaction_Call{Call: _e.mock.On("WithPageTransaction", ctx, fn)}
}

func (_c *MockPageStore_WithPageTransaction_Call) Run(run func(ctx context.Context, fn func(store.PageStore) error)) *MockPageStore_WithPageTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.PageStore) error))
	})
	return _c
}

func (_c *MockPageStore_WithPageTransaction_Call) Return(_a0 error) *MockPageStore_WithPageTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPageStore_WithPageTransaction_Call) RunAndReturn(run func(context.Context, func(store.PageStore) error) error) *MockPageStore_WithPageTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPageStore creates a new instance of MockPageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPageStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPageStore {
	mock := &MockPageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

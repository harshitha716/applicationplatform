// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_workflowutil

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockParamsBase is an autogenerated mock type for the ParamsBase type
type MockParamsBase struct {
	mock.Mock
}

type MockParamsBase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParamsBase) EXPECT() *MockParamsBase_Expecter {
	return &MockParamsBase_Expecter{mock: &_m.Mock}
}

// GetAccessControlParams provides a mock function with no fields
func (_m *MockParamsBase) GetAccessControlParams() (uuid.UUID, []uuid.UUID) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccessControlParams")
	}

	var r0 uuid.UUID
	var r1 []uuid.UUID
	if rf, ok := ret.Get(0).(func() (uuid.UUID, []uuid.UUID)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func() []uuid.UUID); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uuid.UUID)
		}
	}

	return r0, r1
}

// MockParamsBase_GetAccessControlParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessControlParams'
type MockParamsBase_GetAccessControlParams_Call struct {
	*mock.Call
}

// GetAccessControlParams is a helper method to define mock.On call
func (_e *MockParamsBase_Expecter) GetAccessControlParams() *MockParamsBase_GetAccessControlParams_Call {
	return &MockParamsBase_GetAccessControlParams_Call{Call: _e.mock.On("GetAccessControlParams")}
}

func (_c *MockParamsBase_GetAccessControlParams_Call) Run(run func()) *MockParamsBase_GetAccessControlParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParamsBase_GetAccessControlParams_Call) Return(userId uuid.UUID, orgIds []uuid.UUID) *MockParamsBase_GetAccessControlParams_Call {
	_c.Call.Return(userId, orgIds)
	return _c
}

func (_c *MockParamsBase_GetAccessControlParams_Call) RunAndReturn(run func() (uuid.UUID, []uuid.UUID)) *MockParamsBase_GetAccessControlParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParamsBase creates a new instance of MockParamsBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParamsBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParamsBase {
	mock := &MockParamsBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

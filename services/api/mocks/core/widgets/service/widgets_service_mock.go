// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_widgets

import (
	context "context"

	datasetsmodels "github.com/Zampfi/application-platform/services/api/core/datasets/models"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/core/widgets/models"

	uuid "github.com/google/uuid"
)

// MockWidgetsService is an autogenerated mock type for the WidgetsService type
type MockWidgetsService struct {
	mock.Mock
}

type MockWidgetsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWidgetsService) EXPECT() *MockWidgetsService_Expecter {
	return &MockWidgetsService_Expecter{mock: &_m.Mock}
}

// CreateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockWidgetsService) CreateWidgetInstance(ctx context.Context, widgetInstance models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for CreateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetsService_CreateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWidgetInstance'
type MockWidgetsService_CreateWidgetInstance_Call struct {
	*mock.Call
}

// CreateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance models.WidgetInstance
func (_e *MockWidgetsService_Expecter) CreateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockWidgetsService_CreateWidgetInstance_Call {
	return &MockWidgetsService_CreateWidgetInstance_Call{Call: _e.mock.On("CreateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockWidgetsService_CreateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance models.WidgetInstance)) *MockWidgetsService_CreateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.WidgetInstance))
	})
	return _c
}

func (_c *MockWidgetsService_CreateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockWidgetsService_CreateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetsService_CreateWidgetInstance_Call) RunAndReturn(run func(context.Context, models.WidgetInstance) (*models.WidgetInstance, error)) *MockWidgetsService_CreateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetInstance provides a mock function with given fields: ctx, widgetInstanceID
func (_m *MockWidgetsService) GetWidgetInstance(ctx context.Context, widgetInstanceID uuid.UUID) (models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetInstance")
	}

	var r0 models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstanceID)
	} else {
		r0 = ret.Get(0).(models.WidgetInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, widgetInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetsService_GetWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetInstance'
type MockWidgetsService_GetWidgetInstance_Call struct {
	*mock.Call
}

// GetWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstanceID uuid.UUID
func (_e *MockWidgetsService_Expecter) GetWidgetInstance(ctx interface{}, widgetInstanceID interface{}) *MockWidgetsService_GetWidgetInstance_Call {
	return &MockWidgetsService_GetWidgetInstance_Call{Call: _e.mock.On("GetWidgetInstance", ctx, widgetInstanceID)}
}

func (_c *MockWidgetsService_GetWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstanceID uuid.UUID)) *MockWidgetsService_GetWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWidgetsService_GetWidgetInstance_Call) Return(_a0 models.WidgetInstance, _a1 error) *MockWidgetsService_GetWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetsService_GetWidgetInstance_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.WidgetInstance, error)) *MockWidgetsService_GetWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidgetInstanceData provides a mock function with given fields: ctx, orgId, widgetInstanceID, params
func (_m *MockWidgetsService) GetWidgetInstanceData(ctx context.Context, orgId uuid.UUID, widgetInstanceID uuid.UUID, params models.GetWidgetInstanceDataQueryParams) ([]datasetsmodels.DatasetData, error) {
	ret := _m.Called(ctx, orgId, widgetInstanceID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetInstanceData")
	}

	var r0 []datasetsmodels.DatasetData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.GetWidgetInstanceDataQueryParams) ([]datasetsmodels.DatasetData, error)); ok {
		return rf(ctx, orgId, widgetInstanceID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.GetWidgetInstanceDataQueryParams) []datasetsmodels.DatasetData); ok {
		r0 = rf(ctx, orgId, widgetInstanceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.DatasetData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.GetWidgetInstanceDataQueryParams) error); ok {
		r1 = rf(ctx, orgId, widgetInstanceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetsService_GetWidgetInstanceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetInstanceData'
type MockWidgetsService_GetWidgetInstanceData_Call struct {
	*mock.Call
}

// GetWidgetInstanceData is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - widgetInstanceID uuid.UUID
//   - params models.GetWidgetInstanceDataQueryParams
func (_e *MockWidgetsService_Expecter) GetWidgetInstanceData(ctx interface{}, orgId interface{}, widgetInstanceID interface{}, params interface{}) *MockWidgetsService_GetWidgetInstanceData_Call {
	return &MockWidgetsService_GetWidgetInstanceData_Call{Call: _e.mock.On("GetWidgetInstanceData", ctx, orgId, widgetInstanceID, params)}
}

func (_c *MockWidgetsService_GetWidgetInstanceData_Call) Run(run func(ctx context.Context, orgId uuid.UUID, widgetInstanceID uuid.UUID, params models.GetWidgetInstanceDataQueryParams)) *MockWidgetsService_GetWidgetInstanceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.GetWidgetInstanceDataQueryParams))
	})
	return _c
}

func (_c *MockWidgetsService_GetWidgetInstanceData_Call) Return(_a0 []datasetsmodels.DatasetData, _a1 error) *MockWidgetsService_GetWidgetInstanceData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetsService_GetWidgetInstanceData_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.GetWidgetInstanceDataQueryParams) ([]datasetsmodels.DatasetData, error)) *MockWidgetsService_GetWidgetInstanceData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWidgetInstance provides a mock function with given fields: ctx, widgetInstance
func (_m *MockWidgetsService) UpdateWidgetInstance(ctx context.Context, widgetInstance models.WidgetInstance) (*models.WidgetInstance, error) {
	ret := _m.Called(ctx, widgetInstance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWidgetInstance")
	}

	var r0 *models.WidgetInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WidgetInstance) (*models.WidgetInstance, error)); ok {
		return rf(ctx, widgetInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WidgetInstance) *models.WidgetInstance); ok {
		r0 = rf(ctx, widgetInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WidgetInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WidgetInstance) error); ok {
		r1 = rf(ctx, widgetInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWidgetsService_UpdateWidgetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWidgetInstance'
type MockWidgetsService_UpdateWidgetInstance_Call struct {
	*mock.Call
}

// UpdateWidgetInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - widgetInstance models.WidgetInstance
func (_e *MockWidgetsService_Expecter) UpdateWidgetInstance(ctx interface{}, widgetInstance interface{}) *MockWidgetsService_UpdateWidgetInstance_Call {
	return &MockWidgetsService_UpdateWidgetInstance_Call{Call: _e.mock.On("UpdateWidgetInstance", ctx, widgetInstance)}
}

func (_c *MockWidgetsService_UpdateWidgetInstance_Call) Run(run func(ctx context.Context, widgetInstance models.WidgetInstance)) *MockWidgetsService_UpdateWidgetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.WidgetInstance))
	})
	return _c
}

func (_c *MockWidgetsService_UpdateWidgetInstance_Call) Return(_a0 *models.WidgetInstance, _a1 error) *MockWidgetsService_UpdateWidgetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWidgetsService_UpdateWidgetInstance_Call) RunAndReturn(run func(context.Context, models.WidgetInstance) (*models.WidgetInstance, error)) *MockWidgetsService_UpdateWidgetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWidgetsService creates a new instance of MockWidgetsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWidgetsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWidgetsService {
	mock := &MockWidgetsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

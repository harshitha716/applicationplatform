// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_widgets

import mock "github.com/stretchr/testify/mock"

// MockParameterProcessor is an autogenerated mock type for the ParameterProcessor type
type MockParameterProcessor struct {
	mock.Mock
}

type MockParameterProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParameterProcessor) EXPECT() *MockParameterProcessor_Expecter {
	return &MockParameterProcessor_Expecter{mock: &_m.Mock}
}

// CanProcess provides a mock function with given fields: paramName
func (_m *MockParameterProcessor) CanProcess(paramName string) bool {
	ret := _m.Called(paramName)

	if len(ret) == 0 {
		panic("no return value specified for CanProcess")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(paramName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockParameterProcessor_CanProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanProcess'
type MockParameterProcessor_CanProcess_Call struct {
	*mock.Call
}

// CanProcess is a helper method to define mock.On call
//   - paramName string
func (_e *MockParameterProcessor_Expecter) CanProcess(paramName interface{}) *MockParameterProcessor_CanProcess_Call {
	return &MockParameterProcessor_CanProcess_Call{Call: _e.mock.On("CanProcess", paramName)}
}

func (_c *MockParameterProcessor_CanProcess_Call) Run(run func(paramName string)) *MockParameterProcessor_CanProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockParameterProcessor_CanProcess_Call) Return(_a0 bool) *MockParameterProcessor_CanProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParameterProcessor_CanProcess_Call) RunAndReturn(run func(string) bool) *MockParameterProcessor_CanProcess_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: match, parts, populationValues
func (_m *MockParameterProcessor) Process(match string, parts []string, populationValues []string) string {
	ret := _m.Called(match, parts, populationValues)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string, []string) string); ok {
		r0 = rf(match, parts, populationValues)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockParameterProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockParameterProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - match string
//   - parts []string
//   - populationValues []string
func (_e *MockParameterProcessor_Expecter) Process(match interface{}, parts interface{}, populationValues interface{}) *MockParameterProcessor_Process_Call {
	return &MockParameterProcessor_Process_Call{Call: _e.mock.On("Process", match, parts, populationValues)}
}

func (_c *MockParameterProcessor_Process_Call) Run(run func(match string, parts []string, populationValues []string)) *MockParameterProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].([]string))
	})
	return _c
}

func (_c *MockParameterProcessor_Process_Call) Return(_a0 string) *MockParameterProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParameterProcessor_Process_Call) RunAndReturn(run func(string, []string, []string) string) *MockParameterProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParameterProcessor creates a new instance of MockParameterProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParameterProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParameterProcessor {
	mock := &MockParameterProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

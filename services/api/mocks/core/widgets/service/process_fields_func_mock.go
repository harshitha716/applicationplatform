// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_widgets

import (
	models "github.com/Zampfi/application-platform/services/api/core/datasets/models"
	mock "github.com/stretchr/testify/mock"

	widgetsmodels "github.com/Zampfi/application-platform/services/api/core/widgets/models"
)

// MockProcessFieldsFunc is an autogenerated mock type for the ProcessFieldsFunc type
type MockProcessFieldsFunc struct {
	mock.Mock
}

type MockProcessFieldsFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessFieldsFunc) EXPECT() *MockProcessFieldsFunc_Expecter {
	return &MockProcessFieldsFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockProcessFieldsFunc) Execute(_a0 *models.DatasetParams, _a1 *widgetsmodels.DataMappingFields, _a2 *models.FilterModel, _a3 *widgetsmodels.DatasetBuilderParams) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.DatasetParams, *widgetsmodels.DataMappingFields, *models.FilterModel, *widgetsmodels.DatasetBuilderParams) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProcessFieldsFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockProcessFieldsFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *models.DatasetParams
//   - _a1 *widgetsmodels.DataMappingFields
//   - _a2 *models.FilterModel
//   - _a3 *widgetsmodels.DatasetBuilderParams
func (_e *MockProcessFieldsFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockProcessFieldsFunc_Execute_Call {
	return &MockProcessFieldsFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2, _a3)}
}

func (_c *MockProcessFieldsFunc_Execute_Call) Run(run func(_a0 *models.DatasetParams, _a1 *widgetsmodels.DataMappingFields, _a2 *models.FilterModel, _a3 *widgetsmodels.DatasetBuilderParams)) *MockProcessFieldsFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.DatasetParams), args[1].(*widgetsmodels.DataMappingFields), args[2].(*models.FilterModel), args[3].(*widgetsmodels.DatasetBuilderParams))
	})
	return _c
}

func (_c *MockProcessFieldsFunc_Execute_Call) Return(_a0 error) *MockProcessFieldsFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessFieldsFunc_Execute_Call) RunAndReturn(run func(*models.DatasetParams, *widgetsmodels.DataMappingFields, *models.FilterModel, *widgetsmodels.DatasetBuilderParams) error) *MockProcessFieldsFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessFieldsFunc creates a new instance of MockProcessFieldsFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessFieldsFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessFieldsFunc {
	mock := &MockProcessFieldsFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

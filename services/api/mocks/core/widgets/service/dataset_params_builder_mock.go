// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_widgets

import (
	models "github.com/Zampfi/application-platform/services/api/core/widgets/models"
	mock "github.com/stretchr/testify/mock"
)

// MockDatasetParamsBuilder is an autogenerated mock type for the DatasetParamsBuilder type
type MockDatasetParamsBuilder struct {
	mock.Mock
}

type MockDatasetParamsBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatasetParamsBuilder) EXPECT() *MockDatasetParamsBuilder_Expecter {
	return &MockDatasetParamsBuilder_Expecter{mock: &_m.Mock}
}

// ToDatasetParams provides a mock function with given fields: instance, datasetbuilderparams
func (_m *MockDatasetParamsBuilder) ToDatasetParams(instance *models.WidgetInstance, datasetbuilderparams models.DatasetBuilderParams) (map[string]models.GetDataByDatasetIDParams, error) {
	ret := _m.Called(instance, datasetbuilderparams)

	if len(ret) == 0 {
		panic("no return value specified for ToDatasetParams")
	}

	var r0 map[string]models.GetDataByDatasetIDParams
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.WidgetInstance, models.DatasetBuilderParams) (map[string]models.GetDataByDatasetIDParams, error)); ok {
		return rf(instance, datasetbuilderparams)
	}
	if rf, ok := ret.Get(0).(func(*models.WidgetInstance, models.DatasetBuilderParams) map[string]models.GetDataByDatasetIDParams); ok {
		r0 = rf(instance, datasetbuilderparams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.GetDataByDatasetIDParams)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.WidgetInstance, models.DatasetBuilderParams) error); ok {
		r1 = rf(instance, datasetbuilderparams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetParamsBuilder_ToDatasetParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToDatasetParams'
type MockDatasetParamsBuilder_ToDatasetParams_Call struct {
	*mock.Call
}

// ToDatasetParams is a helper method to define mock.On call
//   - instance *models.WidgetInstance
//   - datasetbuilderparams models.DatasetBuilderParams
func (_e *MockDatasetParamsBuilder_Expecter) ToDatasetParams(instance interface{}, datasetbuilderparams interface{}) *MockDatasetParamsBuilder_ToDatasetParams_Call {
	return &MockDatasetParamsBuilder_ToDatasetParams_Call{Call: _e.mock.On("ToDatasetParams", instance, datasetbuilderparams)}
}

func (_c *MockDatasetParamsBuilder_ToDatasetParams_Call) Run(run func(instance *models.WidgetInstance, datasetbuilderparams models.DatasetBuilderParams)) *MockDatasetParamsBuilder_ToDatasetParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WidgetInstance), args[1].(models.DatasetBuilderParams))
	})
	return _c
}

func (_c *MockDatasetParamsBuilder_ToDatasetParams_Call) Return(_a0 map[string]models.GetDataByDatasetIDParams, _a1 error) *MockDatasetParamsBuilder_ToDatasetParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetParamsBuilder_ToDatasetParams_Call) RunAndReturn(run func(*models.WidgetInstance, models.DatasetBuilderParams) (map[string]models.GetDataByDatasetIDParams, error)) *MockDatasetParamsBuilder_ToDatasetParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatasetParamsBuilder creates a new instance of MockDatasetParamsBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatasetParamsBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatasetParamsBuilder {
	mock := &MockDatasetParamsBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

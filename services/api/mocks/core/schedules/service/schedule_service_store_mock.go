// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockScheduleServiceStore is an autogenerated mock type for the ScheduleServiceStore type
type MockScheduleServiceStore struct {
	mock.Mock
}

type MockScheduleServiceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScheduleServiceStore) EXPECT() *MockScheduleServiceStore_Expecter {
	return &MockScheduleServiceStore_Expecter{mock: &_m.Mock}
}

// CreateSchedules provides a mock function with given fields: ctx, schedules
func (_m *MockScheduleServiceStore) CreateSchedules(ctx context.Context, schedules []models.CreateScheduleParams) error {
	ret := _m.Called(ctx, schedules)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateScheduleParams) error); ok {
		r0 = rf(ctx, schedules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScheduleServiceStore_CreateSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedules'
type MockScheduleServiceStore_CreateSchedules_Call struct {
	*mock.Call
}

// CreateSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - schedules []models.CreateScheduleParams
func (_e *MockScheduleServiceStore_Expecter) CreateSchedules(ctx interface{}, schedules interface{}) *MockScheduleServiceStore_CreateSchedules_Call {
	return &MockScheduleServiceStore_CreateSchedules_Call{Call: _e.mock.On("CreateSchedules", ctx, schedules)}
}

func (_c *MockScheduleServiceStore_CreateSchedules_Call) Run(run func(ctx context.Context, schedules []models.CreateScheduleParams)) *MockScheduleServiceStore_CreateSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.CreateScheduleParams))
	})
	return _c
}

func (_c *MockScheduleServiceStore_CreateSchedules_Call) Return(_a0 error) *MockScheduleServiceStore_CreateSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScheduleServiceStore_CreateSchedules_Call) RunAndReturn(run func(context.Context, []models.CreateScheduleParams) error) *MockScheduleServiceStore_CreateSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedulesByConnectionID provides a mock function with given fields: ctx, connectionID
func (_m *MockScheduleServiceStore) GetSchedulesByConnectionID(ctx context.Context, connectionID uuid.UUID) ([]models.Schedule, error) {
	ret := _m.Called(ctx, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSchedulesByConnectionID")
	}

	var r0 []models.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Schedule, error)); ok {
		return rf(ctx, connectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Schedule); ok {
		r0 = rf(ctx, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScheduleServiceStore_GetSchedulesByConnectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedulesByConnectionID'
type MockScheduleServiceStore_GetSchedulesByConnectionID_Call struct {
	*mock.Call
}

// GetSchedulesByConnectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionID uuid.UUID
func (_e *MockScheduleServiceStore_Expecter) GetSchedulesByConnectionID(ctx interface{}, connectionID interface{}) *MockScheduleServiceStore_GetSchedulesByConnectionID_Call {
	return &MockScheduleServiceStore_GetSchedulesByConnectionID_Call{Call: _e.mock.On("GetSchedulesByConnectionID", ctx, connectionID)}
}

func (_c *MockScheduleServiceStore_GetSchedulesByConnectionID_Call) Run(run func(ctx context.Context, connectionID uuid.UUID)) *MockScheduleServiceStore_GetSchedulesByConnectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockScheduleServiceStore_GetSchedulesByConnectionID_Call) Return(_a0 []models.Schedule, _a1 error) *MockScheduleServiceStore_GetSchedulesByConnectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScheduleServiceStore_GetSchedulesByConnectionID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Schedule, error)) *MockScheduleServiceStore_GetSchedulesByConnectionID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScheduleServiceStore creates a new instance of MockScheduleServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScheduleServiceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScheduleServiceStore {
	mock := &MockScheduleServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

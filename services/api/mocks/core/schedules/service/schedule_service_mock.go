// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	temporalmodels "github.com/Zampfi/workflow-sdk-go/workflowmanagers/temporal/models"

	time "time"

	uuid "github.com/google/uuid"
)

// MockScheduleService is an autogenerated mock type for the ScheduleService type
type MockScheduleService struct {
	mock.Mock
}

type MockScheduleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScheduleService) EXPECT() *MockScheduleService_Expecter {
	return &MockScheduleService_Expecter{mock: &_m.Mock}
}

// CreateSchedules provides a mock function with given fields: ctx, params, tx
func (_m *MockScheduleService) CreateSchedules(ctx context.Context, params []models.CreateScheduleParams, tx store.ScheduleStore) error {
	ret := _m.Called(ctx, params, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateScheduleParams, store.ScheduleStore) error); ok {
		r0 = rf(ctx, params, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScheduleService_CreateSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedules'
type MockScheduleService_CreateSchedules_Call struct {
	*mock.Call
}

// CreateSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - params []models.CreateScheduleParams
//   - tx store.ScheduleStore
func (_e *MockScheduleService_Expecter) CreateSchedules(ctx interface{}, params interface{}, tx interface{}) *MockScheduleService_CreateSchedules_Call {
	return &MockScheduleService_CreateSchedules_Call{Call: _e.mock.On("CreateSchedules", ctx, params, tx)}
}

func (_c *MockScheduleService_CreateSchedules_Call) Run(run func(ctx context.Context, params []models.CreateScheduleParams, tx store.ScheduleStore)) *MockScheduleService_CreateSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.CreateScheduleParams), args[2].(store.ScheduleStore))
	})
	return _c
}

func (_c *MockScheduleService_CreateSchedules_Call) Return(_a0 error) *MockScheduleService_CreateSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScheduleService_CreateSchedules_Call) RunAndReturn(run func(context.Context, []models.CreateScheduleParams, store.ScheduleStore) error) *MockScheduleService_CreateSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSchedulesInTemporal provides a mock function with given fields: ctx, schedules
func (_m *MockScheduleService) CreateSchedulesInTemporal(ctx context.Context, schedules []temporalmodels.ExecuteWorkflowWithScheduleParams) error {
	ret := _m.Called(ctx, schedules)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedulesInTemporal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []temporalmodels.ExecuteWorkflowWithScheduleParams) error); ok {
		r0 = rf(ctx, schedules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScheduleService_CreateSchedulesInTemporal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedulesInTemporal'
type MockScheduleService_CreateSchedulesInTemporal_Call struct {
	*mock.Call
}

// CreateSchedulesInTemporal is a helper method to define mock.On call
//   - ctx context.Context
//   - schedules []temporalmodels.ExecuteWorkflowWithScheduleParams
func (_e *MockScheduleService_Expecter) CreateSchedulesInTemporal(ctx interface{}, schedules interface{}) *MockScheduleService_CreateSchedulesInTemporal_Call {
	return &MockScheduleService_CreateSchedulesInTemporal_Call{Call: _e.mock.On("CreateSchedulesInTemporal", ctx, schedules)}
}

func (_c *MockScheduleService_CreateSchedulesInTemporal_Call) Run(run func(ctx context.Context, schedules []temporalmodels.ExecuteWorkflowWithScheduleParams)) *MockScheduleService_CreateSchedulesInTemporal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]temporalmodels.ExecuteWorkflowWithScheduleParams))
	})
	return _c
}

func (_c *MockScheduleService_CreateSchedulesInTemporal_Call) Return(_a0 error) *MockScheduleService_CreateSchedulesInTemporal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScheduleService_CreateSchedulesInTemporal_Call) RunAndReturn(run func(context.Context, []temporalmodels.ExecuteWorkflowWithScheduleParams) error) *MockScheduleService_CreateSchedulesInTemporal_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSyncedAt provides a mock function with given fields: ctx, connectionId
func (_m *MockScheduleService) GetLastSyncedAt(ctx context.Context, connectionId uuid.UUID) (time.Time, error) {
	ret := _m.Called(ctx, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastSyncedAt")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (time.Time, error)); ok {
		return rf(ctx, connectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) time.Time); ok {
		r0 = rf(ctx, connectionId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScheduleService_GetLastSyncedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSyncedAt'
type MockScheduleService_GetLastSyncedAt_Call struct {
	*mock.Call
}

// GetLastSyncedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
func (_e *MockScheduleService_Expecter) GetLastSyncedAt(ctx interface{}, connectionId interface{}) *MockScheduleService_GetLastSyncedAt_Call {
	return &MockScheduleService_GetLastSyncedAt_Call{Call: _e.mock.On("GetLastSyncedAt", ctx, connectionId)}
}

func (_c *MockScheduleService_GetLastSyncedAt_Call) Run(run func(ctx context.Context, connectionId uuid.UUID)) *MockScheduleService_GetLastSyncedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockScheduleService_GetLastSyncedAt_Call) Return(_a0 time.Time, _a1 error) *MockScheduleService_GetLastSyncedAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScheduleService_GetLastSyncedAt_Call) RunAndReturn(run func(context.Context, uuid.UUID) (time.Time, error)) *MockScheduleService_GetLastSyncedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleDetailsFromTemporal provides a mock function with given fields: ctx, scheduleId
func (_m *MockScheduleService) GetScheduleDetailsFromTemporal(ctx context.Context, scheduleId uuid.UUID) (temporalmodels.QueryScheduleResponse, error) {
	ret := _m.Called(ctx, scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleDetailsFromTemporal")
	}

	var r0 temporalmodels.QueryScheduleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (temporalmodels.QueryScheduleResponse, error)); ok {
		return rf(ctx, scheduleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) temporalmodels.QueryScheduleResponse); ok {
		r0 = rf(ctx, scheduleId)
	} else {
		r0 = ret.Get(0).(temporalmodels.QueryScheduleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScheduleService_GetScheduleDetailsFromTemporal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleDetailsFromTemporal'
type MockScheduleService_GetScheduleDetailsFromTemporal_Call struct {
	*mock.Call
}

// GetScheduleDetailsFromTemporal is a helper method to define mock.On call
//   - ctx context.Context
//   - scheduleId uuid.UUID
func (_e *MockScheduleService_Expecter) GetScheduleDetailsFromTemporal(ctx interface{}, scheduleId interface{}) *MockScheduleService_GetScheduleDetailsFromTemporal_Call {
	return &MockScheduleService_GetScheduleDetailsFromTemporal_Call{Call: _e.mock.On("GetScheduleDetailsFromTemporal", ctx, scheduleId)}
}

func (_c *MockScheduleService_GetScheduleDetailsFromTemporal_Call) Run(run func(ctx context.Context, scheduleId uuid.UUID)) *MockScheduleService_GetScheduleDetailsFromTemporal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockScheduleService_GetScheduleDetailsFromTemporal_Call) Return(_a0 temporalmodels.QueryScheduleResponse, _a1 error) *MockScheduleService_GetScheduleDetailsFromTemporal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScheduleService_GetScheduleDetailsFromTemporal_Call) RunAndReturn(run func(context.Context, uuid.UUID) (temporalmodels.QueryScheduleResponse, error)) *MockScheduleService_GetScheduleDetailsFromTemporal_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedules provides a mock function with given fields: ctx, connectionId
func (_m *MockScheduleService) GetSchedules(ctx context.Context, connectionId uuid.UUID) ([]models.Schedule, error) {
	ret := _m.Called(ctx, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSchedules")
	}

	var r0 []models.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Schedule, error)); ok {
		return rf(ctx, connectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Schedule); ok {
		r0 = rf(ctx, connectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScheduleService_GetSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedules'
type MockScheduleService_GetSchedules_Call struct {
	*mock.Call
}

// GetSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
func (_e *MockScheduleService_Expecter) GetSchedules(ctx interface{}, connectionId interface{}) *MockScheduleService_GetSchedules_Call {
	return &MockScheduleService_GetSchedules_Call{Call: _e.mock.On("GetSchedules", ctx, connectionId)}
}

func (_c *MockScheduleService_GetSchedules_Call) Run(run func(ctx context.Context, connectionId uuid.UUID)) *MockScheduleService_GetSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockScheduleService_GetSchedules_Call) Return(_a0 []models.Schedule, _a1 error) *MockScheduleService_GetSchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScheduleService_GetSchedules_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Schedule, error)) *MockScheduleService_GetSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScheduleService creates a new instance of MockScheduleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScheduleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScheduleService {
	mock := &MockScheduleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_auth

import (
	context "context"

	client "github.com/ory/kratos-client-go"

	http "net/http"

	httputil "net/http/httputil"

	kratosclient "github.com/Zampfi/application-platform/services/api/pkg/kratosclient"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	url "net/url"

	uuid "github.com/google/uuid"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// GetAuthFlowForUser provides a mock function with given fields: ctx, email
func (_m *MockAuthService) GetAuthFlowForUser(ctx context.Context, email string) (*client.LoginFlow, *http.Response, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthFlowForUser")
	}

	var r0 *client.LoginFlow
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.LoginFlow, *http.Response, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.LoginFlow); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LoginFlow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_GetAuthFlowForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthFlowForUser'
type MockAuthService_GetAuthFlowForUser_Call struct {
	*mock.Call
}

// GetAuthFlowForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockAuthService_Expecter) GetAuthFlowForUser(ctx interface{}, email interface{}) *MockAuthService_GetAuthFlowForUser_Call {
	return &MockAuthService_GetAuthFlowForUser_Call{Call: _e.mock.On("GetAuthFlowForUser", ctx, email)}
}

func (_c *MockAuthService_GetAuthFlowForUser_Call) Run(run func(ctx context.Context, email string)) *MockAuthService_GetAuthFlowForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_GetAuthFlowForUser_Call) Return(_a0 *client.LoginFlow, _a1 *http.Response, _a2 error) *MockAuthService_GetAuthFlowForUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthService_GetAuthFlowForUser_Call) RunAndReturn(run func(context.Context, string) (*client.LoginFlow, *http.Response, error)) *MockAuthService_GetAuthFlowForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUserInfo provides a mock function with given fields: ctx
func (_m *MockAuthService) GetCurrentUserInfo(ctx context.Context) (*models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserInfo")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetCurrentUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUserInfo'
type MockAuthService_GetCurrentUserInfo_Call struct {
	*mock.Call
}

// GetCurrentUserInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthService_Expecter) GetCurrentUserInfo(ctx interface{}) *MockAuthService_GetCurrentUserInfo_Call {
	return &MockAuthService_GetCurrentUserInfo_Call{Call: _e.mock.On("GetCurrentUserInfo", ctx)}
}

func (_c *MockAuthService_GetCurrentUserInfo_Call) Run(run func(ctx context.Context)) *MockAuthService_GetCurrentUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthService_GetCurrentUserInfo_Call) Return(_a0 *models.User, _a1 error) *MockAuthService_GetCurrentUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetCurrentUserInfo_Call) RunAndReturn(run func(context.Context) (*models.User, error)) *MockAuthService_GetCurrentUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetKratosProxy provides a mock function with no fields
func (_m *MockAuthService) GetKratosProxy() (*httputil.ReverseProxy, url.URL) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKratosProxy")
	}

	var r0 *httputil.ReverseProxy
	var r1 url.URL
	if rf, ok := ret.Get(0).(func() (*httputil.ReverseProxy, url.URL)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *httputil.ReverseProxy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputil.ReverseProxy)
		}
	}

	if rf, ok := ret.Get(1).(func() url.URL); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(url.URL)
	}

	return r0, r1
}

// MockAuthService_GetKratosProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKratosProxy'
type MockAuthService_GetKratosProxy_Call struct {
	*mock.Call
}

// GetKratosProxy is a helper method to define mock.On call
func (_e *MockAuthService_Expecter) GetKratosProxy() *MockAuthService_GetKratosProxy_Call {
	return &MockAuthService_GetKratosProxy_Call{Call: _e.mock.On("GetKratosProxy")}
}

func (_c *MockAuthService_GetKratosProxy_Call) Run(run func()) *MockAuthService_GetKratosProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthService_GetKratosProxy_Call) Return(_a0 *httputil.ReverseProxy, _a1 url.URL) *MockAuthService_GetKratosProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetKratosProxy_Call) RunAndReturn(run func() (*httputil.ReverseProxy, url.URL)) *MockAuthService_GetKratosProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrganizations provides a mock function with given fields: ctx, userId
func (_m *MockAuthService) GetUserOrganizations(ctx context.Context, userId uuid.UUID) ([]models.Organization, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrganizations")
	}

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Organization, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Organization); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetUserOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrganizations'
type MockAuthService_GetUserOrganizations_Call struct {
	*mock.Call
}

// GetUserOrganizations is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockAuthService_Expecter) GetUserOrganizations(ctx interface{}, userId interface{}) *MockAuthService_GetUserOrganizations_Call {
	return &MockAuthService_GetUserOrganizations_Call{Call: _e.mock.On("GetUserOrganizations", ctx, userId)}
}

func (_c *MockAuthService_GetUserOrganizations_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockAuthService_GetUserOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthService_GetUserOrganizations_Call) Return(_a0 []models.Organization, _a1 error) *MockAuthService_GetUserOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetUserOrganizations_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Organization, error)) *MockAuthService_GetUserOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNewUserCreated provides a mock function with given fields: ctx, adminSecret, userId
func (_m *MockAuthService) HandleNewUserCreated(ctx context.Context, adminSecret string, userId uuid.UUID) error {
	ret := _m.Called(ctx, adminSecret, userId)

	if len(ret) == 0 {
		panic("no return value specified for HandleNewUserCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, adminSecret, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_HandleNewUserCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNewUserCreated'
type MockAuthService_HandleNewUserCreated_Call struct {
	*mock.Call
}

// HandleNewUserCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - adminSecret string
//   - userId uuid.UUID
func (_e *MockAuthService_Expecter) HandleNewUserCreated(ctx interface{}, adminSecret interface{}, userId interface{}) *MockAuthService_HandleNewUserCreated_Call {
	return &MockAuthService_HandleNewUserCreated_Call{Call: _e.mock.On("HandleNewUserCreated", ctx, adminSecret, userId)}
}

func (_c *MockAuthService_HandleNewUserCreated_Call) Run(run func(ctx context.Context, adminSecret string, userId uuid.UUID)) *MockAuthService_HandleNewUserCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthService_HandleNewUserCreated_Call) Return(_a0 error) *MockAuthService_HandleNewUserCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_HandleNewUserCreated_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) error) *MockAuthService_HandleNewUserCreated_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserExposedKratosPath provides a mock function with given fields: path
func (_m *MockAuthService) IsUserExposedKratosPath(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsUserExposedKratosPath")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuthService_IsUserExposedKratosPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserExposedKratosPath'
type MockAuthService_IsUserExposedKratosPath_Call struct {
	*mock.Call
}

// IsUserExposedKratosPath is a helper method to define mock.On call
//   - path string
func (_e *MockAuthService_Expecter) IsUserExposedKratosPath(path interface{}) *MockAuthService_IsUserExposedKratosPath_Call {
	return &MockAuthService_IsUserExposedKratosPath_Call{Call: _e.mock.On("IsUserExposedKratosPath", path)}
}

func (_c *MockAuthService_IsUserExposedKratosPath_Call) Run(run func(path string)) *MockAuthService_IsUserExposedKratosPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_IsUserExposedKratosPath_Call) Return(_a0 bool) *MockAuthService_IsUserExposedKratosPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_IsUserExposedKratosPath_Call) RunAndReturn(run func(string) bool) *MockAuthService_IsUserExposedKratosPath_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveAdminInfo provides a mock function with given fields: ctx, header
func (_m *MockAuthService) ResolveAdminInfo(ctx context.Context, header http.Header) (string, uuid.UUID, []uuid.UUID) {
	ret := _m.Called(ctx, header)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAdminInfo")
	}

	var r0 string
	var r1 uuid.UUID
	var r2 []uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, http.Header) (string, uuid.UUID, []uuid.UUID)); ok {
		return rf(ctx, header)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.Header) string); ok {
		r0 = rf(ctx, header)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.Header) uuid.UUID); ok {
		r1 = rf(ctx, header)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, http.Header) []uuid.UUID); ok {
		r2 = rf(ctx, header)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]uuid.UUID)
		}
	}

	return r0, r1, r2
}

// MockAuthService_ResolveAdminInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveAdminInfo'
type MockAuthService_ResolveAdminInfo_Call struct {
	*mock.Call
}

// ResolveAdminInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - header http.Header
func (_e *MockAuthService_Expecter) ResolveAdminInfo(ctx interface{}, header interface{}) *MockAuthService_ResolveAdminInfo_Call {
	return &MockAuthService_ResolveAdminInfo_Call{Call: _e.mock.On("ResolveAdminInfo", ctx, header)}
}

func (_c *MockAuthService_ResolveAdminInfo_Call) Run(run func(ctx context.Context, header http.Header)) *MockAuthService_ResolveAdminInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.Header))
	})
	return _c
}

func (_c *MockAuthService_ResolveAdminInfo_Call) Return(role string, emulatedUserId uuid.UUID, emulatedOrganizationIdss []uuid.UUID) *MockAuthService_ResolveAdminInfo_Call {
	_c.Call.Return(role, emulatedUserId, emulatedOrganizationIdss)
	return _c
}

func (_c *MockAuthService_ResolveAdminInfo_Call) RunAndReturn(run func(context.Context, http.Header) (string, uuid.UUID, []uuid.UUID)) *MockAuthService_ResolveAdminInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveSessionCookie provides a mock function with given fields: ctx, cookie
func (_m *MockAuthService) ResolveSessionCookie(ctx context.Context, cookie string) (*client.Session, *http.Response, *kratosclient.Error) {
	ret := _m.Called(ctx, cookie)

	if len(ret) == 0 {
		panic("no return value specified for ResolveSessionCookie")
	}

	var r0 *client.Session
	var r1 *http.Response
	var r2 *kratosclient.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.Session, *http.Response, *kratosclient.Error)); ok {
		return rf(ctx, cookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Session); ok {
		r0 = rf(ctx, cookie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, cookie)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) *kratosclient.Error); ok {
		r2 = rf(ctx, cookie)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*kratosclient.Error)
		}
	}

	return r0, r1, r2
}

// MockAuthService_ResolveSessionCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveSessionCookie'
type MockAuthService_ResolveSessionCookie_Call struct {
	*mock.Call
}

// ResolveSessionCookie is a helper method to define mock.On call
//   - ctx context.Context
//   - cookie string
func (_e *MockAuthService_Expecter) ResolveSessionCookie(ctx interface{}, cookie interface{}) *MockAuthService_ResolveSessionCookie_Call {
	return &MockAuthService_ResolveSessionCookie_Call{Call: _e.mock.On("ResolveSessionCookie", ctx, cookie)}
}

func (_c *MockAuthService_ResolveSessionCookie_Call) Run(run func(ctx context.Context, cookie string)) *MockAuthService_ResolveSessionCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_ResolveSessionCookie_Call) Return(_a0 *client.Session, _a1 *http.Response, _a2 *kratosclient.Error) *MockAuthService_ResolveSessionCookie_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthService_ResolveSessionCookie_Call) RunAndReturn(run func(context.Context, string) (*client.Session, *http.Response, *kratosclient.Error)) *MockAuthService_ResolveSessionCookie_Call {
	_c.Call.Return(run)
	return _c
}

// SignupUserAsAdmin provides a mock function with given fields: ctx, email, password
func (_m *MockAuthService) SignupUserAsAdmin(ctx context.Context, email string, password string) (*models.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SignupUserAsAdmin")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_SignupUserAsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignupUserAsAdmin'
type MockAuthService_SignupUserAsAdmin_Call struct {
	*mock.Call
}

// SignupUserAsAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockAuthService_Expecter) SignupUserAsAdmin(ctx interface{}, email interface{}, password interface{}) *MockAuthService_SignupUserAsAdmin_Call {
	return &MockAuthService_SignupUserAsAdmin_Call{Call: _e.mock.On("SignupUserAsAdmin", ctx, email, password)}
}

func (_c *MockAuthService_SignupUserAsAdmin_Call) Run(run func(ctx context.Context, email string, password string)) *MockAuthService_SignupUserAsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthService_SignupUserAsAdmin_Call) Return(_a0 *models.User, _a1 error) *MockAuthService_SignupUserAsAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_SignupUserAsAdmin_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *MockAuthService_SignupUserAsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

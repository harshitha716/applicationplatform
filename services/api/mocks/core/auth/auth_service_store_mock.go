// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_auth

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockAuthServiceStore is an autogenerated mock type for the AuthServiceStore type
type MockAuthServiceStore struct {
	mock.Mock
}

type MockAuthServiceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceStore) EXPECT() *MockAuthServiceStore_Expecter {
	return &MockAuthServiceStore_Expecter{mock: &_m.Mock}
}

// CreateOrganization provides a mock function with given fields: ctx, name, description, ownerId
func (_m *MockAuthServiceStore) CreateOrganization(ctx context.Context, name string, description *string, ownerId uuid.UUID) (*models.Organization, error) {
	ret := _m.Called(ctx, name, description, ownerId)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)); ok {
		return rf(ctx, name, description, ownerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, uuid.UUID) *models.Organization); ok {
		r0 = rf(ctx, name, description, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, uuid.UUID) error); ok {
		r1 = rf(ctx, name, description, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockAuthServiceStore_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description *string
//   - ownerId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) CreateOrganization(ctx interface{}, name interface{}, description interface{}, ownerId interface{}) *MockAuthServiceStore_CreateOrganization_Call {
	return &MockAuthServiceStore_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, name, description, ownerId)}
}

func (_c *MockAuthServiceStore_CreateOrganization_Call) Run(run func(ctx context.Context, name string, description *string, ownerId uuid.UUID)) *MockAuthServiceStore_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganization_Call) Return(_a0 *models.Organization, _a1 error) *MockAuthServiceStore_CreateOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganization_Call) RunAndReturn(run func(context.Context, string, *string, uuid.UUID) (*models.Organization, error)) *MockAuthServiceStore_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitation provides a mock function with given fields: ctx, organizationId, targetEmail, privilege
func (_m *MockAuthServiceStore) CreateOrganizationInvitation(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege) (*models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationId, targetEmail, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitation")
	}

	var r0 *models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationId, targetEmail, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) *models.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, organizationId, targetEmail, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitation'
type MockAuthServiceStore_CreateOrganizationInvitation_Call struct {
	*mock.Call
}

// CreateOrganizationInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - targetEmail string
//   - privilege models.ResourcePrivilege
func (_e *MockAuthServiceStore_Expecter) CreateOrganizationInvitation(ctx interface{}, organizationId interface{}, targetEmail interface{}, privilege interface{}) *MockAuthServiceStore_CreateOrganizationInvitation_Call {
	return &MockAuthServiceStore_CreateOrganizationInvitation_Call{Call: _e.mock.On("CreateOrganizationInvitation", ctx, organizationId, targetEmail, privilege)}
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitation_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, targetEmail string, privilege models.ResourcePrivilege)) *MockAuthServiceStore_CreateOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitation_Call) Return(_a0 *models.OrganizationInvitation, _a1 error) *MockAuthServiceStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitation_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.ResourcePrivilege) (*models.OrganizationInvitation, error)) *MockAuthServiceStore_CreateOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockAuthServiceStore) CreateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationInvitationStatus'
type MockAuthServiceStore_CreateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// CreateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockAuthServiceStore_Expecter) CreateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call {
	return &MockAuthServiceStore_CreateOrganizationInvitationStatus_Call{Call: _e.mock.On("CreateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockAuthServiceStore_CreateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockAuthServiceStore) CreateOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationMembershipRequest'
type MockAuthServiceStore_CreateOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// CreateOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockAuthServiceStore_Expecter) CreateOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call {
	return &MockAuthServiceStore_CreateOrganizationMembershipRequest_Call{Call: _e.mock.On("CreateOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockAuthServiceStore_CreateOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceType, audienceId, privilege
func (_m *MockAuthServiceStore) CreateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationPolicy'
type MockAuthServiceStore_CreateOrganizationPolicy_Call struct {
	*mock.Call
}

// CreateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockAuthServiceStore_Expecter) CreateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockAuthServiceStore_CreateOrganizationPolicy_Call {
	return &MockAuthServiceStore_CreateOrganizationPolicy_Call{Call: _e.mock.On("CreateOrganizationPolicy", ctx, orgId, audienceType, audienceId, privilege)}
}

func (_c *MockAuthServiceStore_CreateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockAuthServiceStore_CreateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockAuthServiceStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockAuthServiceStore_CreateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSSOConfig provides a mock function with given fields: ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain
func (_m *MockAuthServiceStore) CreateSSOConfig(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)

	if len(ret) == 0 {
		panic("no return value specified for CreateSSOConfig")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, json.RawMessage, string) error); ok {
		r1 = rf(ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_CreateSSOConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSSOConfig'
type MockAuthServiceStore_CreateSSOConfig_Call struct {
	*mock.Call
}

// CreateSSOConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - ssoProviderID string
//   - ssoProviderName string
//   - ssoConfig json.RawMessage
//   - emailDomain string
func (_e *MockAuthServiceStore_Expecter) CreateSSOConfig(ctx interface{}, organizationId interface{}, ssoProviderID interface{}, ssoProviderName interface{}, ssoConfig interface{}, emailDomain interface{}) *MockAuthServiceStore_CreateSSOConfig_Call {
	return &MockAuthServiceStore_CreateSSOConfig_Call{Call: _e.mock.On("CreateSSOConfig", ctx, organizationId, ssoProviderID, ssoProviderName, ssoConfig, emailDomain)}
}

func (_c *MockAuthServiceStore_CreateSSOConfig_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, ssoProviderID string, ssoProviderName string, ssoConfig json.RawMessage, emailDomain string)) *MockAuthServiceStore_CreateSSOConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(json.RawMessage), args[5].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_CreateSSOConfig_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockAuthServiceStore_CreateSSOConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_CreateSSOConfig_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, json.RawMessage, string) (*models.OrganizationSSOConfig, error)) *MockAuthServiceStore_CreateSSOConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId
func (_m *MockAuthServiceStore) DeleteOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, orgId, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgId, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthServiceStore_DeleteOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationPolicy'
type MockAuthServiceStore_DeleteOrganizationPolicy_Call struct {
	*mock.Call
}

// DeleteOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) DeleteOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}) *MockAuthServiceStore_DeleteOrganizationPolicy_Call {
	return &MockAuthServiceStore_DeleteOrganizationPolicy_Call{Call: _e.mock.On("DeleteOrganizationPolicy", ctx, orgId, audienceId)}
}

func (_c *MockAuthServiceStore_DeleteOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID)) *MockAuthServiceStore_DeleteOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_DeleteOrganizationPolicy_Call) Return(_a0 error) *MockAuthServiceStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthServiceStore_DeleteOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockAuthServiceStore_DeleteOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationById provides a mock function with given fields: ctx, organizationId
func (_m *MockAuthServiceStore) GetOrganizationById(ctx context.Context, organizationId string) (*models.Organization, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationById")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Organization, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Organization); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationById'
type MockAuthServiceStore_GetOrganizationById_Call struct {
	*mock.Call
}

// GetOrganizationById is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
func (_e *MockAuthServiceStore_Expecter) GetOrganizationById(ctx interface{}, organizationId interface{}) *MockAuthServiceStore_GetOrganizationById_Call {
	return &MockAuthServiceStore_GetOrganizationById_Call{Call: _e.mock.On("GetOrganizationById", ctx, organizationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationById_Call) Run(run func(ctx context.Context, organizationId string)) *MockAuthServiceStore_GetOrganizationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationById_Call) Return(_a0 *models.Organization, _a1 error) *MockAuthServiceStore_GetOrganizationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationById_Call) RunAndReturn(run func(context.Context, string) (*models.Organization, error)) *MockAuthServiceStore_GetOrganizationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationById provides a mock function with given fields: ctx, invitationId
func (_m *MockAuthServiceStore) GetOrganizationInvitationById(ctx context.Context, invitationId uuid.UUID) (*models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationById")
	}

	var r0 *models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.OrganizationInvitation, error)); ok {
		return rf(ctx, invitationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.OrganizationInvitation); ok {
		r0 = rf(ctx, invitationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, invitationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationInvitationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationById'
type MockAuthServiceStore_GetOrganizationInvitationById_Call struct {
	*mock.Call
}

// GetOrganizationInvitationById is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationInvitationById(ctx interface{}, invitationId interface{}) *MockAuthServiceStore_GetOrganizationInvitationById_Call {
	return &MockAuthServiceStore_GetOrganizationInvitationById_Call{Call: _e.mock.On("GetOrganizationInvitationById", ctx, invitationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationById_Call) Run(run func(ctx context.Context, invitationId uuid.UUID)) *MockAuthServiceStore_GetOrganizationInvitationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationById_Call) Return(_a0 *models.OrganizationInvitation, _a1 error) *MockAuthServiceStore_GetOrganizationInvitationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.OrganizationInvitation, error)) *MockAuthServiceStore_GetOrganizationInvitationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsAll provides a mock function with given fields: ctx
func (_m *MockAuthServiceStore) GetOrganizationInvitationsAll(ctx context.Context) ([]models.OrganizationInvitation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsAll")
	}

	var r0 []models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.OrganizationInvitation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.OrganizationInvitation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationInvitationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsAll'
type MockAuthServiceStore_GetOrganizationInvitationsAll_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthServiceStore_Expecter) GetOrganizationInvitationsAll(ctx interface{}) *MockAuthServiceStore_GetOrganizationInvitationsAll_Call {
	return &MockAuthServiceStore_GetOrganizationInvitationsAll_Call{Call: _e.mock.On("GetOrganizationInvitationsAll", ctx)}
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAll_Call) Run(run func(ctx context.Context)) *MockAuthServiceStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAll_Call) Return(_a0 []models.OrganizationInvitation, _a1 error) *MockAuthServiceStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAll_Call) RunAndReturn(run func(context.Context) ([]models.OrganizationInvitation, error)) *MockAuthServiceStore_GetOrganizationInvitationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsAndMembershipRequests provides a mock function with given fields: ctx, organizationId
func (_m *MockAuthServiceStore) GetOrganizationInvitationsAndMembershipRequests(ctx context.Context, organizationId uuid.UUID) (*models.Organization, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsAndMembershipRequests")
	}

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Organization, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Organization); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsAndMembershipRequests'
type MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsAndMembershipRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationInvitationsAndMembershipRequests(ctx interface{}, organizationId interface{}) *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	return &MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call{Call: _e.mock.On("GetOrganizationInvitationsAndMembershipRequests", ctx, organizationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call) Return(_a0 *models.Organization, _a1 error) *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Organization, error)) *MockAuthServiceStore_GetOrganizationInvitationsAndMembershipRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInvitationsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockAuthServiceStore) GetOrganizationInvitationsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationInvitationsByOrganizationId")
	}

	var r0 []models.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInvitationsByOrganizationId'
type MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationInvitationsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationInvitationsByOrganizationId(ctx interface{}, organizationId interface{}) *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call {
	return &MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationInvitationsByOrganizationId", ctx, organizationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call) Return(_a0 []models.OrganizationInvitation, _a1 error) *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationInvitation, error)) *MockAuthServiceStore_GetOrganizationInvitationsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationMembershipRequestsAll provides a mock function with given fields: ctx
func (_m *MockAuthServiceStore) GetOrganizationMembershipRequestsAll(ctx context.Context) ([]models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationMembershipRequestsAll")
	}

	var r0 []models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationMembershipRequestsAll'
type MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call struct {
	*mock.Call
}

// GetOrganizationMembershipRequestsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthServiceStore_Expecter) GetOrganizationMembershipRequestsAll(ctx interface{}) *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call {
	return &MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call{Call: _e.mock.On("GetOrganizationMembershipRequestsAll", ctx)}
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call) Run(run func(ctx context.Context)) *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call) Return(_a0 []models.OrganizationMembershipRequest, _a1 error) *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call) RunAndReturn(run func(context.Context) ([]models.OrganizationMembershipRequest, error)) *MockAuthServiceStore_GetOrganizationMembershipRequestsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationMembershipRequestsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockAuthServiceStore) GetOrganizationMembershipRequestsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationMembershipRequestsByOrganizationId")
	}

	var r0 []models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationMembershipRequestsByOrganizationId'
type MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationMembershipRequestsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationMembershipRequestsByOrganizationId(ctx interface{}, organizationId interface{}) *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	return &MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationMembershipRequestsByOrganizationId", ctx, organizationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call) Return(_a0 []models.OrganizationMembershipRequest, _a1 error) *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationMembershipRequest, error)) *MockAuthServiceStore_GetOrganizationMembershipRequestsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicies provides a mock function with given fields: ctx, orgId
func (_m *MockAuthServiceStore) GetOrganizationPolicies(ctx context.Context, orgId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicies'
type MockAuthServiceStore_GetOrganizationPolicies_Call struct {
	*mock.Call
}

// GetOrganizationPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationPolicies(ctx interface{}, orgId interface{}) *MockAuthServiceStore_GetOrganizationPolicies_Call {
	return &MockAuthServiceStore_GetOrganizationPolicies_Call{Call: _e.mock.On("GetOrganizationPolicies", ctx, orgId)}
}

func (_c *MockAuthServiceStore_GetOrganizationPolicies_Call) Run(run func(ctx context.Context, orgId uuid.UUID)) *MockAuthServiceStore_GetOrganizationPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockAuthServiceStore_GetOrganizationPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockAuthServiceStore_GetOrganizationPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPoliciesByEmail provides a mock function with given fields: ctx, organizationId, email
func (_m *MockAuthServiceStore) GetOrganizationPoliciesByEmail(ctx context.Context, organizationId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, organizationId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPoliciesByEmail'
type MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call struct {
	*mock.Call
}

// GetOrganizationPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - email string
func (_e *MockAuthServiceStore_Expecter) GetOrganizationPoliciesByEmail(ctx interface{}, organizationId interface{}, email interface{}) *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call {
	return &MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call{Call: _e.mock.On("GetOrganizationPoliciesByEmail", ctx, organizationId, email)}
}

func (_c *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, email string)) *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockAuthServiceStore_GetOrganizationPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicyByUser provides a mock function with given fields: ctx, organizationId, userId
func (_m *MockAuthServiceStore) GetOrganizationPolicyByUser(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByUser")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationPolicyByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicyByUser'
type MockAuthServiceStore_GetOrganizationPolicyByUser_Call struct {
	*mock.Call
}

// GetOrganizationPolicyByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationPolicyByUser(ctx interface{}, organizationId interface{}, userId interface{}) *MockAuthServiceStore_GetOrganizationPolicyByUser_Call {
	return &MockAuthServiceStore_GetOrganizationPolicyByUser_Call{Call: _e.mock.On("GetOrganizationPolicyByUser", ctx, organizationId, userId)}
}

func (_c *MockAuthServiceStore_GetOrganizationPolicyByUser_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID)) *MockAuthServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPolicyByUser_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockAuthServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationPolicyByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)) *MockAuthServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSSOConfigsByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockAuthServiceStore) GetOrganizationSSOConfigsByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSSOConfigsByOrganizationId")
	}

	var r0 []models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSSOConfigsByOrganizationId'
type MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call struct {
	*mock.Call
}

// GetOrganizationSSOConfigsByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationSSOConfigsByOrganizationId(ctx interface{}, organizationId interface{}) *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	return &MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call{Call: _e.mock.On("GetOrganizationSSOConfigsByOrganizationId", ctx, organizationId)}
}

func (_c *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call) Return(_a0 []models.OrganizationSSOConfig, _a1 error) *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.OrganizationSSOConfig, error)) *MockAuthServiceStore_GetOrganizationSSOConfigsByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsAll provides a mock function with given fields: ctx
func (_m *MockAuthServiceStore) GetOrganizationsAll(ctx context.Context) ([]models.Organization, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsAll")
	}

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Organization, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsAll'
type MockAuthServiceStore_GetOrganizationsAll_Call struct {
	*mock.Call
}

// GetOrganizationsAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthServiceStore_Expecter) GetOrganizationsAll(ctx interface{}) *MockAuthServiceStore_GetOrganizationsAll_Call {
	return &MockAuthServiceStore_GetOrganizationsAll_Call{Call: _e.mock.On("GetOrganizationsAll", ctx)}
}

func (_c *MockAuthServiceStore_GetOrganizationsAll_Call) Run(run func(ctx context.Context)) *MockAuthServiceStore_GetOrganizationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationsAll_Call) Return(_a0 []models.Organization, _a1 error) *MockAuthServiceStore_GetOrganizationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationsAll_Call) RunAndReturn(run func(context.Context) ([]models.Organization, error)) *MockAuthServiceStore_GetOrganizationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsByMemberId provides a mock function with given fields: ctx, memberId
func (_m *MockAuthServiceStore) GetOrganizationsByMemberId(ctx context.Context, memberId uuid.UUID) ([]models.Organization, error) {
	ret := _m.Called(ctx, memberId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationsByMemberId")
	}

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Organization, error)); ok {
		return rf(ctx, memberId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Organization); ok {
		r0 = rf(ctx, memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetOrganizationsByMemberId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsByMemberId'
type MockAuthServiceStore_GetOrganizationsByMemberId_Call struct {
	*mock.Call
}

// GetOrganizationsByMemberId is a helper method to define mock.On call
//   - ctx context.Context
//   - memberId uuid.UUID
func (_e *MockAuthServiceStore_Expecter) GetOrganizationsByMemberId(ctx interface{}, memberId interface{}) *MockAuthServiceStore_GetOrganizationsByMemberId_Call {
	return &MockAuthServiceStore_GetOrganizationsByMemberId_Call{Call: _e.mock.On("GetOrganizationsByMemberId", ctx, memberId)}
}

func (_c *MockAuthServiceStore_GetOrganizationsByMemberId_Call) Run(run func(ctx context.Context, memberId uuid.UUID)) *MockAuthServiceStore_GetOrganizationsByMemberId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationsByMemberId_Call) Return(_a0 []models.Organization, _a1 error) *MockAuthServiceStore_GetOrganizationsByMemberId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetOrganizationsByMemberId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Organization, error)) *MockAuthServiceStore_GetOrganizationsByMemberId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrimarySSOConfigByDomain provides a mock function with given fields: ctx, domain
func (_m *MockAuthServiceStore) GetPrimarySSOConfigByDomain(ctx context.Context, domain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimarySSOConfigByDomain")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrimarySSOConfigByDomain'
type MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call struct {
	*mock.Call
}

// GetPrimarySSOConfigByDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockAuthServiceStore_Expecter) GetPrimarySSOConfigByDomain(ctx interface{}, domain interface{}) *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call {
	return &MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call{Call: _e.mock.On("GetPrimarySSOConfigByDomain", ctx, domain)}
}

func (_c *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call) Run(run func(ctx context.Context, domain string)) *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call) RunAndReturn(run func(context.Context, string) (*models.OrganizationSSOConfig, error)) *MockAuthServiceStore_GetPrimarySSOConfigByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSOConfigByDomain provides a mock function with given fields: ctx, domain
func (_m *MockAuthServiceStore) GetSSOConfigByDomain(ctx context.Context, domain string) (*models.OrganizationSSOConfig, error) {
	ret := _m.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetSSOConfigByDomain")
	}

	var r0 *models.OrganizationSSOConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OrganizationSSOConfig, error)); ok {
		return rf(ctx, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OrganizationSSOConfig); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationSSOConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetSSOConfigByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSOConfigByDomain'
type MockAuthServiceStore_GetSSOConfigByDomain_Call struct {
	*mock.Call
}

// GetSSOConfigByDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockAuthServiceStore_Expecter) GetSSOConfigByDomain(ctx interface{}, domain interface{}) *MockAuthServiceStore_GetSSOConfigByDomain_Call {
	return &MockAuthServiceStore_GetSSOConfigByDomain_Call{Call: _e.mock.On("GetSSOConfigByDomain", ctx, domain)}
}

func (_c *MockAuthServiceStore_GetSSOConfigByDomain_Call) Run(run func(ctx context.Context, domain string)) *MockAuthServiceStore_GetSSOConfigByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetSSOConfigByDomain_Call) Return(_a0 *models.OrganizationSSOConfig, _a1 error) *MockAuthServiceStore_GetSSOConfigByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetSSOConfigByDomain_Call) RunAndReturn(run func(context.Context, string) (*models.OrganizationSSOConfig, error)) *MockAuthServiceStore_GetSSOConfigByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *MockAuthServiceStore) GetUserById(ctx context.Context, userId string) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockAuthServiceStore_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockAuthServiceStore_Expecter) GetUserById(ctx interface{}, userId interface{}) *MockAuthServiceStore_GetUserById_Call {
	return &MockAuthServiceStore_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *MockAuthServiceStore_GetUserById_Call) Run(run func(ctx context.Context, userId string)) *MockAuthServiceStore_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetUserById_Call) Return(_a0 *models.User, _a1 error) *MockAuthServiceStore_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetUserById_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockAuthServiceStore_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersAll provides a mock function with given fields: ctx
func (_m *MockAuthServiceStore) GetUsersAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_GetUsersAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersAll'
type MockAuthServiceStore_GetUsersAll_Call struct {
	*mock.Call
}

// GetUsersAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthServiceStore_Expecter) GetUsersAll(ctx interface{}) *MockAuthServiceStore_GetUsersAll_Call {
	return &MockAuthServiceStore_GetUsersAll_Call{Call: _e.mock.On("GetUsersAll", ctx)}
}

func (_c *MockAuthServiceStore_GetUsersAll_Call) Run(run func(ctx context.Context)) *MockAuthServiceStore_GetUsersAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthServiceStore_GetUsersAll_Call) Return(_a0 []models.User, _a1 error) *MockAuthServiceStore_GetUsersAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_GetUsersAll_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *MockAuthServiceStore_GetUsersAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationInvitationStatus provides a mock function with given fields: ctx, invitationId, status
func (_m *MockAuthServiceStore) UpdateOrganizationInvitationStatus(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus) (*models.OrganizationInvitationStatus, error) {
	ret := _m.Called(ctx, invitationId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationInvitationStatus")
	}

	var r0 *models.OrganizationInvitationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)); ok {
		return rf(ctx, invitationId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.InvitationStatus) *models.OrganizationInvitationStatus); ok {
		r0 = rf(ctx, invitationId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationInvitationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.InvitationStatus) error); ok {
		r1 = rf(ctx, invitationId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationInvitationStatus'
type MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call struct {
	*mock.Call
}

// UpdateOrganizationInvitationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - invitationId uuid.UUID
//   - status models.InvitationStatus
func (_e *MockAuthServiceStore_Expecter) UpdateOrganizationInvitationStatus(ctx interface{}, invitationId interface{}, status interface{}) *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call {
	return &MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call{Call: _e.mock.On("UpdateOrganizationInvitationStatus", ctx, invitationId, status)}
}

func (_c *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call) Run(run func(ctx context.Context, invitationId uuid.UUID, status models.InvitationStatus)) *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.InvitationStatus))
	})
	return _c
}

func (_c *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call) Return(_a0 *models.OrganizationInvitationStatus, _a1 error) *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.InvitationStatus) (*models.OrganizationInvitationStatus, error)) *MockAuthServiceStore_UpdateOrganizationInvitationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationPolicy provides a mock function with given fields: ctx, orgId, audienceId, privilege
func (_m *MockAuthServiceStore) UpdateOrganizationPolicy(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, orgId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, orgId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, orgId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, orgId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_UpdateOrganizationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationPolicy'
type MockAuthServiceStore_UpdateOrganizationPolicy_Call struct {
	*mock.Call
}

// UpdateOrganizationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockAuthServiceStore_Expecter) UpdateOrganizationPolicy(ctx interface{}, orgId interface{}, audienceId interface{}, privilege interface{}) *MockAuthServiceStore_UpdateOrganizationPolicy_Call {
	return &MockAuthServiceStore_UpdateOrganizationPolicy_Call{Call: _e.mock.On("UpdateOrganizationPolicy", ctx, orgId, audienceId, privilege)}
}

func (_c *MockAuthServiceStore_UpdateOrganizationPolicy_Call) Run(run func(ctx context.Context, orgId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockAuthServiceStore_UpdateOrganizationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockAuthServiceStore_UpdateOrganizationPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockAuthServiceStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_UpdateOrganizationPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockAuthServiceStore_UpdateOrganizationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePendingOrganizationMembershipRequest provides a mock function with given fields: ctx, organizationId, userId, status
func (_m *MockAuthServiceStore) UpdatePendingOrganizationMembershipRequest(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error) {
	ret := _m.Called(ctx, organizationId, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePendingOrganizationMembershipRequest")
	}

	var r0 *models.OrganizationMembershipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)); ok {
		return rf(ctx, organizationId, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) *models.OrganizationMembershipRequest); ok {
		r0 = rf(ctx, organizationId, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrganizationMembershipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) error); ok {
		r1 = rf(ctx, organizationId, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePendingOrganizationMembershipRequest'
type MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call struct {
	*mock.Call
}

// UpdatePendingOrganizationMembershipRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
//   - status models.OrgMembershipStatus
func (_e *MockAuthServiceStore_Expecter) UpdatePendingOrganizationMembershipRequest(ctx interface{}, organizationId interface{}, userId interface{}, status interface{}) *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call {
	return &MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call{Call: _e.mock.On("UpdatePendingOrganizationMembershipRequest", ctx, organizationId, userId, status)}
}

func (_c *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID, status models.OrgMembershipStatus)) *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.OrgMembershipStatus))
	})
	return _c
}

func (_c *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call) Return(_a0 *models.OrganizationMembershipRequest, _a1 error) *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.OrgMembershipStatus) (*models.OrganizationMembershipRequest, error)) *MockAuthServiceStore_UpdatePendingOrganizationMembershipRequest_Call {
	_c.Call.Return(run)
	return _c
}

// WithOrganizationTransaction provides a mock function with given fields: ctx, fn
func (_m *MockAuthServiceStore) WithOrganizationTransaction(ctx context.Context, fn func(store.OrganizationStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithOrganizationTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.OrganizationStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthServiceStore_WithOrganizationTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithOrganizationTransaction'
type MockAuthServiceStore_WithOrganizationTransaction_Call struct {
	*mock.Call
}

// WithOrganizationTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.OrganizationStore) error
func (_e *MockAuthServiceStore_Expecter) WithOrganizationTransaction(ctx interface{}, fn interface{}) *MockAuthServiceStore_WithOrganizationTransaction_Call {
	return &MockAuthServiceStore_WithOrganizationTransaction_Call{Call: _e.mock.On("WithOrganizationTransaction", ctx, fn)}
}

func (_c *MockAuthServiceStore_WithOrganizationTransaction_Call) Run(run func(ctx context.Context, fn func(store.OrganizationStore) error)) *MockAuthServiceStore_WithOrganizationTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.OrganizationStore) error))
	})
	return _c
}

func (_c *MockAuthServiceStore_WithOrganizationTransaction_Call) Return(_a0 error) *MockAuthServiceStore_WithOrganizationTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthServiceStore_WithOrganizationTransaction_Call) RunAndReturn(run func(context.Context, func(store.OrganizationStore) error) error) *MockAuthServiceStore_WithOrganizationTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthServiceStore creates a new instance of MockAuthServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceStore {
	mock := &MockAuthServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

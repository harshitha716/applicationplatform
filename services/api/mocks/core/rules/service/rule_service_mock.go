// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	rulesmodels "github.com/Zampfi/application-platform/services/api/core/rules/models"

	uuid "github.com/google/uuid"
)

// MockRuleService is an autogenerated mock type for the RuleService type
type MockRuleService struct {
	mock.Mock
}

type MockRuleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuleService) EXPECT() *MockRuleService_Expecter {
	return &MockRuleService_Expecter{mock: &_m.Mock}
}

// CreateRule provides a mock function with given fields: ctx, params
func (_m *MockRuleService) CreateRule(ctx context.Context, params models.CreateRuleParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRuleParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuleService_CreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRule'
type MockRuleService_CreateRule_Call struct {
	*mock.Call
}

// CreateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.CreateRuleParams
func (_e *MockRuleService_Expecter) CreateRule(ctx interface{}, params interface{}) *MockRuleService_CreateRule_Call {
	return &MockRuleService_CreateRule_Call{Call: _e.mock.On("CreateRule", ctx, params)}
}

func (_c *MockRuleService_CreateRule_Call) Run(run func(ctx context.Context, params models.CreateRuleParams)) *MockRuleService_CreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateRuleParams))
	})
	return _c
}

func (_c *MockRuleService_CreateRule_Call) Return(_a0 error) *MockRuleService_CreateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuleService_CreateRule_Call) RunAndReturn(run func(context.Context, models.CreateRuleParams) error) *MockRuleService_CreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRule provides a mock function with given fields: ctx, params
func (_m *MockRuleService) DeleteRule(ctx context.Context, params models.DeleteRuleParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DeleteRuleParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuleService_DeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRule'
type MockRuleService_DeleteRule_Call struct {
	*mock.Call
}

// DeleteRule is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.DeleteRuleParams
func (_e *MockRuleService_Expecter) DeleteRule(ctx interface{}, params interface{}) *MockRuleService_DeleteRule_Call {
	return &MockRuleService_DeleteRule_Call{Call: _e.mock.On("DeleteRule", ctx, params)}
}

func (_c *MockRuleService_DeleteRule_Call) Run(run func(ctx context.Context, params models.DeleteRuleParams)) *MockRuleService_DeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DeleteRuleParams))
	})
	return _c
}

func (_c *MockRuleService_DeleteRule_Call) Return(_a0 error) *MockRuleService_DeleteRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuleService_DeleteRule_Call) RunAndReturn(run func(context.Context, models.DeleteRuleParams) error) *MockRuleService_DeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleByIds provides a mock function with given fields: ctx, ruleIds
func (_m *MockRuleService) GetRuleByIds(ctx context.Context, ruleIds []uuid.UUID) ([]rulesmodels.Rule, error) {
	ret := _m.Called(ctx, ruleIds)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleByIds")
	}

	var r0 []rulesmodels.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]rulesmodels.Rule, error)); ok {
		return rf(ctx, ruleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []rulesmodels.Rule); ok {
		r0 = rf(ctx, ruleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rulesmodels.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ruleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleService_GetRuleByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleByIds'
type MockRuleService_GetRuleByIds_Call struct {
	*mock.Call
}

// GetRuleByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleIds []uuid.UUID
func (_e *MockRuleService_Expecter) GetRuleByIds(ctx interface{}, ruleIds interface{}) *MockRuleService_GetRuleByIds_Call {
	return &MockRuleService_GetRuleByIds_Call{Call: _e.mock.On("GetRuleByIds", ctx, ruleIds)}
}

func (_c *MockRuleService_GetRuleByIds_Call) Run(run func(ctx context.Context, ruleIds []uuid.UUID)) *MockRuleService_GetRuleByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockRuleService_GetRuleByIds_Call) Return(_a0 []rulesmodels.Rule, _a1 error) *MockRuleService_GetRuleByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleService_GetRuleByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]rulesmodels.Rule, error)) *MockRuleService_GetRuleByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetRules provides a mock function with given fields: ctx, params
func (_m *MockRuleService) GetRules(ctx context.Context, params models.FilterRuleParams) (map[string]map[string][]rulesmodels.Rule, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetRules")
	}

	var r0 map[string]map[string][]rulesmodels.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterRuleParams) (map[string]map[string][]rulesmodels.Rule, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterRuleParams) map[string]map[string][]rulesmodels.Rule); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]rulesmodels.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FilterRuleParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleService_GetRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRules'
type MockRuleService_GetRules_Call struct {
	*mock.Call
}

// GetRules is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.FilterRuleParams
func (_e *MockRuleService_Expecter) GetRules(ctx interface{}, params interface{}) *MockRuleService_GetRules_Call {
	return &MockRuleService_GetRules_Call{Call: _e.mock.On("GetRules", ctx, params)}
}

func (_c *MockRuleService_GetRules_Call) Run(run func(ctx context.Context, params models.FilterRuleParams)) *MockRuleService_GetRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FilterRuleParams))
	})
	return _c
}

func (_c *MockRuleService_GetRules_Call) Return(_a0 map[string]map[string][]rulesmodels.Rule, _a1 error) *MockRuleService_GetRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleService_GetRules_Call) RunAndReturn(run func(context.Context, models.FilterRuleParams) (map[string]map[string][]rulesmodels.Rule, error)) *MockRuleService_GetRules_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRule provides a mock function with given fields: ctx, ruleId, params
func (_m *MockRuleService) UpdateRule(ctx context.Context, ruleId uuid.UUID, params models.UpdateRuleParams) error {
	ret := _m.Called(ctx, ruleId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateRuleParams) error); ok {
		r0 = rf(ctx, ruleId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuleService_UpdateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRule'
type MockRuleService_UpdateRule_Call struct {
	*mock.Call
}

// UpdateRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleId uuid.UUID
//   - params models.UpdateRuleParams
func (_e *MockRuleService_Expecter) UpdateRule(ctx interface{}, ruleId interface{}, params interface{}) *MockRuleService_UpdateRule_Call {
	return &MockRuleService_UpdateRule_Call{Call: _e.mock.On("UpdateRule", ctx, ruleId, params)}
}

func (_c *MockRuleService_UpdateRule_Call) Run(run func(ctx context.Context, ruleId uuid.UUID, params models.UpdateRuleParams)) *MockRuleService_UpdateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.UpdateRuleParams))
	})
	return _c
}

func (_c *MockRuleService_UpdateRule_Call) Return(_a0 error) *MockRuleService_UpdateRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuleService_UpdateRule_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.UpdateRuleParams) error) *MockRuleService_UpdateRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRulePriority provides a mock function with given fields: ctx, params
func (_m *MockRuleService) UpdateRulePriority(ctx context.Context, params models.UpdateRulePriorityParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRulePriority")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateRulePriorityParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuleService_UpdateRulePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRulePriority'
type MockRuleService_UpdateRulePriority_Call struct {
	*mock.Call
}

// UpdateRulePriority is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.UpdateRulePriorityParams
func (_e *MockRuleService_Expecter) UpdateRulePriority(ctx interface{}, params interface{}) *MockRuleService_UpdateRulePriority_Call {
	return &MockRuleService_UpdateRulePriority_Call{Call: _e.mock.On("UpdateRulePriority", ctx, params)}
}

func (_c *MockRuleService_UpdateRulePriority_Call) Run(run func(ctx context.Context, params models.UpdateRulePriorityParams)) *MockRuleService_UpdateRulePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UpdateRulePriorityParams))
	})
	return _c
}

func (_c *MockRuleService_UpdateRulePriority_Call) Return(_a0 error) *MockRuleService_UpdateRulePriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuleService_UpdateRulePriority_Call) RunAndReturn(run func(context.Context, models.UpdateRulePriorityParams) error) *MockRuleService_UpdateRulePriority_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuleService creates a new instance of MockRuleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuleService {
	mock := &MockRuleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_teams

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	teams "github.com/Zampfi/application-platform/services/api/core/organizations/teams"

	uuid "github.com/google/uuid"
)

// MockTeamService is an autogenerated mock type for the TeamService type
type MockTeamService struct {
	mock.Mock
}

type MockTeamService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamService) EXPECT() *MockTeamService_Expecter {
	return &MockTeamService_Expecter{mock: &_m.Mock}
}

// AddUserToTeam provides a mock function with given fields: ctx, orgId, teamId, userId
func (_m *MockTeamService) AddUserToTeam(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, userId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, orgId, teamId, userId)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToTeam")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, orgId, teamId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, orgId, teamId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, orgId, teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamService_AddUserToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToTeam'
type MockTeamService_AddUserToTeam_Call struct {
	*mock.Call
}

// AddUserToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - teamId uuid.UUID
//   - userId uuid.UUID
func (_e *MockTeamService_Expecter) AddUserToTeam(ctx interface{}, orgId interface{}, teamId interface{}, userId interface{}) *MockTeamService_AddUserToTeam_Call {
	return &MockTeamService_AddUserToTeam_Call{Call: _e.mock.On("AddUserToTeam", ctx, orgId, teamId, userId)}
}

func (_c *MockTeamService_AddUserToTeam_Call) Run(run func(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, userId uuid.UUID)) *MockTeamService_AddUserToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockTeamService_AddUserToTeam_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockTeamService_AddUserToTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamService_AddUserToTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)) *MockTeamService_AddUserToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, orgId, payload
func (_m *MockTeamService) CreateTeam(ctx context.Context, orgId uuid.UUID, payload teams.CreateTeamPayload) (*models.Team, error) {
	ret := _m.Called(ctx, orgId, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, teams.CreateTeamPayload) (*models.Team, error)); ok {
		return rf(ctx, orgId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, teams.CreateTeamPayload) *models.Team); ok {
		r0 = rf(ctx, orgId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, teams.CreateTeamPayload) error); ok {
		r1 = rf(ctx, orgId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamService_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockTeamService_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - payload teams.CreateTeamPayload
func (_e *MockTeamService_Expecter) CreateTeam(ctx interface{}, orgId interface{}, payload interface{}) *MockTeamService_CreateTeam_Call {
	return &MockTeamService_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, orgId, payload)}
}

func (_c *MockTeamService_CreateTeam_Call) Run(run func(ctx context.Context, orgId uuid.UUID, payload teams.CreateTeamPayload)) *MockTeamService_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(teams.CreateTeamPayload))
	})
	return _c
}

func (_c *MockTeamService_CreateTeam_Call) Return(_a0 *models.Team, _a1 error) *MockTeamService_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamService_CreateTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, teams.CreateTeamPayload) (*models.Team, error)) *MockTeamService_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, orgId, teamId
func (_m *MockTeamService) DeleteTeam(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID) error {
	ret := _m.Called(ctx, orgId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgId, teamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamService_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockTeamService_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockTeamService_Expecter) DeleteTeam(ctx interface{}, orgId interface{}, teamId interface{}) *MockTeamService_DeleteTeam_Call {
	return &MockTeamService_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, orgId, teamId)}
}

func (_c *MockTeamService_DeleteTeam_Call) Run(run func(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID)) *MockTeamService_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockTeamService_DeleteTeam_Call) Return(_a0 error) *MockTeamService_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamService_DeleteTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockTeamService_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamById provides a mock function with given fields: ctx, organizationId, teamId
func (_m *MockTeamService) GetTeamById(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamById")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)); ok {
		return rf(ctx, organizationId, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.Team); ok {
		r0 = rf(ctx, organizationId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamService_GetTeamById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamById'
type MockTeamService_GetTeamById_Call struct {
	*mock.Call
}

// GetTeamById is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockTeamService_Expecter) GetTeamById(ctx interface{}, organizationId interface{}, teamId interface{}) *MockTeamService_GetTeamById_Call {
	return &MockTeamService_GetTeamById_Call{Call: _e.mock.On("GetTeamById", ctx, organizationId, teamId)}
}

func (_c *MockTeamService_GetTeamById_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID)) *MockTeamService_GetTeamById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockTeamService_GetTeamById_Call) Return(_a0 *models.Team, _a1 error) *MockTeamService_GetTeamById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamService_GetTeamById_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)) *MockTeamService_GetTeamById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsByOrganizationID provides a mock function with given fields: ctx, organizationID
func (_m *MockTeamService) GetTeamsByOrganizationID(ctx context.Context, organizationID uuid.UUID) ([]models.Team, error) {
	ret := _m.Called(ctx, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsByOrganizationID")
	}

	var r0 []models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Team, error)); ok {
		return rf(ctx, organizationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Team); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamService_GetTeamsByOrganizationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsByOrganizationID'
type MockTeamService_GetTeamsByOrganizationID_Call struct {
	*mock.Call
}

// GetTeamsByOrganizationID is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID uuid.UUID
func (_e *MockTeamService_Expecter) GetTeamsByOrganizationID(ctx interface{}, organizationID interface{}) *MockTeamService_GetTeamsByOrganizationID_Call {
	return &MockTeamService_GetTeamsByOrganizationID_Call{Call: _e.mock.On("GetTeamsByOrganizationID", ctx, organizationID)}
}

func (_c *MockTeamService_GetTeamsByOrganizationID_Call) Run(run func(ctx context.Context, organizationID uuid.UUID)) *MockTeamService_GetTeamsByOrganizationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTeamService_GetTeamsByOrganizationID_Call) Return(_a0 []models.Team, _a1 error) *MockTeamService_GetTeamsByOrganizationID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamService_GetTeamsByOrganizationID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Team, error)) *MockTeamService_GetTeamsByOrganizationID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeam provides a mock function with given fields: ctx, orgId, teamId, teamMembershipId
func (_m *MockTeamService) RemoveUserFromTeam(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, teamMembershipId uuid.UUID) error {
	ret := _m.Called(ctx, orgId, teamId, teamMembershipId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgId, teamId, teamMembershipId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamService_RemoveUserFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeam'
type MockTeamService_RemoveUserFromTeam_Call struct {
	*mock.Call
}

// RemoveUserFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - teamId uuid.UUID
//   - teamMembershipId uuid.UUID
func (_e *MockTeamService_Expecter) RemoveUserFromTeam(ctx interface{}, orgId interface{}, teamId interface{}, teamMembershipId interface{}) *MockTeamService_RemoveUserFromTeam_Call {
	return &MockTeamService_RemoveUserFromTeam_Call{Call: _e.mock.On("RemoveUserFromTeam", ctx, orgId, teamId, teamMembershipId)}
}

func (_c *MockTeamService_RemoveUserFromTeam_Call) Run(run func(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, teamMembershipId uuid.UUID)) *MockTeamService_RemoveUserFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockTeamService_RemoveUserFromTeam_Call) Return(_a0 error) *MockTeamService_RemoveUserFromTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamService_RemoveUserFromTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockTeamService_RemoveUserFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RenameTeam provides a mock function with given fields: ctx, orgId, teamId, payload
func (_m *MockTeamService) RenameTeam(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, payload teams.RenameTeamPayload) error {
	ret := _m.Called(ctx, orgId, teamId, payload)

	if len(ret) == 0 {
		panic("no return value specified for RenameTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, teams.RenameTeamPayload) error); ok {
		r0 = rf(ctx, orgId, teamId, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamService_RenameTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameTeam'
type MockTeamService_RenameTeam_Call struct {
	*mock.Call
}

// RenameTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - teamId uuid.UUID
//   - payload teams.RenameTeamPayload
func (_e *MockTeamService_Expecter) RenameTeam(ctx interface{}, orgId interface{}, teamId interface{}, payload interface{}) *MockTeamService_RenameTeam_Call {
	return &MockTeamService_RenameTeam_Call{Call: _e.mock.On("RenameTeam", ctx, orgId, teamId, payload)}
}

func (_c *MockTeamService_RenameTeam_Call) Run(run func(ctx context.Context, orgId uuid.UUID, teamId uuid.UUID, payload teams.RenameTeamPayload)) *MockTeamService_RenameTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(teams.RenameTeamPayload))
	})
	return _c
}

func (_c *MockTeamService_RenameTeam_Call) Return(_a0 error) *MockTeamService_RenameTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamService_RenameTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, teams.RenameTeamPayload) error) *MockTeamService_RenameTeam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamService creates a new instance of MockTeamService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamService {
	mock := &MockTeamService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

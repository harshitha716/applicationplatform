// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_teams

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockteamServiceStore is an autogenerated mock type for the teamServiceStore type
type MockteamServiceStore struct {
	mock.Mock
}

type MockteamServiceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockteamServiceStore) EXPECT() *MockteamServiceStore_Expecter {
	return &MockteamServiceStore_Expecter{mock: &_m.Mock}
}

// CreateOrganizationTeam provides a mock function with given fields: ctx, organizationId, team
func (_m *MockteamServiceStore) CreateOrganizationTeam(ctx context.Context, organizationId uuid.UUID, team models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, team)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) (*models.Team, error)); ok {
		return rf(ctx, organizationId, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) *models.Team); ok {
		r0 = rf(ctx, organizationId, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.Team) error); ok {
		r1 = rf(ctx, organizationId, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_CreateOrganizationTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationTeam'
type MockteamServiceStore_CreateOrganizationTeam_Call struct {
	*mock.Call
}

// CreateOrganizationTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - team models.Team
func (_e *MockteamServiceStore_Expecter) CreateOrganizationTeam(ctx interface{}, organizationId interface{}, team interface{}) *MockteamServiceStore_CreateOrganizationTeam_Call {
	return &MockteamServiceStore_CreateOrganizationTeam_Call{Call: _e.mock.On("CreateOrganizationTeam", ctx, organizationId, team)}
}

func (_c *MockteamServiceStore_CreateOrganizationTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, team models.Team)) *MockteamServiceStore_CreateOrganizationTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.Team))
	})
	return _c
}

func (_c *MockteamServiceStore_CreateOrganizationTeam_Call) Return(_a0 *models.Team, _a1 error) *MockteamServiceStore_CreateOrganizationTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_CreateOrganizationTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.Team) (*models.Team, error)) *MockteamServiceStore_CreateOrganizationTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamMembership provides a mock function with given fields: ctx, teamId, userId
func (_m *MockteamServiceStore) CreateTeamMembership(ctx context.Context, teamId uuid.UUID, userId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, teamId, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamMembership")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, teamId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, teamId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_CreateTeamMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamMembership'
type MockteamServiceStore_CreateTeamMembership_Call struct {
	*mock.Call
}

// CreateTeamMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
//   - userId uuid.UUID
func (_e *MockteamServiceStore_Expecter) CreateTeamMembership(ctx interface{}, teamId interface{}, userId interface{}) *MockteamServiceStore_CreateTeamMembership_Call {
	return &MockteamServiceStore_CreateTeamMembership_Call{Call: _e.mock.On("CreateTeamMembership", ctx, teamId, userId)}
}

func (_c *MockteamServiceStore_CreateTeamMembership_Call) Run(run func(ctx context.Context, teamId uuid.UUID, userId uuid.UUID)) *MockteamServiceStore_CreateTeamMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_CreateTeamMembership_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockteamServiceStore_CreateTeamMembership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_CreateTeamMembership_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)) *MockteamServiceStore_CreateTeamMembership_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, organizationId, teamId
func (_m *MockteamServiceStore) DeleteTeam(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID) error {
	ret := _m.Called(ctx, organizationId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, organizationId, teamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockteamServiceStore_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockteamServiceStore_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockteamServiceStore_Expecter) DeleteTeam(ctx interface{}, organizationId interface{}, teamId interface{}) *MockteamServiceStore_DeleteTeam_Call {
	return &MockteamServiceStore_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, organizationId, teamId)}
}

func (_c *MockteamServiceStore_DeleteTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID)) *MockteamServiceStore_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_DeleteTeam_Call) Return(_a0 error) *MockteamServiceStore_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockteamServiceStore_DeleteTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockteamServiceStore_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamMembership provides a mock function with given fields: ctx, teamId, teamMembershipId
func (_m *MockteamServiceStore) DeleteTeamMembership(ctx context.Context, teamId uuid.UUID, teamMembershipId uuid.UUID) error {
	ret := _m.Called(ctx, teamId, teamMembershipId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, teamId, teamMembershipId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockteamServiceStore_DeleteTeamMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamMembership'
type MockteamServiceStore_DeleteTeamMembership_Call struct {
	*mock.Call
}

// DeleteTeamMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
//   - teamMembershipId uuid.UUID
func (_e *MockteamServiceStore_Expecter) DeleteTeamMembership(ctx interface{}, teamId interface{}, teamMembershipId interface{}) *MockteamServiceStore_DeleteTeamMembership_Call {
	return &MockteamServiceStore_DeleteTeamMembership_Call{Call: _e.mock.On("DeleteTeamMembership", ctx, teamId, teamMembershipId)}
}

func (_c *MockteamServiceStore_DeleteTeamMembership_Call) Run(run func(ctx context.Context, teamId uuid.UUID, teamMembershipId uuid.UUID)) *MockteamServiceStore_DeleteTeamMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_DeleteTeamMembership_Call) Return(_a0 error) *MockteamServiceStore_DeleteTeamMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockteamServiceStore_DeleteTeamMembership_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockteamServiceStore_DeleteTeamMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationPolicyByUser provides a mock function with given fields: ctx, organizationId, userId
func (_m *MockteamServiceStore) GetOrganizationPolicyByUser(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, organizationId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByUser")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, organizationId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, organizationId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetOrganizationPolicyByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationPolicyByUser'
type MockteamServiceStore_GetOrganizationPolicyByUser_Call struct {
	*mock.Call
}

// GetOrganizationPolicyByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - userId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetOrganizationPolicyByUser(ctx interface{}, organizationId interface{}, userId interface{}) *MockteamServiceStore_GetOrganizationPolicyByUser_Call {
	return &MockteamServiceStore_GetOrganizationPolicyByUser_Call{Call: _e.mock.On("GetOrganizationPolicyByUser", ctx, organizationId, userId)}
}

func (_c *MockteamServiceStore_GetOrganizationPolicyByUser_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, userId uuid.UUID)) *MockteamServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetOrganizationPolicyByUser_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockteamServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetOrganizationPolicyByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.ResourceAudiencePolicy, error)) *MockteamServiceStore_GetOrganizationPolicyByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, organizationId, teamId
func (_m *MockteamServiceStore) GetTeam(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)); ok {
		return rf(ctx, organizationId, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.Team); ok {
		r0 = rf(ctx, organizationId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockteamServiceStore_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetTeam(ctx interface{}, organizationId interface{}, teamId interface{}) *MockteamServiceStore_GetTeam_Call {
	return &MockteamServiceStore_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, organizationId, teamId)}
}

func (_c *MockteamServiceStore_GetTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, teamId uuid.UUID)) *MockteamServiceStore_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeam_Call) Return(_a0 *models.Team, _a1 error) *MockteamServiceStore_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.Team, error)) *MockteamServiceStore_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByName provides a mock function with given fields: ctx, organizationId, name
func (_m *MockteamServiceStore) GetTeamByName(ctx context.Context, organizationId uuid.UUID, name string) ([]models.Team, error) {
	ret := _m.Called(ctx, organizationId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByName")
	}

	var r0 []models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.Team, error)); ok {
		return rf(ctx, organizationId, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.Team); ok {
		r0 = rf(ctx, organizationId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, organizationId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByName'
type MockteamServiceStore_GetTeamByName_Call struct {
	*mock.Call
}

// GetTeamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - name string
func (_e *MockteamServiceStore_Expecter) GetTeamByName(ctx interface{}, organizationId interface{}, name interface{}) *MockteamServiceStore_GetTeamByName_Call {
	return &MockteamServiceStore_GetTeamByName_Call{Call: _e.mock.On("GetTeamByName", ctx, organizationId, name)}
}

func (_c *MockteamServiceStore_GetTeamByName_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, name string)) *MockteamServiceStore_GetTeamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeamByName_Call) Return(_a0 []models.Team, _a1 error) *MockteamServiceStore_GetTeamByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeamByName_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.Team, error)) *MockteamServiceStore_GetTeamByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembershipById provides a mock function with given fields: ctx, teamMembershipId
func (_m *MockteamServiceStore) GetTeamMembershipById(ctx context.Context, teamMembershipId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, teamMembershipId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembershipById")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, teamMembershipId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, teamMembershipId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamMembershipId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeamMembershipById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembershipById'
type MockteamServiceStore_GetTeamMembershipById_Call struct {
	*mock.Call
}

// GetTeamMembershipById is a helper method to define mock.On call
//   - ctx context.Context
//   - teamMembershipId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetTeamMembershipById(ctx interface{}, teamMembershipId interface{}) *MockteamServiceStore_GetTeamMembershipById_Call {
	return &MockteamServiceStore_GetTeamMembershipById_Call{Call: _e.mock.On("GetTeamMembershipById", ctx, teamMembershipId)}
}

func (_c *MockteamServiceStore_GetTeamMembershipById_Call) Run(run func(ctx context.Context, teamMembershipId uuid.UUID)) *MockteamServiceStore_GetTeamMembershipById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeamMembershipById_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockteamServiceStore_GetTeamMembershipById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeamMembershipById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.TeamMembership, error)) *MockteamServiceStore_GetTeamMembershipById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembershipByUserIdTeamId provides a mock function with given fields: ctx, userId, teamId
func (_m *MockteamServiceStore) GetTeamMembershipByUserIdTeamId(ctx context.Context, userId uuid.UUID, teamId uuid.UUID) (*models.TeamMembership, error) {
	ret := _m.Called(ctx, userId, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembershipByUserIdTeamId")
	}

	var r0 *models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)); ok {
		return rf(ctx, userId, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.TeamMembership); ok {
		r0 = rf(ctx, userId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembershipByUserIdTeamId'
type MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call struct {
	*mock.Call
}

// GetTeamMembershipByUserIdTeamId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - teamId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetTeamMembershipByUserIdTeamId(ctx interface{}, userId interface{}, teamId interface{}) *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call {
	return &MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call{Call: _e.mock.On("GetTeamMembershipByUserIdTeamId", ctx, userId, teamId)}
}

func (_c *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call) Run(run func(ctx context.Context, userId uuid.UUID, teamId uuid.UUID)) *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call) Return(_a0 *models.TeamMembership, _a1 error) *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.TeamMembership, error)) *MockteamServiceStore_GetTeamMembershipByUserIdTeamId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMemberships provides a mock function with given fields: ctx, teamId
func (_m *MockteamServiceStore) GetTeamMemberships(ctx context.Context, teamId uuid.UUID) ([]models.TeamMembership, error) {
	ret := _m.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMemberships")
	}

	var r0 []models.TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.TeamMembership, error)); ok {
		return rf(ctx, teamId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.TeamMembership); ok {
		r0 = rf(ctx, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeamMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMemberships'
type MockteamServiceStore_GetTeamMemberships_Call struct {
	*mock.Call
}

// GetTeamMemberships is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetTeamMemberships(ctx interface{}, teamId interface{}) *MockteamServiceStore_GetTeamMemberships_Call {
	return &MockteamServiceStore_GetTeamMemberships_Call{Call: _e.mock.On("GetTeamMemberships", ctx, teamId)}
}

func (_c *MockteamServiceStore_GetTeamMemberships_Call) Run(run func(ctx context.Context, teamId uuid.UUID)) *MockteamServiceStore_GetTeamMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeamMemberships_Call) Return(_a0 []models.TeamMembership, _a1 error) *MockteamServiceStore_GetTeamMemberships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeamMemberships_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.TeamMembership, error)) *MockteamServiceStore_GetTeamMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx, organizationId
func (_m *MockteamServiceStore) GetTeams(ctx context.Context, organizationId uuid.UUID) ([]models.Team, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Team, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Team); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockteamServiceStore_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockteamServiceStore_Expecter) GetTeams(ctx interface{}, organizationId interface{}) *MockteamServiceStore_GetTeams_Call {
	return &MockteamServiceStore_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx, organizationId)}
}

func (_c *MockteamServiceStore_GetTeams_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockteamServiceStore_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockteamServiceStore_GetTeams_Call) Return(_a0 []models.Team, _a1 error) *MockteamServiceStore_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_GetTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Team, error)) *MockteamServiceStore_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: ctx, organizationId, team
func (_m *MockteamServiceStore) UpdateTeam(ctx context.Context, organizationId uuid.UUID, team models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, organizationId, team)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) (*models.Team, error)); ok {
		return rf(ctx, organizationId, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Team) *models.Team); ok {
		r0 = rf(ctx, organizationId, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.Team) error); ok {
		r1 = rf(ctx, organizationId, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockteamServiceStore_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockteamServiceStore_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - team models.Team
func (_e *MockteamServiceStore_Expecter) UpdateTeam(ctx interface{}, organizationId interface{}, team interface{}) *MockteamServiceStore_UpdateTeam_Call {
	return &MockteamServiceStore_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx, organizationId, team)}
}

func (_c *MockteamServiceStore_UpdateTeam_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, team models.Team)) *MockteamServiceStore_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.Team))
	})
	return _c
}

func (_c *MockteamServiceStore_UpdateTeam_Call) Return(_a0 *models.Team, _a1 error) *MockteamServiceStore_UpdateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockteamServiceStore_UpdateTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.Team) (*models.Team, error)) *MockteamServiceStore_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// WithTeamTransaction provides a mock function with given fields: ctx, fn
func (_m *MockteamServiceStore) WithTeamTransaction(ctx context.Context, fn func(store.TeamStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTeamTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.TeamStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockteamServiceStore_WithTeamTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTeamTransaction'
type MockteamServiceStore_WithTeamTransaction_Call struct {
	*mock.Call
}

// WithTeamTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.TeamStore) error
func (_e *MockteamServiceStore_Expecter) WithTeamTransaction(ctx interface{}, fn interface{}) *MockteamServiceStore_WithTeamTransaction_Call {
	return &MockteamServiceStore_WithTeamTransaction_Call{Call: _e.mock.On("WithTeamTransaction", ctx, fn)}
}

func (_c *MockteamServiceStore_WithTeamTransaction_Call) Run(run func(ctx context.Context, fn func(store.TeamStore) error)) *MockteamServiceStore_WithTeamTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.TeamStore) error))
	})
	return _c
}

func (_c *MockteamServiceStore_WithTeamTransaction_Call) Return(_a0 error) *MockteamServiceStore_WithTeamTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockteamServiceStore_WithTeamTransaction_Call) RunAndReturn(run func(context.Context, func(store.TeamStore) error) error) *MockteamServiceStore_WithTeamTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockteamServiceStore creates a new instance of MockteamServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockteamServiceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockteamServiceStore {
	mock := &MockteamServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

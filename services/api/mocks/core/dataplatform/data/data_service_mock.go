// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_data

import (
	context "context"

	constants "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/constants"

	databricks "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/providers/databricks"

	dataplatformmodels "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/core/dataplatform/data/models"

	serverconfig "github.com/Zampfi/application-platform/services/api/config"
)

// MockDataService is an autogenerated mock type for the DataService type
type MockDataService struct {
	mock.Mock
}

type MockDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataService) EXPECT() *MockDataService_Expecter {
	return &MockDataService_Expecter{mock: &_m.Mock}
}

// GetDataPlatformConfig provides a mock function with no fields
func (_m *MockDataService) GetDataPlatformConfig() *serverconfig.DataPlatformConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataPlatformConfig")
	}

	var r0 *serverconfig.DataPlatformConfig
	if rf, ok := ret.Get(0).(func() *serverconfig.DataPlatformConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverconfig.DataPlatformConfig)
		}
	}

	return r0
}

// MockDataService_GetDataPlatformConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataPlatformConfig'
type MockDataService_GetDataPlatformConfig_Call struct {
	*mock.Call
}

// GetDataPlatformConfig is a helper method to define mock.On call
func (_e *MockDataService_Expecter) GetDataPlatformConfig() *MockDataService_GetDataPlatformConfig_Call {
	return &MockDataService_GetDataPlatformConfig_Call{Call: _e.mock.On("GetDataPlatformConfig")}
}

func (_c *MockDataService_GetDataPlatformConfig_Call) Run(run func()) *MockDataService_GetDataPlatformConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataService_GetDataPlatformConfig_Call) Return(_a0 *serverconfig.DataPlatformConfig) *MockDataService_GetDataPlatformConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataService_GetDataPlatformConfig_Call) RunAndReturn(run func() *serverconfig.DataPlatformConfig) *MockDataService_GetDataPlatformConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataProviderIdForMerchant provides a mock function with given fields: merchantId, providerType
func (_m *MockDataService) GetDataProviderIdForMerchant(merchantId string, providerType constants.ProviderType) (string, error) {
	ret := _m.Called(merchantId, providerType)

	if len(ret) == 0 {
		panic("no return value specified for GetDataProviderIdForMerchant")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, constants.ProviderType) (string, error)); ok {
		return rf(merchantId, providerType)
	}
	if rf, ok := ret.Get(0).(func(string, constants.ProviderType) string); ok {
		r0 = rf(merchantId, providerType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, constants.ProviderType) error); ok {
		r1 = rf(merchantId, providerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDataProviderIdForMerchant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataProviderIdForMerchant'
type MockDataService_GetDataProviderIdForMerchant_Call struct {
	*mock.Call
}

// GetDataProviderIdForMerchant is a helper method to define mock.On call
//   - merchantId string
//   - providerType constants.ProviderType
func (_e *MockDataService_Expecter) GetDataProviderIdForMerchant(merchantId interface{}, providerType interface{}) *MockDataService_GetDataProviderIdForMerchant_Call {
	return &MockDataService_GetDataProviderIdForMerchant_Call{Call: _e.mock.On("GetDataProviderIdForMerchant", merchantId, providerType)}
}

func (_c *MockDataService_GetDataProviderIdForMerchant_Call) Run(run func(merchantId string, providerType constants.ProviderType)) *MockDataService_GetDataProviderIdForMerchant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(constants.ProviderType))
	})
	return _c
}

func (_c *MockDataService_GetDataProviderIdForMerchant_Call) Return(_a0 string, _a1 error) *MockDataService_GetDataProviderIdForMerchant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDataProviderIdForMerchant_Call) RunAndReturn(run func(string, constants.ProviderType) (string, error)) *MockDataService_GetDataProviderIdForMerchant_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabricksServiceForMerchant provides a mock function with given fields: ctx, merchantId
func (_m *MockDataService) GetDatabricksServiceForMerchant(ctx context.Context, merchantId string) (databricks.DatabricksService, error) {
	ret := _m.Called(ctx, merchantId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabricksServiceForMerchant")
	}

	var r0 databricks.DatabricksService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (databricks.DatabricksService, error)); ok {
		return rf(ctx, merchantId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) databricks.DatabricksService); ok {
		r0 = rf(ctx, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(databricks.DatabricksService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatabricksServiceForMerchant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabricksServiceForMerchant'
type MockDataService_GetDatabricksServiceForMerchant_Call struct {
	*mock.Call
}

// GetDatabricksServiceForMerchant is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
func (_e *MockDataService_Expecter) GetDatabricksServiceForMerchant(ctx interface{}, merchantId interface{}) *MockDataService_GetDatabricksServiceForMerchant_Call {
	return &MockDataService_GetDatabricksServiceForMerchant_Call{Call: _e.mock.On("GetDatabricksServiceForMerchant", ctx, merchantId)}
}

func (_c *MockDataService_GetDatabricksServiceForMerchant_Call) Run(run func(ctx context.Context, merchantId string)) *MockDataService_GetDatabricksServiceForMerchant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatabricksServiceForMerchant_Call) Return(_a0 databricks.DatabricksService, _a1 error) *MockDataService_GetDatabricksServiceForMerchant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatabricksServiceForMerchant_Call) RunAndReturn(run func(context.Context, string) (databricks.DatabricksService, error)) *MockDataService_GetDatabricksServiceForMerchant_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabricksServiceForProvider provides a mock function with given fields: ctx, providerId
func (_m *MockDataService) GetDatabricksServiceForProvider(ctx context.Context, providerId string) (databricks.DatabricksService, error) {
	ret := _m.Called(ctx, providerId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabricksServiceForProvider")
	}

	var r0 databricks.DatabricksService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (databricks.DatabricksService, error)); ok {
		return rf(ctx, providerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) databricks.DatabricksService); ok {
		r0 = rf(ctx, providerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(databricks.DatabricksService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatabricksServiceForProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabricksServiceForProvider'
type MockDataService_GetDatabricksServiceForProvider_Call struct {
	*mock.Call
}

// GetDatabricksServiceForProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - providerId string
func (_e *MockDataService_Expecter) GetDatabricksServiceForProvider(ctx interface{}, providerId interface{}) *MockDataService_GetDatabricksServiceForProvider_Call {
	return &MockDataService_GetDatabricksServiceForProvider_Call{Call: _e.mock.On("GetDatabricksServiceForProvider", ctx, providerId)}
}

func (_c *MockDataService_GetDatabricksServiceForProvider_Call) Run(run func(ctx context.Context, providerId string)) *MockDataService_GetDatabricksServiceForProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatabricksServiceForProvider_Call) Return(_a0 databricks.DatabricksService, _a1 error) *MockDataService_GetDatabricksServiceForProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatabricksServiceForProvider_Call) RunAndReturn(run func(context.Context, string) (databricks.DatabricksService, error)) *MockDataService_GetDatabricksServiceForProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabricksWarehouseId provides a mock function with given fields: ctx, providerId
func (_m *MockDataService) GetDatabricksWarehouseId(ctx context.Context, providerId string) (string, error) {
	ret := _m.Called(ctx, providerId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabricksWarehouseId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, providerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, providerId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatabricksWarehouseId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabricksWarehouseId'
type MockDataService_GetDatabricksWarehouseId_Call struct {
	*mock.Call
}

// GetDatabricksWarehouseId is a helper method to define mock.On call
//   - ctx context.Context
//   - providerId string
func (_e *MockDataService_Expecter) GetDatabricksWarehouseId(ctx interface{}, providerId interface{}) *MockDataService_GetDatabricksWarehouseId_Call {
	return &MockDataService_GetDatabricksWarehouseId_Call{Call: _e.mock.On("GetDatabricksWarehouseId", ctx, providerId)}
}

func (_c *MockDataService_GetDatabricksWarehouseId_Call) Run(run func(ctx context.Context, providerId string)) *MockDataService_GetDatabricksWarehouseId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatabricksWarehouseId_Call) Return(_a0 string, _a1 error) *MockDataService_GetDatabricksWarehouseId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatabricksWarehouseId_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockDataService_GetDatabricksWarehouseId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetConfig provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDataService) GetDatasetConfig(ctx context.Context, merchantId string, datasetId string) (models.DatasetConfig, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetConfig")
	}

	var r0 models.DatasetConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.DatasetConfig, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.DatasetConfig); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		r0 = ret.Get(0).(models.DatasetConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatasetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetConfig'
type MockDataService_GetDatasetConfig_Call struct {
	*mock.Call
}

// GetDatasetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - datasetId string
func (_e *MockDataService_Expecter) GetDatasetConfig(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDataService_GetDatasetConfig_Call {
	return &MockDataService_GetDatasetConfig_Call{Call: _e.mock.On("GetDatasetConfig", ctx, merchantId, datasetId)}
}

func (_c *MockDataService_GetDatasetConfig_Call) Run(run func(ctx context.Context, merchantId string, datasetId string)) *MockDataService_GetDatasetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatasetConfig_Call) Return(_a0 models.DatasetConfig, _a1 error) *MockDataService_GetDatasetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatasetConfig_Call) RunAndReturn(run func(context.Context, string, string) (models.DatasetConfig, error)) *MockDataService_GetDatasetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetEdgesByMerchant provides a mock function with given fields: ctx, merchantId
func (_m *MockDataService) GetDatasetEdgesByMerchant(ctx context.Context, merchantId string) ([]models.JobDatasetMapping, error) {
	ret := _m.Called(ctx, merchantId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetEdgesByMerchant")
	}

	var r0 []models.JobDatasetMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.JobDatasetMapping, error)); ok {
		return rf(ctx, merchantId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.JobDatasetMapping); ok {
		r0 = rf(ctx, merchantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JobDatasetMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatasetEdgesByMerchant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetEdgesByMerchant'
type MockDataService_GetDatasetEdgesByMerchant_Call struct {
	*mock.Call
}

// GetDatasetEdgesByMerchant is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
func (_e *MockDataService_Expecter) GetDatasetEdgesByMerchant(ctx interface{}, merchantId interface{}) *MockDataService_GetDatasetEdgesByMerchant_Call {
	return &MockDataService_GetDatasetEdgesByMerchant_Call{Call: _e.mock.On("GetDatasetEdgesByMerchant", ctx, merchantId)}
}

func (_c *MockDataService_GetDatasetEdgesByMerchant_Call) Run(run func(ctx context.Context, merchantId string)) *MockDataService_GetDatasetEdgesByMerchant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatasetEdgesByMerchant_Call) Return(_a0 []models.JobDatasetMapping, _a1 error) *MockDataService_GetDatasetEdgesByMerchant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatasetEdgesByMerchant_Call) RunAndReturn(run func(context.Context, string) ([]models.JobDatasetMapping, error)) *MockDataService_GetDatasetEdgesByMerchant_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetMetadata provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDataService) GetDatasetMetadata(ctx context.Context, merchantId string, datasetId string) (models.DatasetMetadata, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetMetadata")
	}

	var r0 models.DatasetMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.DatasetMetadata, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.DatasetMetadata); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		r0 = ret.Get(0).(models.DatasetMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatasetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetMetadata'
type MockDataService_GetDatasetMetadata_Call struct {
	*mock.Call
}

// GetDatasetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - datasetId string
func (_e *MockDataService_Expecter) GetDatasetMetadata(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDataService_GetDatasetMetadata_Call {
	return &MockDataService_GetDatasetMetadata_Call{Call: _e.mock.On("GetDatasetMetadata", ctx, merchantId, datasetId)}
}

func (_c *MockDataService_GetDatasetMetadata_Call) Run(run func(ctx context.Context, merchantId string, datasetId string)) *MockDataService_GetDatasetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatasetMetadata_Call) Return(_a0 models.DatasetMetadata, _a1 error) *MockDataService_GetDatasetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatasetMetadata_Call) RunAndReturn(run func(context.Context, string, string) (models.DatasetMetadata, error)) *MockDataService_GetDatasetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetParents provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDataService) GetDatasetParents(ctx context.Context, merchantId string, datasetId string) (models.DatasetParents, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetParents")
	}

	var r0 models.DatasetParents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.DatasetParents, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.DatasetParents); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		r0 = ret.Get(0).(models.DatasetParents)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_GetDatasetParents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetParents'
type MockDataService_GetDatasetParents_Call struct {
	*mock.Call
}

// GetDatasetParents is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - datasetId string
func (_e *MockDataService_Expecter) GetDatasetParents(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDataService_GetDatasetParents_Call {
	return &MockDataService_GetDatasetParents_Call{Call: _e.mock.On("GetDatasetParents", ctx, merchantId, datasetId)}
}

func (_c *MockDataService_GetDatasetParents_Call) Run(run func(ctx context.Context, merchantId string, datasetId string)) *MockDataService_GetDatasetParents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataService_GetDatasetParents_Call) Return(_a0 models.DatasetParents, _a1 error) *MockDataService_GetDatasetParents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_GetDatasetParents_Call) RunAndReturn(run func(context.Context, string, string) (models.DatasetParents, error)) *MockDataService_GetDatasetParents_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessParamsForQuery provides a mock function with given fields: ctx, merchantId, params, providerType
func (_m *MockDataService) ProcessParamsForQuery(ctx context.Context, merchantId string, params map[string]string, providerType constants.ProviderType) (models.QueryMetadata, error) {
	ret := _m.Called(ctx, merchantId, params, providerType)

	if len(ret) == 0 {
		panic("no return value specified for ProcessParamsForQuery")
	}

	var r0 models.QueryMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, constants.ProviderType) (models.QueryMetadata, error)); ok {
		return rf(ctx, merchantId, params, providerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, constants.ProviderType) models.QueryMetadata); ok {
		r0 = rf(ctx, merchantId, params, providerType)
	} else {
		r0 = ret.Get(0).(models.QueryMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, constants.ProviderType) error); ok {
		r1 = rf(ctx, merchantId, params, providerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_ProcessParamsForQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessParamsForQuery'
type MockDataService_ProcessParamsForQuery_Call struct {
	*mock.Call
}

// ProcessParamsForQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - params map[string]string
//   - providerType constants.ProviderType
func (_e *MockDataService_Expecter) ProcessParamsForQuery(ctx interface{}, merchantId interface{}, params interface{}, providerType interface{}) *MockDataService_ProcessParamsForQuery_Call {
	return &MockDataService_ProcessParamsForQuery_Call{Call: _e.mock.On("ProcessParamsForQuery", ctx, merchantId, params, providerType)}
}

func (_c *MockDataService_ProcessParamsForQuery_Call) Run(run func(ctx context.Context, merchantId string, params map[string]string, providerType constants.ProviderType)) *MockDataService_ProcessParamsForQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string), args[3].(constants.ProviderType))
	})
	return _c
}

func (_c *MockDataService_ProcessParamsForQuery_Call) Return(_a0 models.QueryMetadata, _a1 error) *MockDataService_ProcessParamsForQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_ProcessParamsForQuery_Call) RunAndReturn(run func(context.Context, string, map[string]string, constants.ProviderType) (models.QueryMetadata, error)) *MockDataService_ProcessParamsForQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, merchantId, query, params, args
func (_m *MockDataService) Query(ctx context.Context, merchantId string, query string, params map[string]string, args ...interface{}) (dataplatformmodels.QueryResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, merchantId, query, params)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 dataplatformmodels.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, ...interface{}) (dataplatformmodels.QueryResult, error)); ok {
		return rf(ctx, merchantId, query, params, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, ...interface{}) dataplatformmodels.QueryResult); ok {
		r0 = rf(ctx, merchantId, query, params, args...)
	} else {
		r0 = ret.Get(0).(dataplatformmodels.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, ...interface{}) error); ok {
		r1 = rf(ctx, merchantId, query, params, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDataService_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - query string
//   - params map[string]string
//   - args ...interface{}
func (_e *MockDataService_Expecter) Query(ctx interface{}, merchantId interface{}, query interface{}, params interface{}, args ...interface{}) *MockDataService_Query_Call {
	return &MockDataService_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, merchantId, query, params}, args...)...)}
}

func (_c *MockDataService_Query_Call) Run(run func(ctx context.Context, merchantId string, query string, params map[string]string, args ...interface{})) *MockDataService_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string), variadicArgs...)
	})
	return _c
}

func (_c *MockDataService_Query_Call) Return(_a0 dataplatformmodels.QueryResult, _a1 error) *MockDataService_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_Query_Call) RunAndReturn(run func(context.Context, string, string, map[string]string, ...interface{}) (dataplatformmodels.QueryResult, error)) *MockDataService_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRealTime provides a mock function with given fields: ctx, merchantId, query, params, args
func (_m *MockDataService) QueryRealTime(ctx context.Context, merchantId string, query string, params map[string]string, args ...interface{}) (dataplatformmodels.QueryResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, merchantId, query, params)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRealTime")
	}

	var r0 dataplatformmodels.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, ...interface{}) (dataplatformmodels.QueryResult, error)); ok {
		return rf(ctx, merchantId, query, params, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, ...interface{}) dataplatformmodels.QueryResult); ok {
		r0 = rf(ctx, merchantId, query, params, args...)
	} else {
		r0 = ret.Get(0).(dataplatformmodels.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, ...interface{}) error); ok {
		r1 = rf(ctx, merchantId, query, params, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_QueryRealTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRealTime'
type MockDataService_QueryRealTime_Call struct {
	*mock.Call
}

// QueryRealTime is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId string
//   - query string
//   - params map[string]string
//   - args ...interface{}
func (_e *MockDataService_Expecter) QueryRealTime(ctx interface{}, merchantId interface{}, query interface{}, params interface{}, args ...interface{}) *MockDataService_QueryRealTime_Call {
	return &MockDataService_QueryRealTime_Call{Call: _e.mock.On("QueryRealTime",
		append([]interface{}{ctx, merchantId, query, params}, args...)...)}
}

func (_c *MockDataService_QueryRealTime_Call) Run(run func(ctx context.Context, merchantId string, query string, params map[string]string, args ...interface{})) *MockDataService_QueryRealTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string), variadicArgs...)
	})
	return _c
}

func (_c *MockDataService_QueryRealTime_Call) Return(_a0 dataplatformmodels.QueryResult, _a1 error) *MockDataService_QueryRealTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_QueryRealTime_Call) RunAndReturn(run func(context.Context, string, string, map[string]string, ...interface{}) (dataplatformmodels.QueryResult, error)) *MockDataService_QueryRealTime_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateQuery provides a mock function with given fields: ctx, query, providerType
func (_m *MockDataService) TranslateQuery(ctx context.Context, query string, providerType constants.ProviderType) (string, error) {
	ret := _m.Called(ctx, query, providerType)

	if len(ret) == 0 {
		panic("no return value specified for TranslateQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.ProviderType) (string, error)); ok {
		return rf(ctx, query, providerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, constants.ProviderType) string); ok {
		r0 = rf(ctx, query, providerType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, constants.ProviderType) error); ok {
		r1 = rf(ctx, query, providerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataService_TranslateQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateQuery'
type MockDataService_TranslateQuery_Call struct {
	*mock.Call
}

// TranslateQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - providerType constants.ProviderType
func (_e *MockDataService_Expecter) TranslateQuery(ctx interface{}, query interface{}, providerType interface{}) *MockDataService_TranslateQuery_Call {
	return &MockDataService_TranslateQuery_Call{Call: _e.mock.On("TranslateQuery", ctx, query, providerType)}
}

func (_c *MockDataService_TranslateQuery_Call) Run(run func(ctx context.Context, query string, providerType constants.ProviderType)) *MockDataService_TranslateQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(constants.ProviderType))
	})
	return _c
}

func (_c *MockDataService_TranslateQuery_Call) Return(_a0 string, _a1 error) *MockDataService_TranslateQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataService_TranslateQuery_Call) RunAndReturn(run func(context.Context, string, constants.ProviderType) (string, error)) *MockDataService_TranslateQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataService creates a new instance of MockDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataService {
	mock := &MockDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockConnectorService is an autogenerated mock type for the ConnectorService type
type MockConnectorService struct {
	mock.Mock
}

type MockConnectorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectorService) EXPECT() *MockConnectorService_Expecter {
	return &MockConnectorService_Expecter{mock: &_m.Mock}
}

// GetConnectorByID provides a mock function with given fields: ctx, id
func (_m *MockConnectorService) GetConnectorByID(ctx context.Context, id uuid.UUID) (*models.Connector, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorByID")
	}

	var r0 *models.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Connector, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Connector); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectorService_GetConnectorByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectorByID'
type MockConnectorService_GetConnectorByID_Call struct {
	*mock.Call
}

// GetConnectorByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockConnectorService_Expecter) GetConnectorByID(ctx interface{}, id interface{}) *MockConnectorService_GetConnectorByID_Call {
	return &MockConnectorService_GetConnectorByID_Call{Call: _e.mock.On("GetConnectorByID", ctx, id)}
}

func (_c *MockConnectorService_GetConnectorByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockConnectorService_GetConnectorByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockConnectorService_GetConnectorByID_Call) Return(_a0 *models.Connector, _a1 error) *MockConnectorService_GetConnectorByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectorService_GetConnectorByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Connector, error)) *MockConnectorService_GetConnectorByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function with given fields: ctx
func (_m *MockConnectorService) ListConnectors(ctx context.Context) ([]models.ConnectorWithActiveConnectionsCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 []models.ConnectorWithActiveConnectionsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.ConnectorWithActiveConnectionsCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConnectorWithActiveConnectionsCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectorService_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type MockConnectorService_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectorService_Expecter) ListConnectors(ctx interface{}) *MockConnectorService_ListConnectors_Call {
	return &MockConnectorService_ListConnectors_Call{Call: _e.mock.On("ListConnectors", ctx)}
}

func (_c *MockConnectorService_ListConnectors_Call) Run(run func(ctx context.Context)) *MockConnectorService_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectorService_ListConnectors_Call) Return(_a0 []models.ConnectorWithActiveConnectionsCount, _a1 error) *MockConnectorService_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectorService_ListConnectors_Call) RunAndReturn(run func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)) *MockConnectorService_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectorService creates a new instance of MockConnectorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectorService {
	mock := &MockConnectorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockConnectorServiceStore is an autogenerated mock type for the ConnectorServiceStore type
type MockConnectorServiceStore struct {
	mock.Mock
}

type MockConnectorServiceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectorServiceStore) EXPECT() *MockConnectorServiceStore_Expecter {
	return &MockConnectorServiceStore_Expecter{mock: &_m.Mock}
}

// CreateConnector provides a mock function with given fields: ctx, connector
func (_m *MockConnectorServiceStore) CreateConnector(ctx context.Context, connector *models.Connector) error {
	ret := _m.Called(ctx, connector)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Connector) error); ok {
		r0 = rf(ctx, connector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectorServiceStore_CreateConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnector'
type MockConnectorServiceStore_CreateConnector_Call struct {
	*mock.Call
}

// CreateConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - connector *models.Connector
func (_e *MockConnectorServiceStore_Expecter) CreateConnector(ctx interface{}, connector interface{}) *MockConnectorServiceStore_CreateConnector_Call {
	return &MockConnectorServiceStore_CreateConnector_Call{Call: _e.mock.On("CreateConnector", ctx, connector)}
}

func (_c *MockConnectorServiceStore_CreateConnector_Call) Run(run func(ctx context.Context, connector *models.Connector)) *MockConnectorServiceStore_CreateConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Connector))
	})
	return _c
}

func (_c *MockConnectorServiceStore_CreateConnector_Call) Return(_a0 error) *MockConnectorServiceStore_CreateConnector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectorServiceStore_CreateConnector_Call) RunAndReturn(run func(context.Context, *models.Connector) error) *MockConnectorServiceStore_CreateConnector_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllConnectors provides a mock function with given fields: ctx
func (_m *MockConnectorServiceStore) GetAllConnectors(ctx context.Context) ([]models.ConnectorWithActiveConnectionsCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllConnectors")
	}

	var r0 []models.ConnectorWithActiveConnectionsCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.ConnectorWithActiveConnectionsCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConnectorWithActiveConnectionsCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectorServiceStore_GetAllConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllConnectors'
type MockConnectorServiceStore_GetAllConnectors_Call struct {
	*mock.Call
}

// GetAllConnectors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectorServiceStore_Expecter) GetAllConnectors(ctx interface{}) *MockConnectorServiceStore_GetAllConnectors_Call {
	return &MockConnectorServiceStore_GetAllConnectors_Call{Call: _e.mock.On("GetAllConnectors", ctx)}
}

func (_c *MockConnectorServiceStore_GetAllConnectors_Call) Run(run func(ctx context.Context)) *MockConnectorServiceStore_GetAllConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectorServiceStore_GetAllConnectors_Call) Return(_a0 []models.ConnectorWithActiveConnectionsCount, _a1 error) *MockConnectorServiceStore_GetAllConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectorServiceStore_GetAllConnectors_Call) RunAndReturn(run func(context.Context) ([]models.ConnectorWithActiveConnectionsCount, error)) *MockConnectorServiceStore_GetAllConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectorById provides a mock function with given fields: ctx, id
func (_m *MockConnectorServiceStore) GetConnectorById(ctx context.Context, id uuid.UUID) (*models.Connector, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorById")
	}

	var r0 *models.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Connector, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Connector); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectorServiceStore_GetConnectorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectorById'
type MockConnectorServiceStore_GetConnectorById_Call struct {
	*mock.Call
}

// GetConnectorById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockConnectorServiceStore_Expecter) GetConnectorById(ctx interface{}, id interface{}) *MockConnectorServiceStore_GetConnectorById_Call {
	return &MockConnectorServiceStore_GetConnectorById_Call{Call: _e.mock.On("GetConnectorById", ctx, id)}
}

func (_c *MockConnectorServiceStore_GetConnectorById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockConnectorServiceStore_GetConnectorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockConnectorServiceStore_GetConnectorById_Call) Return(_a0 *models.Connector, _a1 error) *MockConnectorServiceStore_GetConnectorById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectorServiceStore_GetConnectorById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Connector, error)) *MockConnectorServiceStore_GetConnectorById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectorServiceStore creates a new instance of MockConnectorServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectorServiceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectorServiceStore {
	mock := &MockConnectorServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

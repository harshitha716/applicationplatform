// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_mailer

import (
	context "context"

	mailer "github.com/Zampfi/application-platform/services/api/core/mailer"
	mock "github.com/stretchr/testify/mock"
)

// MockMailerService is an autogenerated mock type for the MailerService type
type MockMailerService struct {
	mock.Mock
}

type MockMailerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailerService) EXPECT() *MockMailerService_Expecter {
	return &MockMailerService_Expecter{mock: &_m.Mock}
}

// SendInvitationEmail provides a mock function with given fields: ctx, data
func (_m *MockMailerService) SendInvitationEmail(ctx context.Context, data mailer.InvitationEmailData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mailer.InvitationEmailData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailerService_SendInvitationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInvitationEmail'
type MockMailerService_SendInvitationEmail_Call struct {
	*mock.Call
}

// SendInvitationEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - data mailer.InvitationEmailData
func (_e *MockMailerService_Expecter) SendInvitationEmail(ctx interface{}, data interface{}) *MockMailerService_SendInvitationEmail_Call {
	return &MockMailerService_SendInvitationEmail_Call{Call: _e.mock.On("SendInvitationEmail", ctx, data)}
}

func (_c *MockMailerService_SendInvitationEmail_Call) Run(run func(ctx context.Context, data mailer.InvitationEmailData)) *MockMailerService_SendInvitationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mailer.InvitationEmailData))
	})
	return _c
}

func (_c *MockMailerService_SendInvitationEmail_Call) Return(_a0 error) *MockMailerService_SendInvitationEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailerService_SendInvitationEmail_Call) RunAndReturn(run func(context.Context, mailer.InvitationEmailData) error) *MockMailerService_SendInvitationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailerService creates a new instance of MockMailerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailerService {
	mock := &MockMailerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

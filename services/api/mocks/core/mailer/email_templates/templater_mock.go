// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_emailtemplates

import mock "github.com/stretchr/testify/mock"

// MockTemplater is an autogenerated mock type for the Templater type
type MockTemplater struct {
	mock.Mock
}

type MockTemplater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplater) EXPECT() *MockTemplater_Expecter {
	return &MockTemplater_Expecter{mock: &_m.Mock}
}

// GetTemplate provides a mock function with given fields: templateID, templatesPath, data
func (_m *MockTemplater) GetTemplate(templateID string, templatesPath string, data interface{}) (string, error) {
	ret := _m.Called(templateID, templatesPath, data)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (string, error)); ok {
		return rf(templateID, templatesPath, data)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) string); ok {
		r0 = rf(templateID, templatesPath, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(templateID, templatesPath, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplater_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockTemplater_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - templateID string
//   - templatesPath string
//   - data interface{}
func (_e *MockTemplater_Expecter) GetTemplate(templateID interface{}, templatesPath interface{}, data interface{}) *MockTemplater_GetTemplate_Call {
	return &MockTemplater_GetTemplate_Call{Call: _e.mock.On("GetTemplate", templateID, templatesPath, data)}
}

func (_c *MockTemplater_GetTemplate_Call) Run(run func(templateID string, templatesPath string, data interface{})) *MockTemplater_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockTemplater_GetTemplate_Call) Return(_a0 string, _a1 error) *MockTemplater_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplater_GetTemplate_Call) RunAndReturn(run func(string, string, interface{}) (string, error)) *MockTemplater_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplater creates a new instance of MockTemplater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplater {
	mock := &MockTemplater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

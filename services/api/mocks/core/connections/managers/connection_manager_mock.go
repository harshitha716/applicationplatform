// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_manager

import (
	models "github.com/Zampfi/application-platform/services/api/db/models"
	temporalmodels "github.com/Zampfi/workflow-sdk-go/workflowmanagers/temporal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockConnectionManager is an autogenerated mock type for the ConnectionManager type
type MockConnectionManager struct {
	mock.Mock
}

type MockConnectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionManager) EXPECT() *MockConnectionManager_Expecter {
	return &MockConnectionManager_Expecter{mock: &_m.Mock}
}

// CheckConnection provides a mock function with no fields
func (_m *MockConnectionManager) CheckConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionManager_CheckConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckConnection'
type MockConnectionManager_CheckConnection_Call struct {
	*mock.Call
}

// CheckConnection is a helper method to define mock.On call
func (_e *MockConnectionManager_Expecter) CheckConnection() *MockConnectionManager_CheckConnection_Call {
	return &MockConnectionManager_CheckConnection_Call{Call: _e.mock.On("CheckConnection")}
}

func (_c *MockConnectionManager_CheckConnection_Call) Run(run func()) *MockConnectionManager_CheckConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionManager_CheckConnection_Call) Return(_a0 error) *MockConnectionManager_CheckConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionManager_CheckConnection_Call) RunAndReturn(run func() error) *MockConnectionManager_CheckConnection_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractAndValidateDefaultSchedules provides a mock function with given fields: connectionId, organizationId, config
func (_m *MockConnectionManager) ExtractAndValidateDefaultSchedules(connectionId uuid.UUID, organizationId uuid.UUID, config models.CreateConnectionParams) ([]models.CreateScheduleParams, error) {
	ret := _m.Called(connectionId, organizationId, config)

	if len(ret) == 0 {
		panic("no return value specified for ExtractAndValidateDefaultSchedules")
	}

	var r0 []models.CreateScheduleParams
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, models.CreateConnectionParams) ([]models.CreateScheduleParams, error)); ok {
		return rf(connectionId, organizationId, config)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, models.CreateConnectionParams) []models.CreateScheduleParams); ok {
		r0 = rf(connectionId, organizationId, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CreateScheduleParams)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, models.CreateConnectionParams) error); ok {
		r1 = rf(connectionId, organizationId, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionManager_ExtractAndValidateDefaultSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractAndValidateDefaultSchedules'
type MockConnectionManager_ExtractAndValidateDefaultSchedules_Call struct {
	*mock.Call
}

// ExtractAndValidateDefaultSchedules is a helper method to define mock.On call
//   - connectionId uuid.UUID
//   - organizationId uuid.UUID
//   - config models.CreateConnectionParams
func (_e *MockConnectionManager_Expecter) ExtractAndValidateDefaultSchedules(connectionId interface{}, organizationId interface{}, config interface{}) *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call {
	return &MockConnectionManager_ExtractAndValidateDefaultSchedules_Call{Call: _e.mock.On("ExtractAndValidateDefaultSchedules", connectionId, organizationId, config)}
}

func (_c *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call) Run(run func(connectionId uuid.UUID, organizationId uuid.UUID, config models.CreateConnectionParams)) *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(models.CreateConnectionParams))
	})
	return _c
}

func (_c *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call) Return(_a0 []models.CreateScheduleParams, _a1 error) *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, models.CreateConnectionParams) ([]models.CreateScheduleParams, error)) *MockConnectionManager_ExtractAndValidateDefaultSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractAndValidateTemporalParams provides a mock function with given fields: schedules
func (_m *MockConnectionManager) ExtractAndValidateTemporalParams(schedules []models.CreateScheduleParams) ([]temporalmodels.ExecuteWorkflowWithScheduleParams, error) {
	ret := _m.Called(schedules)

	if len(ret) == 0 {
		panic("no return value specified for ExtractAndValidateTemporalParams")
	}

	var r0 []temporalmodels.ExecuteWorkflowWithScheduleParams
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.CreateScheduleParams) ([]temporalmodels.ExecuteWorkflowWithScheduleParams, error)); ok {
		return rf(schedules)
	}
	if rf, ok := ret.Get(0).(func([]models.CreateScheduleParams) []temporalmodels.ExecuteWorkflowWithScheduleParams); ok {
		r0 = rf(schedules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]temporalmodels.ExecuteWorkflowWithScheduleParams)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.CreateScheduleParams) error); ok {
		r1 = rf(schedules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionManager_ExtractAndValidateTemporalParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractAndValidateTemporalParams'
type MockConnectionManager_ExtractAndValidateTemporalParams_Call struct {
	*mock.Call
}

// ExtractAndValidateTemporalParams is a helper method to define mock.On call
//   - schedules []models.CreateScheduleParams
func (_e *MockConnectionManager_Expecter) ExtractAndValidateTemporalParams(schedules interface{}) *MockConnectionManager_ExtractAndValidateTemporalParams_Call {
	return &MockConnectionManager_ExtractAndValidateTemporalParams_Call{Call: _e.mock.On("ExtractAndValidateTemporalParams", schedules)}
}

func (_c *MockConnectionManager_ExtractAndValidateTemporalParams_Call) Run(run func(schedules []models.CreateScheduleParams)) *MockConnectionManager_ExtractAndValidateTemporalParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.CreateScheduleParams))
	})
	return _c
}

func (_c *MockConnectionManager_ExtractAndValidateTemporalParams_Call) Return(_a0 []temporalmodels.ExecuteWorkflowWithScheduleParams, _a1 error) *MockConnectionManager_ExtractAndValidateTemporalParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionManager_ExtractAndValidateTemporalParams_Call) RunAndReturn(run func([]models.CreateScheduleParams) ([]temporalmodels.ExecuteWorkflowWithScheduleParams, error)) *MockConnectionManager_ExtractAndValidateTemporalParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultWorkflowType provides a mock function with no fields
func (_m *MockConnectionManager) GetDefaultWorkflowType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultWorkflowType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConnectionManager_GetDefaultWorkflowType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultWorkflowType'
type MockConnectionManager_GetDefaultWorkflowType_Call struct {
	*mock.Call
}

// GetDefaultWorkflowType is a helper method to define mock.On call
func (_e *MockConnectionManager_Expecter) GetDefaultWorkflowType() *MockConnectionManager_GetDefaultWorkflowType_Call {
	return &MockConnectionManager_GetDefaultWorkflowType_Call{Call: _e.mock.On("GetDefaultWorkflowType")}
}

func (_c *MockConnectionManager_GetDefaultWorkflowType_Call) Run(run func()) *MockConnectionManager_GetDefaultWorkflowType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionManager_GetDefaultWorkflowType_Call) Return(_a0 string) *MockConnectionManager_GetDefaultWorkflowType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionManager_GetDefaultWorkflowType_Call) RunAndReturn(run func() string) *MockConnectionManager_GetDefaultWorkflowType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionManager creates a new instance of MockConnectionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionManager {
	mock := &MockConnectionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

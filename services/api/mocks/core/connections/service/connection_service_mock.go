// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	service "github.com/Zampfi/application-platform/services/api/core/connections/service"

	uuid "github.com/google/uuid"
)

// MockConnectionService is an autogenerated mock type for the ConnectionService type
type MockConnectionService struct {
	mock.Mock
}

type MockConnectionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionService) EXPECT() *MockConnectionService_Expecter {
	return &MockConnectionService_Expecter{mock: &_m.Mock}
}

// CreateConnection provides a mock function with given fields: ctx, params, tx
func (_m *MockConnectionService) CreateConnection(ctx context.Context, params models.CreateConnectionParams, tx service.ConnectionServiceStore) (uuid.UUID, error) {
	ret := _m.Called(ctx, params, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateConnectionParams, service.ConnectionServiceStore) (uuid.UUID, error)); ok {
		return rf(ctx, params, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateConnectionParams, service.ConnectionServiceStore) uuid.UUID); ok {
		r0 = rf(ctx, params, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateConnectionParams, service.ConnectionServiceStore) error); ok {
		r1 = rf(ctx, params, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionService_CreateConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnection'
type MockConnectionService_CreateConnection_Call struct {
	*mock.Call
}

// CreateConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.CreateConnectionParams
//   - tx service.ConnectionServiceStore
func (_e *MockConnectionService_Expecter) CreateConnection(ctx interface{}, params interface{}, tx interface{}) *MockConnectionService_CreateConnection_Call {
	return &MockConnectionService_CreateConnection_Call{Call: _e.mock.On("CreateConnection", ctx, params, tx)}
}

func (_c *MockConnectionService_CreateConnection_Call) Run(run func(ctx context.Context, params models.CreateConnectionParams, tx service.ConnectionServiceStore)) *MockConnectionService_CreateConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateConnectionParams), args[2].(service.ConnectionServiceStore))
	})
	return _c
}

func (_c *MockConnectionService_CreateConnection_Call) Return(_a0 uuid.UUID, _a1 error) *MockConnectionService_CreateConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionService_CreateConnection_Call) RunAndReturn(run func(context.Context, models.CreateConnectionParams, service.ConnectionServiceStore) (uuid.UUID, error)) *MockConnectionService_CreateConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionByID provides a mock function with given fields: ctx, connectionId
func (_m *MockConnectionService) GetConnectionByID(ctx context.Context, connectionId uuid.UUID) (models.Connection, error) {
	ret := _m.Called(ctx, connectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionByID")
	}

	var r0 models.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Connection, error)); ok {
		return rf(ctx, connectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Connection); ok {
		r0 = rf(ctx, connectionId)
	} else {
		r0 = ret.Get(0).(models.Connection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, connectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionService_GetConnectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionByID'
type MockConnectionService_GetConnectionByID_Call struct {
	*mock.Call
}

// GetConnectionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionId uuid.UUID
func (_e *MockConnectionService_Expecter) GetConnectionByID(ctx interface{}, connectionId interface{}) *MockConnectionService_GetConnectionByID_Call {
	return &MockConnectionService_GetConnectionByID_Call{Call: _e.mock.On("GetConnectionByID", ctx, connectionId)}
}

func (_c *MockConnectionService_GetConnectionByID_Call) Run(run func(ctx context.Context, connectionId uuid.UUID)) *MockConnectionService_GetConnectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockConnectionService_GetConnectionByID_Call) Return(_a0 models.Connection, _a1 error) *MockConnectionService_GetConnectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionService_GetConnectionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.Connection, error)) *MockConnectionService_GetConnectionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnections provides a mock function with given fields: ctx, tx
func (_m *MockConnectionService) GetConnections(ctx context.Context, tx service.ConnectionServiceStore) ([]models.Connection, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 []models.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ConnectionServiceStore) ([]models.Connection, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.ConnectionServiceStore) []models.Connection); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.ConnectionServiceStore) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionService_GetConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnections'
type MockConnectionService_GetConnections_Call struct {
	*mock.Call
}

// GetConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - tx service.ConnectionServiceStore
func (_e *MockConnectionService_Expecter) GetConnections(ctx interface{}, tx interface{}) *MockConnectionService_GetConnections_Call {
	return &MockConnectionService_GetConnections_Call{Call: _e.mock.On("GetConnections", ctx, tx)}
}

func (_c *MockConnectionService_GetConnections_Call) Run(run func(ctx context.Context, tx service.ConnectionServiceStore)) *MockConnectionService_GetConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ConnectionServiceStore))
	})
	return _c
}

func (_c *MockConnectionService_GetConnections_Call) Return(_a0 []models.Connection, _a1 error) *MockConnectionService_GetConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionService_GetConnections_Call) RunAndReturn(run func(context.Context, service.ConnectionServiceStore) ([]models.Connection, error)) *MockConnectionService_GetConnections_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionService creates a new instance of MockConnectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionService {
	mock := &MockConnectionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_pages

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	pages "github.com/Zampfi/application-platform/services/api/core/pages"

	uuid "github.com/google/uuid"
)

// MockPagesService is an autogenerated mock type for the PagesService type
type MockPagesService struct {
	mock.Mock
}

type MockPagesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPagesService) EXPECT() *MockPagesService_Expecter {
	return &MockPagesService_Expecter{mock: &_m.Mock}
}

// AddAudienceToPage provides a mock function with given fields: ctx, pageId, audienceType, audienceId, privilege
func (_m *MockPagesService) AddAudienceToPage(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for AddAudienceToPage")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_AddAudienceToPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAudienceToPage'
type MockPagesService_AddAudienceToPage_Call struct {
	*mock.Call
}

// AddAudienceToPage is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockPagesService_Expecter) AddAudienceToPage(ctx interface{}, pageId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockPagesService_AddAudienceToPage_Call {
	return &MockPagesService_AddAudienceToPage_Call{Call: _e.mock.On("AddAudienceToPage", ctx, pageId, audienceType, audienceId, privilege)}
}

func (_c *MockPagesService_AddAudienceToPage_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockPagesService_AddAudienceToPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockPagesService_AddAudienceToPage_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockPagesService_AddAudienceToPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_AddAudienceToPage_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockPagesService_AddAudienceToPage_Call {
	_c.Call.Return(run)
	return _c
}

// BulkAddAudienceToPage provides a mock function with given fields: ctx, pageId, payload
func (_m *MockPagesService) BulkAddAudienceToPage(ctx context.Context, pageId uuid.UUID, payload pages.BulkAddPageAudiencePayload) ([]*models.ResourceAudiencePolicy, pages.BulkAddPageAudienceErrors) {
	ret := _m.Called(ctx, pageId, payload)

	if len(ret) == 0 {
		panic("no return value specified for BulkAddAudienceToPage")
	}

	var r0 []*models.ResourceAudiencePolicy
	var r1 pages.BulkAddPageAudienceErrors
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, pages.BulkAddPageAudiencePayload) ([]*models.ResourceAudiencePolicy, pages.BulkAddPageAudienceErrors)); ok {
		return rf(ctx, pageId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, pages.BulkAddPageAudiencePayload) []*models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, pages.BulkAddPageAudiencePayload) pages.BulkAddPageAudienceErrors); ok {
		r1 = rf(ctx, pageId, payload)
	} else {
		r1 = ret.Get(1).(pages.BulkAddPageAudienceErrors)
	}

	return r0, r1
}

// MockPagesService_BulkAddAudienceToPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkAddAudienceToPage'
type MockPagesService_BulkAddAudienceToPage_Call struct {
	*mock.Call
}

// BulkAddAudienceToPage is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - payload pages.BulkAddPageAudiencePayload
func (_e *MockPagesService_Expecter) BulkAddAudienceToPage(ctx interface{}, pageId interface{}, payload interface{}) *MockPagesService_BulkAddAudienceToPage_Call {
	return &MockPagesService_BulkAddAudienceToPage_Call{Call: _e.mock.On("BulkAddAudienceToPage", ctx, pageId, payload)}
}

func (_c *MockPagesService_BulkAddAudienceToPage_Call) Run(run func(ctx context.Context, pageId uuid.UUID, payload pages.BulkAddPageAudiencePayload)) *MockPagesService_BulkAddAudienceToPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(pages.BulkAddPageAudiencePayload))
	})
	return _c
}

func (_c *MockPagesService_BulkAddAudienceToPage_Call) Return(_a0 []*models.ResourceAudiencePolicy, _a1 pages.BulkAddPageAudienceErrors) *MockPagesService_BulkAddAudienceToPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_BulkAddAudienceToPage_Call) RunAndReturn(run func(context.Context, uuid.UUID, pages.BulkAddPageAudiencePayload) ([]*models.ResourceAudiencePolicy, pages.BulkAddPageAudienceErrors)) *MockPagesService_BulkAddAudienceToPage_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageAudiences provides a mock function with given fields: ctx, pageId
func (_m *MockPagesService) GetPageAudiences(ctx context.Context, pageId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageAudiences")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_GetPageAudiences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageAudiences'
type MockPagesService_GetPageAudiences_Call struct {
	*mock.Call
}

// GetPageAudiences is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockPagesService_Expecter) GetPageAudiences(ctx interface{}, pageId interface{}) *MockPagesService_GetPageAudiences_Call {
	return &MockPagesService_GetPageAudiences_Call{Call: _e.mock.On("GetPageAudiences", ctx, pageId)}
}

func (_c *MockPagesService_GetPageAudiences_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockPagesService_GetPageAudiences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPagesService_GetPageAudiences_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockPagesService_GetPageAudiences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_GetPageAudiences_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockPagesService_GetPageAudiences_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageByID provides a mock function with given fields: ctx, pageId
func (_m *MockPagesService) GetPageByID(ctx context.Context, pageId uuid.UUID) (*models.Page, error) {
	ret := _m.Called(ctx, pageId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageByID")
	}

	var r0 *models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Page, error)); ok {
		return rf(ctx, pageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Page); ok {
		r0 = rf(ctx, pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_GetPageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageByID'
type MockPagesService_GetPageByID_Call struct {
	*mock.Call
}

// GetPageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
func (_e *MockPagesService_Expecter) GetPageByID(ctx interface{}, pageId interface{}) *MockPagesService_GetPageByID_Call {
	return &MockPagesService_GetPageByID_Call{Call: _e.mock.On("GetPageByID", ctx, pageId)}
}

func (_c *MockPagesService_GetPageByID_Call) Run(run func(ctx context.Context, pageId uuid.UUID)) *MockPagesService_GetPageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPagesService_GetPageByID_Call) Return(_a0 *models.Page, _a1 error) *MockPagesService_GetPageByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_GetPageByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Page, error)) *MockPagesService_GetPageByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesAll provides a mock function with given fields: ctx
func (_m *MockPagesService) GetPagesAll(ctx context.Context) ([]models.Page, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesAll")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Page, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Page); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_GetPagesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesAll'
type MockPagesService_GetPagesAll_Call struct {
	*mock.Call
}

// GetPagesAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPagesService_Expecter) GetPagesAll(ctx interface{}) *MockPagesService_GetPagesAll_Call {
	return &MockPagesService_GetPagesAll_Call{Call: _e.mock.On("GetPagesAll", ctx)}
}

func (_c *MockPagesService_GetPagesAll_Call) Run(run func(ctx context.Context)) *MockPagesService_GetPagesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPagesService_GetPagesAll_Call) Return(_a0 []models.Page, _a1 error) *MockPagesService_GetPagesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_GetPagesAll_Call) RunAndReturn(run func(context.Context) ([]models.Page, error)) *MockPagesService_GetPagesAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetPagesByOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *MockPagesService) GetPagesByOrganizationId(ctx context.Context, organizationId uuid.UUID) ([]models.Page, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPagesByOrganizationId")
	}

	var r0 []models.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Page, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Page); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_GetPagesByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPagesByOrganizationId'
type MockPagesService_GetPagesByOrganizationId_Call struct {
	*mock.Call
}

// GetPagesByOrganizationId is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
func (_e *MockPagesService_Expecter) GetPagesByOrganizationId(ctx interface{}, organizationId interface{}) *MockPagesService_GetPagesByOrganizationId_Call {
	return &MockPagesService_GetPagesByOrganizationId_Call{Call: _e.mock.On("GetPagesByOrganizationId", ctx, organizationId)}
}

func (_c *MockPagesService_GetPagesByOrganizationId_Call) Run(run func(ctx context.Context, organizationId uuid.UUID)) *MockPagesService_GetPagesByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPagesService_GetPagesByOrganizationId_Call) Return(_a0 []models.Page, _a1 error) *MockPagesService_GetPagesByOrganizationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_GetPagesByOrganizationId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.Page, error)) *MockPagesService_GetPagesByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAudienceFromPage provides a mock function with given fields: ctx, pageId, audienceId
func (_m *MockPagesService) RemoveAudienceFromPage(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, pageId, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAudienceFromPage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, pageId, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPagesService_RemoveAudienceFromPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAudienceFromPage'
type MockPagesService_RemoveAudienceFromPage_Call struct {
	*mock.Call
}

// RemoveAudienceFromPage is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceId uuid.UUID
func (_e *MockPagesService_Expecter) RemoveAudienceFromPage(ctx interface{}, pageId interface{}, audienceId interface{}) *MockPagesService_RemoveAudienceFromPage_Call {
	return &MockPagesService_RemoveAudienceFromPage_Call{Call: _e.mock.On("RemoveAudienceFromPage", ctx, pageId, audienceId)}
}

func (_c *MockPagesService_RemoveAudienceFromPage_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID)) *MockPagesService_RemoveAudienceFromPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockPagesService_RemoveAudienceFromPage_Call) Return(_a0 error) *MockPagesService_RemoveAudienceFromPage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPagesService_RemoveAudienceFromPage_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockPagesService_RemoveAudienceFromPage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePageAudiencePrivilege provides a mock function with given fields: ctx, pageId, audienceId, privilege
func (_m *MockPagesService) UpdatePageAudiencePrivilege(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, pageId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePageAudiencePrivilege")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, pageId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, pageId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, pageId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPagesService_UpdatePageAudiencePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePageAudiencePrivilege'
type MockPagesService_UpdatePageAudiencePrivilege_Call struct {
	*mock.Call
}

// UpdatePageAudiencePrivilege is a helper method to define mock.On call
//   - ctx context.Context
//   - pageId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockPagesService_Expecter) UpdatePageAudiencePrivilege(ctx interface{}, pageId interface{}, audienceId interface{}, privilege interface{}) *MockPagesService_UpdatePageAudiencePrivilege_Call {
	return &MockPagesService_UpdatePageAudiencePrivilege_Call{Call: _e.mock.On("UpdatePageAudiencePrivilege", ctx, pageId, audienceId, privilege)}
}

func (_c *MockPagesService_UpdatePageAudiencePrivilege_Call) Run(run func(ctx context.Context, pageId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockPagesService_UpdatePageAudiencePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockPagesService_UpdatePageAudiencePrivilege_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockPagesService_UpdatePageAudiencePrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPagesService_UpdatePageAudiencePrivilege_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockPagesService_UpdatePageAudiencePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPagesService creates a new instance of MockPagesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPagesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPagesService {
	mock := &MockPagesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/db/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Zampfi/application-platform/services/api/db/store"

	uuid "github.com/google/uuid"
)

// MockDatasetServiceStore is an autogenerated mock type for the DatasetServiceStore type
type MockDatasetServiceStore struct {
	mock.Mock
}

type MockDatasetServiceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatasetServiceStore) EXPECT() *MockDatasetServiceStore_Expecter {
	return &MockDatasetServiceStore_Expecter{mock: &_m.Mock}
}

// CreateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetServiceStore) CreateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_CreateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataset'
type MockDatasetServiceStore_CreateDataset_Call struct {
	*mock.Call
}

// CreateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetServiceStore_Expecter) CreateDataset(ctx interface{}, dataset interface{}) *MockDatasetServiceStore_CreateDataset_Call {
	return &MockDatasetServiceStore_CreateDataset_Call{Call: _e.mock.On("CreateDataset", ctx, dataset)}
}

func (_c *MockDatasetServiceStore_CreateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetServiceStore_CreateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetServiceStore_CreateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockDatasetServiceStore_CreateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_CreateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockDatasetServiceStore_CreateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetAction provides a mock function with given fields: ctx, organizationId, params
func (_m *MockDatasetServiceStore) CreateDatasetAction(ctx context.Context, organizationId uuid.UUID, params models.CreateDatasetActionParams) error {
	ret := _m.Called(ctx, organizationId, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetAction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.CreateDatasetActionParams) error); ok {
		r0 = rf(ctx, organizationId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_CreateDatasetAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetAction'
type MockDatasetServiceStore_CreateDatasetAction_Call struct {
	*mock.Call
}

// CreateDatasetAction is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - params models.CreateDatasetActionParams
func (_e *MockDatasetServiceStore_Expecter) CreateDatasetAction(ctx interface{}, organizationId interface{}, params interface{}) *MockDatasetServiceStore_CreateDatasetAction_Call {
	return &MockDatasetServiceStore_CreateDatasetAction_Call{Call: _e.mock.On("CreateDatasetAction", ctx, organizationId, params)}
}

func (_c *MockDatasetServiceStore_CreateDatasetAction_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, params models.CreateDatasetActionParams)) *MockDatasetServiceStore_CreateDatasetAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.CreateDatasetActionParams))
	})
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetAction_Call) Return(_a0 error) *MockDatasetServiceStore_CreateDatasetAction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetAction_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.CreateDatasetActionParams) error) *MockDatasetServiceStore_CreateDatasetAction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetFileUpload provides a mock function with given fields: ctx, datasetFileUpload
func (_m *MockDatasetServiceStore) CreateDatasetFileUpload(ctx context.Context, datasetFileUpload *models.DatasetFileUpload) (*models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, datasetFileUpload)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetFileUpload")
	}

	var r0 *models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DatasetFileUpload) (*models.DatasetFileUpload, error)); ok {
		return rf(ctx, datasetFileUpload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DatasetFileUpload) *models.DatasetFileUpload); ok {
		r0 = rf(ctx, datasetFileUpload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.DatasetFileUpload) error); ok {
		r1 = rf(ctx, datasetFileUpload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_CreateDatasetFileUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetFileUpload'
type MockDatasetServiceStore_CreateDatasetFileUpload_Call struct {
	*mock.Call
}

// CreateDatasetFileUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetFileUpload *models.DatasetFileUpload
func (_e *MockDatasetServiceStore_Expecter) CreateDatasetFileUpload(ctx interface{}, datasetFileUpload interface{}) *MockDatasetServiceStore_CreateDatasetFileUpload_Call {
	return &MockDatasetServiceStore_CreateDatasetFileUpload_Call{Call: _e.mock.On("CreateDatasetFileUpload", ctx, datasetFileUpload)}
}

func (_c *MockDatasetServiceStore_CreateDatasetFileUpload_Call) Run(run func(ctx context.Context, datasetFileUpload *models.DatasetFileUpload)) *MockDatasetServiceStore_CreateDatasetFileUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.DatasetFileUpload))
	})
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetFileUpload_Call) Return(_a0 *models.DatasetFileUpload, _a1 error) *MockDatasetServiceStore_CreateDatasetFileUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetFileUpload_Call) RunAndReturn(run func(context.Context, *models.DatasetFileUpload) (*models.DatasetFileUpload, error)) *MockDatasetServiceStore_CreateDatasetFileUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockDatasetServiceStore) CreateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_CreateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetPolicy'
type MockDatasetServiceStore_CreateDatasetPolicy_Call struct {
	*mock.Call
}

// CreateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetServiceStore_Expecter) CreateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockDatasetServiceStore_CreateDatasetPolicy_Call {
	return &MockDatasetServiceStore_CreateDatasetPolicy_Call{Call: _e.mock.On("CreateDatasetPolicy", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockDatasetServiceStore_CreateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetServiceStore_CreateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetServiceStore_CreateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_CreateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetServiceStore_CreateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetServiceStore) DeleteDataset(ctx context.Context, dataset models.Dataset) error {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) error); ok {
		r0 = rf(ctx, dataset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_DeleteDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataset'
type MockDatasetServiceStore_DeleteDataset_Call struct {
	*mock.Call
}

// DeleteDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetServiceStore_Expecter) DeleteDataset(ctx interface{}, dataset interface{}) *MockDatasetServiceStore_DeleteDataset_Call {
	return &MockDatasetServiceStore_DeleteDataset_Call{Call: _e.mock.On("DeleteDataset", ctx, dataset)}
}

func (_c *MockDatasetServiceStore_DeleteDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetServiceStore_DeleteDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetServiceStore_DeleteDataset_Call) Return(_a0 error) *MockDatasetServiceStore_DeleteDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_DeleteDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) error) *MockDatasetServiceStore_DeleteDataset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceType, audienceId
func (_m *MockDatasetServiceStore) DeleteDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_DeleteDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatasetPolicy'
type MockDatasetServiceStore_DeleteDatasetPolicy_Call struct {
	*mock.Call
}

// DeleteDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
func (_e *MockDatasetServiceStore_Expecter) DeleteDatasetPolicy(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}) *MockDatasetServiceStore_DeleteDatasetPolicy_Call {
	return &MockDatasetServiceStore_DeleteDatasetPolicy_Call{Call: _e.mock.On("DeleteDatasetPolicy", ctx, datasetId, audienceType, audienceId)}
}

func (_c *MockDatasetServiceStore_DeleteDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID)) *MockDatasetServiceStore_DeleteDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetServiceStore_DeleteDatasetPolicy_Call) Return(_a0 error) *MockDatasetServiceStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_DeleteDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID) error) *MockDatasetServiceStore_DeleteDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetActionFromActionId provides a mock function with given fields: ctx, actionId
func (_m *MockDatasetServiceStore) GetDatasetActionFromActionId(ctx context.Context, actionId string) (*models.DatasetAction, error) {
	ret := _m.Called(ctx, actionId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetActionFromActionId")
	}

	var r0 *models.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.DatasetAction, error)); ok {
		return rf(ctx, actionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.DatasetAction); ok {
		r0 = rf(ctx, actionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetActionFromActionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetActionFromActionId'
type MockDatasetServiceStore_GetDatasetActionFromActionId_Call struct {
	*mock.Call
}

// GetDatasetActionFromActionId is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
func (_e *MockDatasetServiceStore_Expecter) GetDatasetActionFromActionId(ctx interface{}, actionId interface{}) *MockDatasetServiceStore_GetDatasetActionFromActionId_Call {
	return &MockDatasetServiceStore_GetDatasetActionFromActionId_Call{Call: _e.mock.On("GetDatasetActionFromActionId", ctx, actionId)}
}

func (_c *MockDatasetServiceStore_GetDatasetActionFromActionId_Call) Run(run func(ctx context.Context, actionId string)) *MockDatasetServiceStore_GetDatasetActionFromActionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetActionFromActionId_Call) Return(_a0 *models.DatasetAction, _a1 error) *MockDatasetServiceStore_GetDatasetActionFromActionId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetActionFromActionId_Call) RunAndReturn(run func(context.Context, string) (*models.DatasetAction, error)) *MockDatasetServiceStore_GetDatasetActionFromActionId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetActions provides a mock function with given fields: ctx, organizationId, filters
func (_m *MockDatasetServiceStore) GetDatasetActions(ctx context.Context, organizationId uuid.UUID, filters models.DatasetActionFilters) ([]models.DatasetAction, error) {
	ret := _m.Called(ctx, organizationId, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetActions")
	}

	var r0 []models.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]models.DatasetAction, error)); ok {
		return rf(ctx, organizationId, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) []models.DatasetAction); ok {
		r0 = rf(ctx, organizationId, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DatasetAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.DatasetActionFilters) error); ok {
		r1 = rf(ctx, organizationId, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetActions'
type MockDatasetServiceStore_GetDatasetActions_Call struct {
	*mock.Call
}

// GetDatasetActions is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId uuid.UUID
//   - filters models.DatasetActionFilters
func (_e *MockDatasetServiceStore_Expecter) GetDatasetActions(ctx interface{}, organizationId interface{}, filters interface{}) *MockDatasetServiceStore_GetDatasetActions_Call {
	return &MockDatasetServiceStore_GetDatasetActions_Call{Call: _e.mock.On("GetDatasetActions", ctx, organizationId, filters)}
}

func (_c *MockDatasetServiceStore_GetDatasetActions_Call) Run(run func(ctx context.Context, organizationId uuid.UUID, filters models.DatasetActionFilters)) *MockDatasetServiceStore_GetDatasetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.DatasetActionFilters))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetActions_Call) Return(_a0 []models.DatasetAction, _a1 error) *MockDatasetServiceStore_GetDatasetActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetActions_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]models.DatasetAction, error)) *MockDatasetServiceStore_GetDatasetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetById provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetServiceStore) GetDatasetById(ctx context.Context, datasetId string) (*models.Dataset, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetById")
	}

	var r0 *models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Dataset, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Dataset); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetById'
type MockDatasetServiceStore_GetDatasetById_Call struct {
	*mock.Call
}

// GetDatasetById is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId string
func (_e *MockDatasetServiceStore_Expecter) GetDatasetById(ctx interface{}, datasetId interface{}) *MockDatasetServiceStore_GetDatasetById_Call {
	return &MockDatasetServiceStore_GetDatasetById_Call{Call: _e.mock.On("GetDatasetById", ctx, datasetId)}
}

func (_c *MockDatasetServiceStore_GetDatasetById_Call) Run(run func(ctx context.Context, datasetId string)) *MockDatasetServiceStore_GetDatasetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetById_Call) Return(_a0 *models.Dataset, _a1 error) *MockDatasetServiceStore_GetDatasetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetById_Call) RunAndReturn(run func(context.Context, string) (*models.Dataset, error)) *MockDatasetServiceStore_GetDatasetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetCount provides a mock function with given fields: ctx, filters
func (_m *MockDatasetServiceStore) GetDatasetCount(ctx context.Context, filters models.DatasetFilters) (int64, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) (int64, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) int64); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetCount'
type MockDatasetServiceStore_GetDatasetCount_Call struct {
	*mock.Call
}

// GetDatasetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockDatasetServiceStore_Expecter) GetDatasetCount(ctx interface{}, filters interface{}) *MockDatasetServiceStore_GetDatasetCount_Call {
	return &MockDatasetServiceStore_GetDatasetCount_Call{Call: _e.mock.On("GetDatasetCount", ctx, filters)}
}

func (_c *MockDatasetServiceStore_GetDatasetCount_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockDatasetServiceStore_GetDatasetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetCount_Call) Return(_a0 int64, _a1 error) *MockDatasetServiceStore_GetDatasetCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetCount_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) (int64, error)) *MockDatasetServiceStore_GetDatasetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetFileUploadByDatasetId provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetServiceStore) GetDatasetFileUploadByDatasetId(ctx context.Context, datasetId uuid.UUID) ([]models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetFileUploadByDatasetId")
	}

	var r0 []models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.DatasetFileUpload, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.DatasetFileUpload); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetFileUploadByDatasetId'
type MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call struct {
	*mock.Call
}

// GetDatasetFileUploadByDatasetId is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockDatasetServiceStore_Expecter) GetDatasetFileUploadByDatasetId(ctx interface{}, datasetId interface{}) *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call {
	return &MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call{Call: _e.mock.On("GetDatasetFileUploadByDatasetId", ctx, datasetId)}
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call) Return(_a0 []models.DatasetFileUpload, _a1 error) *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.DatasetFileUpload, error)) *MockDatasetServiceStore_GetDatasetFileUploadByDatasetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetFileUploadById provides a mock function with given fields: ctx, fileUploadId
func (_m *MockDatasetServiceStore) GetDatasetFileUploadById(ctx context.Context, fileUploadId uuid.UUID) (models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, fileUploadId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetFileUploadById")
	}

	var r0 models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.DatasetFileUpload, error)); ok {
		return rf(ctx, fileUploadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.DatasetFileUpload); ok {
		r0 = rf(ctx, fileUploadId)
	} else {
		r0 = ret.Get(0).(models.DatasetFileUpload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fileUploadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetFileUploadById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetFileUploadById'
type MockDatasetServiceStore_GetDatasetFileUploadById_Call struct {
	*mock.Call
}

// GetDatasetFileUploadById is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
func (_e *MockDatasetServiceStore_Expecter) GetDatasetFileUploadById(ctx interface{}, fileUploadId interface{}) *MockDatasetServiceStore_GetDatasetFileUploadById_Call {
	return &MockDatasetServiceStore_GetDatasetFileUploadById_Call{Call: _e.mock.On("GetDatasetFileUploadById", ctx, fileUploadId)}
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadById_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID)) *MockDatasetServiceStore_GetDatasetFileUploadById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadById_Call) Return(_a0 models.DatasetFileUpload, _a1 error) *MockDatasetServiceStore_GetDatasetFileUploadById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetFileUploadById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.DatasetFileUpload, error)) *MockDatasetServiceStore_GetDatasetFileUploadById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPolicies provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetServiceStore) GetDatasetPolicies(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPolicies")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPolicies'
type MockDatasetServiceStore_GetDatasetPolicies_Call struct {
	*mock.Call
}

// GetDatasetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockDatasetServiceStore_Expecter) GetDatasetPolicies(ctx interface{}, datasetId interface{}) *MockDatasetServiceStore_GetDatasetPolicies_Call {
	return &MockDatasetServiceStore_GetDatasetPolicies_Call{Call: _e.mock.On("GetDatasetPolicies", ctx, datasetId)}
}

func (_c *MockDatasetServiceStore_GetDatasetPolicies_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockDatasetServiceStore_GetDatasetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetPolicies_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockDatasetServiceStore_GetDatasetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetPolicies_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockDatasetServiceStore_GetDatasetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetPoliciesByEmail provides a mock function with given fields: ctx, datasetId, email
func (_m *MockDatasetServiceStore) GetDatasetPoliciesByEmail(ctx context.Context, datasetId uuid.UUID, email string) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, email)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetPoliciesByEmail")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, datasetId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetPoliciesByEmail'
type MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call struct {
	*mock.Call
}

// GetDatasetPoliciesByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - email string
func (_e *MockDatasetServiceStore_Expecter) GetDatasetPoliciesByEmail(ctx interface{}, datasetId interface{}, email interface{}) *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call {
	return &MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call{Call: _e.mock.On("GetDatasetPoliciesByEmail", ctx, datasetId, email)}
}

func (_c *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, email string)) *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]models.ResourceAudiencePolicy, error)) *MockDatasetServiceStore_GetDatasetPoliciesByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetsAll provides a mock function with given fields: ctx, filters
func (_m *MockDatasetServiceStore) GetDatasetsAll(ctx context.Context, filters models.DatasetFilters) ([]models.Dataset, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetsAll")
	}

	var r0 []models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) ([]models.Dataset, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetFilters) []models.Dataset); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetDatasetsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetsAll'
type MockDatasetServiceStore_GetDatasetsAll_Call struct {
	*mock.Call
}

// GetDatasetsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.DatasetFilters
func (_e *MockDatasetServiceStore_Expecter) GetDatasetsAll(ctx interface{}, filters interface{}) *MockDatasetServiceStore_GetDatasetsAll_Call {
	return &MockDatasetServiceStore_GetDatasetsAll_Call{Call: _e.mock.On("GetDatasetsAll", ctx, filters)}
}

func (_c *MockDatasetServiceStore_GetDatasetsAll_Call) Run(run func(ctx context.Context, filters models.DatasetFilters)) *MockDatasetServiceStore_GetDatasetsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetFilters))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetsAll_Call) Return(_a0 []models.Dataset, _a1 error) *MockDatasetServiceStore_GetDatasetsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetDatasetsAll_Call) RunAndReturn(run func(context.Context, models.DatasetFilters) ([]models.Dataset, error)) *MockDatasetServiceStore_GetDatasetsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlattenedResourceAudiencePolicies provides a mock function with given fields: ctx, filters
func (_m *MockDatasetServiceStore) GetFlattenedResourceAudiencePolicies(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetFlattenedResourceAudiencePolicies")
	}

	var r0 []models.FlattenedResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) []models.FlattenedResourceAudiencePolicy); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FlattenedResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlattenedResourceAudiencePolicies'
type MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call struct {
	*mock.Call
}

// GetFlattenedResourceAudiencePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - filters models.FlattenedResourceAudiencePoliciesFilters
func (_e *MockDatasetServiceStore_Expecter) GetFlattenedResourceAudiencePolicies(ctx interface{}, filters interface{}) *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call {
	return &MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call{Call: _e.mock.On("GetFlattenedResourceAudiencePolicies", ctx, filters)}
}

func (_c *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call) Run(run func(ctx context.Context, filters models.FlattenedResourceAudiencePoliciesFilters)) *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FlattenedResourceAudiencePoliciesFilters))
	})
	return _c
}

func (_c *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call) Return(_a0 []models.FlattenedResourceAudiencePolicy, _a1 error) *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call) RunAndReturn(run func(context.Context, models.FlattenedResourceAudiencePoliciesFilters) ([]models.FlattenedResourceAudiencePolicy, error)) *MockDatasetServiceStore_GetFlattenedResourceAudiencePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataset provides a mock function with given fields: ctx, dataset
func (_m *MockDatasetServiceStore) UpdateDataset(ctx context.Context, dataset models.Dataset) (uuid.UUID, error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) (uuid.UUID, error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) uuid.UUID); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Dataset) error); ok {
		r1 = rf(ctx, dataset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_UpdateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataset'
type MockDatasetServiceStore_UpdateDataset_Call struct {
	*mock.Call
}

// UpdateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - dataset models.Dataset
func (_e *MockDatasetServiceStore_Expecter) UpdateDataset(ctx interface{}, dataset interface{}) *MockDatasetServiceStore_UpdateDataset_Call {
	return &MockDatasetServiceStore_UpdateDataset_Call{Call: _e.mock.On("UpdateDataset", ctx, dataset)}
}

func (_c *MockDatasetServiceStore_UpdateDataset_Call) Run(run func(ctx context.Context, dataset models.Dataset)) *MockDatasetServiceStore_UpdateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDataset_Call) Return(_a0 uuid.UUID, _a1 error) *MockDatasetServiceStore_UpdateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDataset_Call) RunAndReturn(run func(context.Context, models.Dataset) (uuid.UUID, error)) *MockDatasetServiceStore_UpdateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionConfig provides a mock function with given fields: ctx, actionId, config
func (_m *MockDatasetServiceStore) UpdateDatasetActionConfig(ctx context.Context, actionId string, config map[string]interface{}) error {
	ret := _m.Called(ctx, actionId, config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, actionId, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_UpdateDatasetActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionConfig'
type MockDatasetServiceStore_UpdateDatasetActionConfig_Call struct {
	*mock.Call
}

// UpdateDatasetActionConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - config map[string]interface{}
func (_e *MockDatasetServiceStore_Expecter) UpdateDatasetActionConfig(ctx interface{}, actionId interface{}, config interface{}) *MockDatasetServiceStore_UpdateDatasetActionConfig_Call {
	return &MockDatasetServiceStore_UpdateDatasetActionConfig_Call{Call: _e.mock.On("UpdateDatasetActionConfig", ctx, actionId, config)}
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionConfig_Call) Run(run func(ctx context.Context, actionId string, config map[string]interface{})) *MockDatasetServiceStore_UpdateDatasetActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionConfig_Call) Return(_a0 error) *MockDatasetServiceStore_UpdateDatasetActionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionConfig_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *MockDatasetServiceStore_UpdateDatasetActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionStatus provides a mock function with given fields: ctx, actionId, status
func (_m *MockDatasetServiceStore) UpdateDatasetActionStatus(ctx context.Context, actionId string, status string) error {
	ret := _m.Called(ctx, actionId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, actionId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_UpdateDatasetActionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionStatus'
type MockDatasetServiceStore_UpdateDatasetActionStatus_Call struct {
	*mock.Call
}

// UpdateDatasetActionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - status string
func (_e *MockDatasetServiceStore_Expecter) UpdateDatasetActionStatus(ctx interface{}, actionId interface{}, status interface{}) *MockDatasetServiceStore_UpdateDatasetActionStatus_Call {
	return &MockDatasetServiceStore_UpdateDatasetActionStatus_Call{Call: _e.mock.On("UpdateDatasetActionStatus", ctx, actionId, status)}
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionStatus_Call) Run(run func(ctx context.Context, actionId string, status string)) *MockDatasetServiceStore_UpdateDatasetActionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionStatus_Call) Return(_a0 error) *MockDatasetServiceStore_UpdateDatasetActionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetActionStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDatasetServiceStore_UpdateDatasetActionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetFileUploadStatus provides a mock function with given fields: ctx, id, fileAllignmentStatus, metadata
func (_m *MockDatasetServiceStore) UpdateDatasetFileUploadStatus(ctx context.Context, id uuid.UUID, fileAllignmentStatus models.DatasetFileAllignmentStatus, metadata models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error) {
	ret := _m.Called(ctx, id, fileAllignmentStatus, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetFileUploadStatus")
	}

	var r0 *models.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error)); ok {
		return rf(ctx, id, fileAllignmentStatus, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) *models.DatasetFileUpload); ok {
		r0 = rf(ctx, id, fileAllignmentStatus, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) error); ok {
		r1 = rf(ctx, id, fileAllignmentStatus, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetFileUploadStatus'
type MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call struct {
	*mock.Call
}

// UpdateDatasetFileUploadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - fileAllignmentStatus models.DatasetFileAllignmentStatus
//   - metadata models.DatasetFileUploadMetadata
func (_e *MockDatasetServiceStore_Expecter) UpdateDatasetFileUploadStatus(ctx interface{}, id interface{}, fileAllignmentStatus interface{}, metadata interface{}) *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call {
	return &MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call{Call: _e.mock.On("UpdateDatasetFileUploadStatus", ctx, id, fileAllignmentStatus, metadata)}
}

func (_c *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, fileAllignmentStatus models.DatasetFileAllignmentStatus, metadata models.DatasetFileUploadMetadata)) *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.DatasetFileAllignmentStatus), args[3].(models.DatasetFileUploadMetadata))
	})
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call) Return(_a0 *models.DatasetFileUpload, _a1 error) *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.DatasetFileAllignmentStatus, models.DatasetFileUploadMetadata) (*models.DatasetFileUpload, error)) *MockDatasetServiceStore_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetPolicy provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockDatasetServiceStore) UpdateDatasetPolicy(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetPolicy")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetServiceStore_UpdateDatasetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetPolicy'
type MockDatasetServiceStore_UpdateDatasetPolicy_Call struct {
	*mock.Call
}

// UpdateDatasetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetServiceStore_Expecter) UpdateDatasetPolicy(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockDatasetServiceStore_UpdateDatasetPolicy_Call {
	return &MockDatasetServiceStore_UpdateDatasetPolicy_Call{Call: _e.mock.On("UpdateDatasetPolicy", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockDatasetServiceStore_UpdateDatasetPolicy_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetServiceStore_UpdateDatasetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetPolicy_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetServiceStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetServiceStore_UpdateDatasetPolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetServiceStore_UpdateDatasetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// WithDatasetTransaction provides a mock function with given fields: ctx, fn
func (_m *MockDatasetServiceStore) WithDatasetTransaction(ctx context.Context, fn func(store.DatasetStore) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithDatasetTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.DatasetStore) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_WithDatasetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDatasetTransaction'
type MockDatasetServiceStore_WithDatasetTransaction_Call struct {
	*mock.Call
}

// WithDatasetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.DatasetStore) error
func (_e *MockDatasetServiceStore_Expecter) WithDatasetTransaction(ctx interface{}, fn interface{}) *MockDatasetServiceStore_WithDatasetTransaction_Call {
	return &MockDatasetServiceStore_WithDatasetTransaction_Call{Call: _e.mock.On("WithDatasetTransaction", ctx, fn)}
}

func (_c *MockDatasetServiceStore_WithDatasetTransaction_Call) Run(run func(ctx context.Context, fn func(store.DatasetStore) error)) *MockDatasetServiceStore_WithDatasetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.DatasetStore) error))
	})
	return _c
}

func (_c *MockDatasetServiceStore_WithDatasetTransaction_Call) Return(_a0 error) *MockDatasetServiceStore_WithDatasetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_WithDatasetTransaction_Call) RunAndReturn(run func(context.Context, func(store.DatasetStore) error) error) *MockDatasetServiceStore_WithDatasetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *MockDatasetServiceStore) WithTx(ctx context.Context, fn func(store.Store) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(store.Store) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetServiceStore_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockDatasetServiceStore_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(store.Store) error
func (_e *MockDatasetServiceStore_Expecter) WithTx(ctx interface{}, fn interface{}) *MockDatasetServiceStore_WithTx_Call {
	return &MockDatasetServiceStore_WithTx_Call{Call: _e.mock.On("WithTx", ctx, fn)}
}

func (_c *MockDatasetServiceStore_WithTx_Call) Run(run func(ctx context.Context, fn func(store.Store) error)) *MockDatasetServiceStore_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(store.Store) error))
	})
	return _c
}

func (_c *MockDatasetServiceStore_WithTx_Call) Return(_a0 error) *MockDatasetServiceStore_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetServiceStore_WithTx_Call) RunAndReturn(run func(context.Context, func(store.Store) error) error) *MockDatasetServiceStore_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatasetServiceStore creates a new instance of MockDatasetServiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatasetServiceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatasetServiceStore {
	mock := &MockDatasetServiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	actionsmodels "github.com/Zampfi/application-platform/services/api/core/dataplatform/actions/models"

	datasetsmodels "github.com/Zampfi/application-platform/services/api/core/datasets/models"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	rulesmodels "github.com/Zampfi/application-platform/services/api/core/rules/models"

	uuid "github.com/google/uuid"
)

// MockDatasetService is an autogenerated mock type for the DatasetService type
type MockDatasetService struct {
	mock.Mock
}

type MockDatasetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatasetService) EXPECT() *MockDatasetService_Expecter {
	return &MockDatasetService_Expecter{mock: &_m.Mock}
}

// AddAudienceToDataset provides a mock function with given fields: ctx, datasetId, audienceType, audienceId, privilege
func (_m *MockDatasetService) AddAudienceToDataset(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceType, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for AddAudienceToDataset")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceType, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceType, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_AddAudienceToDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAudienceToDataset'
type MockDatasetService_AddAudienceToDataset_Call struct {
	*mock.Call
}

// AddAudienceToDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceType models.AudienceType
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetService_Expecter) AddAudienceToDataset(ctx interface{}, datasetId interface{}, audienceType interface{}, audienceId interface{}, privilege interface{}) *MockDatasetService_AddAudienceToDataset_Call {
	return &MockDatasetService_AddAudienceToDataset_Call{Call: _e.mock.On("AddAudienceToDataset", ctx, datasetId, audienceType, audienceId, privilege)}
}

func (_c *MockDatasetService_AddAudienceToDataset_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceType models.AudienceType, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetService_AddAudienceToDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.AudienceType), args[3].(uuid.UUID), args[4].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetService_AddAudienceToDataset_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetService_AddAudienceToDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_AddAudienceToDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.AudienceType, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetService_AddAudienceToDataset_Call {
	_c.Call.Return(run)
	return _c
}

// BulkAddAudienceToDataset provides a mock function with given fields: ctx, datasetId, payload
func (_m *MockDatasetService) BulkAddAudienceToDataset(ctx context.Context, datasetId uuid.UUID, payload datasetsmodels.BulkAddDatasetAudiencePayload) ([]*models.ResourceAudiencePolicy, datasetsmodels.BulkAddDatasetAudienceErrors) {
	ret := _m.Called(ctx, datasetId, payload)

	if len(ret) == 0 {
		panic("no return value specified for BulkAddAudienceToDataset")
	}

	var r0 []*models.ResourceAudiencePolicy
	var r1 datasetsmodels.BulkAddDatasetAudienceErrors
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.BulkAddDatasetAudiencePayload) ([]*models.ResourceAudiencePolicy, datasetsmodels.BulkAddDatasetAudienceErrors)); ok {
		return rf(ctx, datasetId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.BulkAddDatasetAudiencePayload) []*models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, datasetsmodels.BulkAddDatasetAudiencePayload) datasetsmodels.BulkAddDatasetAudienceErrors); ok {
		r1 = rf(ctx, datasetId, payload)
	} else {
		r1 = ret.Get(1).(datasetsmodels.BulkAddDatasetAudienceErrors)
	}

	return r0, r1
}

// MockDatasetService_BulkAddAudienceToDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkAddAudienceToDataset'
type MockDatasetService_BulkAddAudienceToDataset_Call struct {
	*mock.Call
}

// BulkAddAudienceToDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - payload datasetsmodels.BulkAddDatasetAudiencePayload
func (_e *MockDatasetService_Expecter) BulkAddAudienceToDataset(ctx interface{}, datasetId interface{}, payload interface{}) *MockDatasetService_BulkAddAudienceToDataset_Call {
	return &MockDatasetService_BulkAddAudienceToDataset_Call{Call: _e.mock.On("BulkAddAudienceToDataset", ctx, datasetId, payload)}
}

func (_c *MockDatasetService_BulkAddAudienceToDataset_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, payload datasetsmodels.BulkAddDatasetAudiencePayload)) *MockDatasetService_BulkAddAudienceToDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(datasetsmodels.BulkAddDatasetAudiencePayload))
	})
	return _c
}

func (_c *MockDatasetService_BulkAddAudienceToDataset_Call) Return(_a0 []*models.ResourceAudiencePolicy, _a1 datasetsmodels.BulkAddDatasetAudienceErrors) *MockDatasetService_BulkAddAudienceToDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_BulkAddAudienceToDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, datasetsmodels.BulkAddDatasetAudiencePayload) ([]*models.ResourceAudiencePolicy, datasetsmodels.BulkAddDatasetAudienceErrors)) *MockDatasetService_BulkAddAudienceToDataset_Call {
	_c.Call.Return(run)
	return _c
}

// CopyDataset provides a mock function with given fields: ctx, merchantId, userId, params
func (_m *MockDatasetService) CopyDataset(ctx context.Context, merchantId uuid.UUID, userId uuid.UUID, params datasetsmodels.CopyDatasetParams) (string, uuid.UUID, error) {
	ret := _m.Called(ctx, merchantId, userId, params)

	if len(ret) == 0 {
		panic("no return value specified for CopyDataset")
	}

	var r0 string
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.CopyDatasetParams) (string, uuid.UUID, error)); ok {
		return rf(ctx, merchantId, userId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.CopyDatasetParams) string); ok {
		r0 = rf(ctx, merchantId, userId, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.CopyDatasetParams) uuid.UUID); ok {
		r1 = rf(ctx, merchantId, userId, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.CopyDatasetParams) error); ok {
		r2 = rf(ctx, merchantId, userId, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatasetService_CopyDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyDataset'
type MockDatasetService_CopyDataset_Call struct {
	*mock.Call
}

// CopyDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - userId uuid.UUID
//   - params datasetsmodels.CopyDatasetParams
func (_e *MockDatasetService_Expecter) CopyDataset(ctx interface{}, merchantId interface{}, userId interface{}, params interface{}) *MockDatasetService_CopyDataset_Call {
	return &MockDatasetService_CopyDataset_Call{Call: _e.mock.On("CopyDataset", ctx, merchantId, userId, params)}
}

func (_c *MockDatasetService_CopyDataset_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, userId uuid.UUID, params datasetsmodels.CopyDatasetParams)) *MockDatasetService_CopyDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(datasetsmodels.CopyDatasetParams))
	})
	return _c
}

func (_c *MockDatasetService_CopyDataset_Call) Return(_a0 string, _a1 uuid.UUID, _a2 error) *MockDatasetService_CopyDataset_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatasetService_CopyDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.CopyDatasetParams) (string, uuid.UUID, error)) *MockDatasetService_CopyDataset_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetExportAction provides a mock function with given fields: ctx, merchantId, datasetId, queryConfig, userId
func (_m *MockDatasetService) CreateDatasetExportAction(ctx context.Context, merchantId uuid.UUID, datasetId string, queryConfig datasetsmodels.DatasetParams, userId uuid.UUID) (string, error) {
	ret := _m.Called(ctx, merchantId, datasetId, queryConfig, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetExportAction")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams, uuid.UUID) (string, error)); ok {
		return rf(ctx, merchantId, datasetId, queryConfig, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams, uuid.UUID) string); ok {
		r0 = rf(ctx, merchantId, datasetId, queryConfig, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams, uuid.UUID) error); ok {
		r1 = rf(ctx, merchantId, datasetId, queryConfig, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_CreateDatasetExportAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetExportAction'
type MockDatasetService_CreateDatasetExportAction_Call struct {
	*mock.Call
}

// CreateDatasetExportAction is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - queryConfig datasetsmodels.DatasetParams
//   - userId uuid.UUID
func (_e *MockDatasetService_Expecter) CreateDatasetExportAction(ctx interface{}, merchantId interface{}, datasetId interface{}, queryConfig interface{}, userId interface{}) *MockDatasetService_CreateDatasetExportAction_Call {
	return &MockDatasetService_CreateDatasetExportAction_Call{Call: _e.mock.On("CreateDatasetExportAction", ctx, merchantId, datasetId, queryConfig, userId)}
}

func (_c *MockDatasetService_CreateDatasetExportAction_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, queryConfig datasetsmodels.DatasetParams, userId uuid.UUID)) *MockDatasetService_CreateDatasetExportAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(datasetsmodels.DatasetParams), args[4].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_CreateDatasetExportAction_Call) Return(_a0 string, _a1 error) *MockDatasetService_CreateDatasetExportAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_CreateDatasetExportAction_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams, uuid.UUID) (string, error)) *MockDatasetService_CreateDatasetExportAction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatasetFileUpload provides a mock function with given fields: ctx, datasetId, fileId, metadata
func (_m *MockDatasetService) CreateDatasetFileUpload(ctx context.Context, datasetId uuid.UUID, fileId uuid.UUID, metadata json.RawMessage) error {
	ret := _m.Called(ctx, datasetId, fileId, metadata)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetFileUpload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, json.RawMessage) error); ok {
		r0 = rf(ctx, datasetId, fileId, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_CreateDatasetFileUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatasetFileUpload'
type MockDatasetService_CreateDatasetFileUpload_Call struct {
	*mock.Call
}

// CreateDatasetFileUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - fileId uuid.UUID
//   - metadata json.RawMessage
func (_e *MockDatasetService_Expecter) CreateDatasetFileUpload(ctx interface{}, datasetId interface{}, fileId interface{}, metadata interface{}) *MockDatasetService_CreateDatasetFileUpload_Call {
	return &MockDatasetService_CreateDatasetFileUpload_Call{Call: _e.mock.On("CreateDatasetFileUpload", ctx, datasetId, fileId, metadata)}
}

func (_c *MockDatasetService_CreateDatasetFileUpload_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, fileId uuid.UUID, metadata json.RawMessage)) *MockDatasetService_CreateDatasetFileUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(json.RawMessage))
	})
	return _c
}

func (_c *MockDatasetService_CreateDatasetFileUpload_Call) Return(_a0 error) *MockDatasetService_CreateDatasetFileUpload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetService_CreateDatasetFileUpload_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, json.RawMessage) error) *MockDatasetService_CreateDatasetFileUpload_Call {
	_c.Call.Return(run)
	return _c
}

// DatasetExportTemporalActivity provides a mock function with given fields: ctx, params, datasetId, userId, orgIds, workflowId
func (_m *MockDatasetService) DatasetExportTemporalActivity(ctx context.Context, params datasetsmodels.DatasetExportParams, datasetId uuid.UUID, userId uuid.UUID, orgIds []uuid.UUID, workflowId string) (string, error) {
	ret := _m.Called(ctx, params, datasetId, userId, orgIds, workflowId)

	if len(ret) == 0 {
		panic("no return value specified for DatasetExportTemporalActivity")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, datasetsmodels.DatasetExportParams, uuid.UUID, uuid.UUID, []uuid.UUID, string) (string, error)); ok {
		return rf(ctx, params, datasetId, userId, orgIds, workflowId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, datasetsmodels.DatasetExportParams, uuid.UUID, uuid.UUID, []uuid.UUID, string) string); ok {
		r0 = rf(ctx, params, datasetId, userId, orgIds, workflowId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, datasetsmodels.DatasetExportParams, uuid.UUID, uuid.UUID, []uuid.UUID, string) error); ok {
		r1 = rf(ctx, params, datasetId, userId, orgIds, workflowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_DatasetExportTemporalActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatasetExportTemporalActivity'
type MockDatasetService_DatasetExportTemporalActivity_Call struct {
	*mock.Call
}

// DatasetExportTemporalActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - params datasetsmodels.DatasetExportParams
//   - datasetId uuid.UUID
//   - userId uuid.UUID
//   - orgIds []uuid.UUID
//   - workflowId string
func (_e *MockDatasetService_Expecter) DatasetExportTemporalActivity(ctx interface{}, params interface{}, datasetId interface{}, userId interface{}, orgIds interface{}, workflowId interface{}) *MockDatasetService_DatasetExportTemporalActivity_Call {
	return &MockDatasetService_DatasetExportTemporalActivity_Call{Call: _e.mock.On("DatasetExportTemporalActivity", ctx, params, datasetId, userId, orgIds, workflowId)}
}

func (_c *MockDatasetService_DatasetExportTemporalActivity_Call) Run(run func(ctx context.Context, params datasetsmodels.DatasetExportParams, datasetId uuid.UUID, userId uuid.UUID, orgIds []uuid.UUID, workflowId string)) *MockDatasetService_DatasetExportTemporalActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(datasetsmodels.DatasetExportParams), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].([]uuid.UUID), args[5].(string))
	})
	return _c
}

func (_c *MockDatasetService_DatasetExportTemporalActivity_Call) Return(_a0 string, _a1 error) *MockDatasetService_DatasetExportTemporalActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_DatasetExportTemporalActivity_Call) RunAndReturn(run func(context.Context, datasetsmodels.DatasetExportParams, uuid.UUID, uuid.UUID, []uuid.UUID, string) (string, error)) *MockDatasetService_DatasetExportTemporalActivity_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataset provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDatasetService) DeleteDataset(ctx context.Context, merchantId uuid.UUID, datasetId string) (string, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (string, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) string); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_DeleteDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataset'
type MockDatasetService_DeleteDataset_Call struct {
	*mock.Call
}

// DeleteDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
func (_e *MockDatasetService_Expecter) DeleteDataset(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDatasetService_DeleteDataset_Call {
	return &MockDatasetService_DeleteDataset_Call{Call: _e.mock.On("DeleteDataset", ctx, merchantId, datasetId)}
}

func (_c *MockDatasetService_DeleteDataset_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string)) *MockDatasetService_DeleteDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetService_DeleteDataset_Call) Return(_a0 string, _a1 error) *MockDatasetService_DeleteDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_DeleteDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (string, error)) *MockDatasetService_DeleteDataset_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteRawQuery provides a mock function with given fields: ctx, merchantId, datasetId, query, queryParams
func (_m *MockDatasetService) ExecuteRawQuery(ctx context.Context, merchantId uuid.UUID, datasetId string, query string, queryParams map[string]interface{}) (datasetsmodels.DatasetData, error) {
	ret := _m.Called(ctx, merchantId, datasetId, query, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteRawQuery")
	}

	var r0 datasetsmodels.DatasetData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, map[string]interface{}) (datasetsmodels.DatasetData, error)); ok {
		return rf(ctx, merchantId, datasetId, query, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, map[string]interface{}) datasetsmodels.DatasetData); ok {
		r0 = rf(ctx, merchantId, datasetId, query, queryParams)
	} else {
		r0 = ret.Get(0).(datasetsmodels.DatasetData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, merchantId, datasetId, query, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_ExecuteRawQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRawQuery'
type MockDatasetService_ExecuteRawQuery_Call struct {
	*mock.Call
}

// ExecuteRawQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - query string
//   - queryParams map[string]interface{}
func (_e *MockDatasetService_Expecter) ExecuteRawQuery(ctx interface{}, merchantId interface{}, datasetId interface{}, query interface{}, queryParams interface{}) *MockDatasetService_ExecuteRawQuery_Call {
	return &MockDatasetService_ExecuteRawQuery_Call{Call: _e.mock.On("ExecuteRawQuery", ctx, merchantId, datasetId, query, queryParams)}
}

func (_c *MockDatasetService_ExecuteRawQuery_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, query string, queryParams map[string]interface{})) *MockDatasetService_ExecuteRawQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *MockDatasetService_ExecuteRawQuery_Call) Return(_a0 datasetsmodels.DatasetData, _a1 error) *MockDatasetService_ExecuteRawQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_ExecuteRawQuery_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, map[string]interface{}) (datasetsmodels.DatasetData, error)) *MockDatasetService_ExecuteRawQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataByDatasetId provides a mock function with given fields: ctx, merchantId, datasetId, params
func (_m *MockDatasetService) GetDataByDatasetId(ctx context.Context, merchantId uuid.UUID, datasetId string, params datasetsmodels.DatasetParams) (datasetsmodels.DatasetData, error) {
	ret := _m.Called(ctx, merchantId, datasetId, params)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByDatasetId")
	}

	var r0 datasetsmodels.DatasetData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams) (datasetsmodels.DatasetData, error)); ok {
		return rf(ctx, merchantId, datasetId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams) datasetsmodels.DatasetData); ok {
		r0 = rf(ctx, merchantId, datasetId, params)
	} else {
		r0 = ret.Get(0).(datasetsmodels.DatasetData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams) error); ok {
		r1 = rf(ctx, merchantId, datasetId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDataByDatasetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataByDatasetId'
type MockDatasetService_GetDataByDatasetId_Call struct {
	*mock.Call
}

// GetDataByDatasetId is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - params datasetsmodels.DatasetParams
func (_e *MockDatasetService_Expecter) GetDataByDatasetId(ctx interface{}, merchantId interface{}, datasetId interface{}, params interface{}) *MockDatasetService_GetDataByDatasetId_Call {
	return &MockDatasetService_GetDataByDatasetId_Call{Call: _e.mock.On("GetDataByDatasetId", ctx, merchantId, datasetId, params)}
}

func (_c *MockDatasetService_GetDataByDatasetId_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, params datasetsmodels.DatasetParams)) *MockDatasetService_GetDataByDatasetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(datasetsmodels.DatasetParams))
	})
	return _c
}

func (_c *MockDatasetService_GetDataByDatasetId_Call) Return(_a0 datasetsmodels.DatasetData, _a1 error) *MockDatasetService_GetDataByDatasetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDataByDatasetId_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, datasetsmodels.DatasetParams) (datasetsmodels.DatasetData, error)) *MockDatasetService_GetDataByDatasetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetActions provides a mock function with given fields: ctx, merchantId, filters
func (_m *MockDatasetService) GetDatasetActions(ctx context.Context, merchantId uuid.UUID, filters models.DatasetActionFilters) ([]datasetsmodels.DatasetAction, error) {
	ret := _m.Called(ctx, merchantId, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetActions")
	}

	var r0 []datasetsmodels.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]datasetsmodels.DatasetAction, error)); ok {
		return rf(ctx, merchantId, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.DatasetActionFilters) []datasetsmodels.DatasetAction); ok {
		r0 = rf(ctx, merchantId, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.DatasetAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.DatasetActionFilters) error); ok {
		r1 = rf(ctx, merchantId, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetActions'
type MockDatasetService_GetDatasetActions_Call struct {
	*mock.Call
}

// GetDatasetActions is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - filters models.DatasetActionFilters
func (_e *MockDatasetService_Expecter) GetDatasetActions(ctx interface{}, merchantId interface{}, filters interface{}) *MockDatasetService_GetDatasetActions_Call {
	return &MockDatasetService_GetDatasetActions_Call{Call: _e.mock.On("GetDatasetActions", ctx, merchantId, filters)}
}

func (_c *MockDatasetService_GetDatasetActions_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, filters models.DatasetActionFilters)) *MockDatasetService_GetDatasetActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.DatasetActionFilters))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetActions_Call) Return(_a0 []datasetsmodels.DatasetAction, _a1 error) *MockDatasetService_GetDatasetActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetActions_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.DatasetActionFilters) ([]datasetsmodels.DatasetAction, error)) *MockDatasetService_GetDatasetActions_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetAudiences provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetService) GetDatasetAudiences(ctx context.Context, datasetId uuid.UUID) ([]models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetAudiences")
	}

	var r0 []models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetAudiences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetAudiences'
type MockDatasetService_GetDatasetAudiences_Call struct {
	*mock.Call
}

// GetDatasetAudiences is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockDatasetService_Expecter) GetDatasetAudiences(ctx interface{}, datasetId interface{}) *MockDatasetService_GetDatasetAudiences_Call {
	return &MockDatasetService_GetDatasetAudiences_Call{Call: _e.mock.On("GetDatasetAudiences", ctx, datasetId)}
}

func (_c *MockDatasetService_GetDatasetAudiences_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockDatasetService_GetDatasetAudiences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetAudiences_Call) Return(_a0 []models.ResourceAudiencePolicy, _a1 error) *MockDatasetService_GetDatasetAudiences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetAudiences_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.ResourceAudiencePolicy, error)) *MockDatasetService_GetDatasetAudiences_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetCount provides a mock function with given fields: ctx, merchantId, params
func (_m *MockDatasetService) GetDatasetCount(ctx context.Context, merchantId uuid.UUID, params datasetsmodels.DatsetListingParams) (int64, error) {
	ret := _m.Called(ctx, merchantId, params)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) (int64, error)); ok {
		return rf(ctx, merchantId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) int64); ok {
		r0 = rf(ctx, merchantId, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) error); ok {
		r1 = rf(ctx, merchantId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetCount'
type MockDatasetService_GetDatasetCount_Call struct {
	*mock.Call
}

// GetDatasetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - params datasetsmodels.DatsetListingParams
func (_e *MockDatasetService_Expecter) GetDatasetCount(ctx interface{}, merchantId interface{}, params interface{}) *MockDatasetService_GetDatasetCount_Call {
	return &MockDatasetService_GetDatasetCount_Call{Call: _e.mock.On("GetDatasetCount", ctx, merchantId, params)}
}

func (_c *MockDatasetService_GetDatasetCount_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, params datasetsmodels.DatsetListingParams)) *MockDatasetService_GetDatasetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(datasetsmodels.DatsetListingParams))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetCount_Call) Return(_a0 int64, _a1 error) *MockDatasetService_GetDatasetCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetCount_Call) RunAndReturn(run func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) (int64, error)) *MockDatasetService_GetDatasetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetDisplayConfig provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDatasetService) GetDatasetDisplayConfig(ctx context.Context, merchantId uuid.UUID, datasetId string) ([]datasetsmodels.DisplayConfig, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetDisplayConfig")
	}

	var r0 []datasetsmodels.DisplayConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]datasetsmodels.DisplayConfig, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []datasetsmodels.DisplayConfig); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.DisplayConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetDisplayConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetDisplayConfig'
type MockDatasetService_GetDatasetDisplayConfig_Call struct {
	*mock.Call
}

// GetDatasetDisplayConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
func (_e *MockDatasetService_Expecter) GetDatasetDisplayConfig(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDatasetService_GetDatasetDisplayConfig_Call {
	return &MockDatasetService_GetDatasetDisplayConfig_Call{Call: _e.mock.On("GetDatasetDisplayConfig", ctx, merchantId, datasetId)}
}

func (_c *MockDatasetService_GetDatasetDisplayConfig_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string)) *MockDatasetService_GetDatasetDisplayConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetDisplayConfig_Call) Return(_a0 []datasetsmodels.DisplayConfig, _a1 error) *MockDatasetService_GetDatasetDisplayConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetDisplayConfig_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]datasetsmodels.DisplayConfig, error)) *MockDatasetService_GetDatasetDisplayConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetFileUploads provides a mock function with given fields: ctx, datasetId
func (_m *MockDatasetService) GetDatasetFileUploads(ctx context.Context, datasetId uuid.UUID) ([]datasetsmodels.DatasetFileUpload, error) {
	ret := _m.Called(ctx, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetFileUploads")
	}

	var r0 []datasetsmodels.DatasetFileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]datasetsmodels.DatasetFileUpload, error)); ok {
		return rf(ctx, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []datasetsmodels.DatasetFileUpload); ok {
		r0 = rf(ctx, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.DatasetFileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetFileUploads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetFileUploads'
type MockDatasetService_GetDatasetFileUploads_Call struct {
	*mock.Call
}

// GetDatasetFileUploads is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
func (_e *MockDatasetService_Expecter) GetDatasetFileUploads(ctx interface{}, datasetId interface{}) *MockDatasetService_GetDatasetFileUploads_Call {
	return &MockDatasetService_GetDatasetFileUploads_Call{Call: _e.mock.On("GetDatasetFileUploads", ctx, datasetId)}
}

func (_c *MockDatasetService_GetDatasetFileUploads_Call) Run(run func(ctx context.Context, datasetId uuid.UUID)) *MockDatasetService_GetDatasetFileUploads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetFileUploads_Call) Return(_a0 []datasetsmodels.DatasetFileUpload, _a1 error) *MockDatasetService_GetDatasetFileUploads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetFileUploads_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]datasetsmodels.DatasetFileUpload, error)) *MockDatasetService_GetDatasetFileUploads_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetImportPath provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDatasetService) GetDatasetImportPath(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID) (*datasetsmodels.FileImportConfig, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetImportPath")
	}

	var r0 *datasetsmodels.FileImportConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*datasetsmodels.FileImportConfig, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *datasetsmodels.FileImportConfig); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasetsmodels.FileImportConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetImportPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetImportPath'
type MockDatasetService_GetDatasetImportPath_Call struct {
	*mock.Call
}

// GetDatasetImportPath is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId uuid.UUID
func (_e *MockDatasetService_Expecter) GetDatasetImportPath(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDatasetService_GetDatasetImportPath_Call {
	return &MockDatasetService_GetDatasetImportPath_Call{Call: _e.mock.On("GetDatasetImportPath", ctx, merchantId, datasetId)}
}

func (_c *MockDatasetService_GetDatasetImportPath_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID)) *MockDatasetService_GetDatasetImportPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetImportPath_Call) Return(_a0 *datasetsmodels.FileImportConfig, _a1 error) *MockDatasetService_GetDatasetImportPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetImportPath_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*datasetsmodels.FileImportConfig, error)) *MockDatasetService_GetDatasetImportPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatasetListing provides a mock function with given fields: ctx, merchantId, params
func (_m *MockDatasetService) GetDatasetListing(ctx context.Context, merchantId uuid.UUID, params datasetsmodels.DatsetListingParams) ([]datasetsmodels.Dataset, error) {
	ret := _m.Called(ctx, merchantId, params)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetListing")
	}

	var r0 []datasetsmodels.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) ([]datasetsmodels.Dataset, error)); ok {
		return rf(ctx, merchantId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) []datasetsmodels.Dataset); ok {
		r0 = rf(ctx, merchantId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) error); ok {
		r1 = rf(ctx, merchantId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDatasetListing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatasetListing'
type MockDatasetService_GetDatasetListing_Call struct {
	*mock.Call
}

// GetDatasetListing is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - params datasetsmodels.DatsetListingParams
func (_e *MockDatasetService_Expecter) GetDatasetListing(ctx interface{}, merchantId interface{}, params interface{}) *MockDatasetService_GetDatasetListing_Call {
	return &MockDatasetService_GetDatasetListing_Call{Call: _e.mock.On("GetDatasetListing", ctx, merchantId, params)}
}

func (_c *MockDatasetService_GetDatasetListing_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, params datasetsmodels.DatsetListingParams)) *MockDatasetService_GetDatasetListing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(datasetsmodels.DatsetListingParams))
	})
	return _c
}

func (_c *MockDatasetService_GetDatasetListing_Call) Return(_a0 []datasetsmodels.Dataset, _a1 error) *MockDatasetService_GetDatasetListing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDatasetListing_Call) RunAndReturn(run func(context.Context, uuid.UUID, datasetsmodels.DatsetListingParams) ([]datasetsmodels.Dataset, error)) *MockDatasetService_GetDatasetListing_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownloadableDataExportUrl provides a mock function with given fields: ctx, workflowId
func (_m *MockDatasetService) GetDownloadableDataExportUrl(ctx context.Context, workflowId string) (string, error) {
	ret := _m.Called(ctx, workflowId)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadableDataExportUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, workflowId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, workflowId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetDownloadableDataExportUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadableDataExportUrl'
type MockDatasetService_GetDownloadableDataExportUrl_Call struct {
	*mock.Call
}

// GetDownloadableDataExportUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowId string
func (_e *MockDatasetService_Expecter) GetDownloadableDataExportUrl(ctx interface{}, workflowId interface{}) *MockDatasetService_GetDownloadableDataExportUrl_Call {
	return &MockDatasetService_GetDownloadableDataExportUrl_Call{Call: _e.mock.On("GetDownloadableDataExportUrl", ctx, workflowId)}
}

func (_c *MockDatasetService_GetDownloadableDataExportUrl_Call) Run(run func(ctx context.Context, workflowId string)) *MockDatasetService_GetDownloadableDataExportUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatasetService_GetDownloadableDataExportUrl_Call) Return(_a0 string, _a1 error) *MockDatasetService_GetDownloadableDataExportUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetDownloadableDataExportUrl_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockDatasetService_GetDownloadableDataExportUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileUploadPreview provides a mock function with given fields: ctx, fileUploadId
func (_m *MockDatasetService) GetFileUploadPreview(ctx context.Context, fileUploadId uuid.UUID) (models.DatasetPreview, error) {
	ret := _m.Called(ctx, fileUploadId)

	if len(ret) == 0 {
		panic("no return value specified for GetFileUploadPreview")
	}

	var r0 models.DatasetPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.DatasetPreview, error)); ok {
		return rf(ctx, fileUploadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.DatasetPreview); ok {
		r0 = rf(ctx, fileUploadId)
	} else {
		r0 = ret.Get(0).(models.DatasetPreview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fileUploadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetFileUploadPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileUploadPreview'
type MockDatasetService_GetFileUploadPreview_Call struct {
	*mock.Call
}

// GetFileUploadPreview is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
func (_e *MockDatasetService_Expecter) GetFileUploadPreview(ctx interface{}, fileUploadId interface{}) *MockDatasetService_GetFileUploadPreview_Call {
	return &MockDatasetService_GetFileUploadPreview_Call{Call: _e.mock.On("GetFileUploadPreview", ctx, fileUploadId)}
}

func (_c *MockDatasetService_GetFileUploadPreview_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID)) *MockDatasetService_GetFileUploadPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_GetFileUploadPreview_Call) Return(_a0 models.DatasetPreview, _a1 error) *MockDatasetService_GetFileUploadPreview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetFileUploadPreview_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.DatasetPreview, error)) *MockDatasetService_GetFileUploadPreview_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterConfigByDatasetId provides a mock function with given fields: ctx, merchantId, datasetId
func (_m *MockDatasetService) GetFilterConfigByDatasetId(ctx context.Context, merchantId uuid.UUID, datasetId string) ([]datasetsmodels.FilterConfig, map[string]interface{}, error) {
	ret := _m.Called(ctx, merchantId, datasetId)

	if len(ret) == 0 {
		panic("no return value specified for GetFilterConfigByDatasetId")
	}

	var r0 []datasetsmodels.FilterConfig
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]datasetsmodels.FilterConfig, map[string]interface{}, error)); ok {
		return rf(ctx, merchantId, datasetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []datasetsmodels.FilterConfig); ok {
		r0 = rf(ctx, merchantId, datasetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datasetsmodels.FilterConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) map[string]interface{}); ok {
		r1 = rf(ctx, merchantId, datasetId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string) error); ok {
		r2 = rf(ctx, merchantId, datasetId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatasetService_GetFilterConfigByDatasetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterConfigByDatasetId'
type MockDatasetService_GetFilterConfigByDatasetId_Call struct {
	*mock.Call
}

// GetFilterConfigByDatasetId is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
func (_e *MockDatasetService_Expecter) GetFilterConfigByDatasetId(ctx interface{}, merchantId interface{}, datasetId interface{}) *MockDatasetService_GetFilterConfigByDatasetId_Call {
	return &MockDatasetService_GetFilterConfigByDatasetId_Call{Call: _e.mock.On("GetFilterConfigByDatasetId", ctx, merchantId, datasetId)}
}

func (_c *MockDatasetService_GetFilterConfigByDatasetId_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string)) *MockDatasetService_GetFilterConfigByDatasetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetService_GetFilterConfigByDatasetId_Call) Return(_a0 []datasetsmodels.FilterConfig, _a1 map[string]interface{}, _a2 error) *MockDatasetService_GetFilterConfigByDatasetId_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatasetService_GetFilterConfigByDatasetId_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]datasetsmodels.FilterConfig, map[string]interface{}, error)) *MockDatasetService_GetFilterConfigByDatasetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptionsForColumn provides a mock function with given fields: ctx, merchantId, datasetId, column, filterType, respectThreshold
func (_m *MockDatasetService) GetOptionsForColumn(ctx context.Context, merchantId uuid.UUID, datasetId string, column string, filterType string, respectThreshold bool) ([]interface{}, error) {
	ret := _m.Called(ctx, merchantId, datasetId, column, filterType, respectThreshold)

	if len(ret) == 0 {
		panic("no return value specified for GetOptionsForColumn")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, bool) ([]interface{}, error)); ok {
		return rf(ctx, merchantId, datasetId, column, filterType, respectThreshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, bool) []interface{}); ok {
		r0 = rf(ctx, merchantId, datasetId, column, filterType, respectThreshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string, bool) error); ok {
		r1 = rf(ctx, merchantId, datasetId, column, filterType, respectThreshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetOptionsForColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptionsForColumn'
type MockDatasetService_GetOptionsForColumn_Call struct {
	*mock.Call
}

// GetOptionsForColumn is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - column string
//   - filterType string
//   - respectThreshold bool
func (_e *MockDatasetService_Expecter) GetOptionsForColumn(ctx interface{}, merchantId interface{}, datasetId interface{}, column interface{}, filterType interface{}, respectThreshold interface{}) *MockDatasetService_GetOptionsForColumn_Call {
	return &MockDatasetService_GetOptionsForColumn_Call{Call: _e.mock.On("GetOptionsForColumn", ctx, merchantId, datasetId, column, filterType, respectThreshold)}
}

func (_c *MockDatasetService_GetOptionsForColumn_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, column string, filterType string, respectThreshold bool)) *MockDatasetService_GetOptionsForColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *MockDatasetService_GetOptionsForColumn_Call) Return(_a0 []interface{}, _a1 error) *MockDatasetService_GetOptionsForColumn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetOptionsForColumn_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, string, bool) ([]interface{}, error)) *MockDatasetService_GetOptionsForColumn_Call {
	_c.Call.Return(run)
	return _c
}

// GetRowDetailsByUUID provides a mock function with given fields: ctx, merchantId, datasetId, rowUUID
func (_m *MockDatasetService) GetRowDetailsByUUID(ctx context.Context, merchantId uuid.UUID, datasetId string, rowUUID string) (datasetsmodels.ParentDatasetInfo, error) {
	ret := _m.Called(ctx, merchantId, datasetId, rowUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetRowDetailsByUUID")
	}

	var r0 datasetsmodels.ParentDatasetInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (datasetsmodels.ParentDatasetInfo, error)); ok {
		return rf(ctx, merchantId, datasetId, rowUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) datasetsmodels.ParentDatasetInfo); ok {
		r0 = rf(ctx, merchantId, datasetId, rowUUID)
	} else {
		r0 = ret.Get(0).(datasetsmodels.ParentDatasetInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, merchantId, datasetId, rowUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetRowDetailsByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRowDetailsByUUID'
type MockDatasetService_GetRowDetailsByUUID_Call struct {
	*mock.Call
}

// GetRowDetailsByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - rowUUID string
func (_e *MockDatasetService_Expecter) GetRowDetailsByUUID(ctx interface{}, merchantId interface{}, datasetId interface{}, rowUUID interface{}) *MockDatasetService_GetRowDetailsByUUID_Call {
	return &MockDatasetService_GetRowDetailsByUUID_Call{Call: _e.mock.On("GetRowDetailsByUUID", ctx, merchantId, datasetId, rowUUID)}
}

func (_c *MockDatasetService_GetRowDetailsByUUID_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, rowUUID string)) *MockDatasetService_GetRowDetailsByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatasetService_GetRowDetailsByUUID_Call) Return(_a0 datasetsmodels.ParentDatasetInfo, _a1 error) *MockDatasetService_GetRowDetailsByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetRowDetailsByUUID_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) (datasetsmodels.ParentDatasetInfo, error)) *MockDatasetService_GetRowDetailsByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRulesByDatasetColumns provides a mock function with given fields: ctx, orgId, datasetColumns
func (_m *MockDatasetService) GetRulesByDatasetColumns(ctx context.Context, orgId uuid.UUID, datasetColumns []models.DatasetColumn) (map[string]map[string][]rulesmodels.Rule, error) {
	ret := _m.Called(ctx, orgId, datasetColumns)

	if len(ret) == 0 {
		panic("no return value specified for GetRulesByDatasetColumns")
	}

	var r0 map[string]map[string][]rulesmodels.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []models.DatasetColumn) (map[string]map[string][]rulesmodels.Rule, error)); ok {
		return rf(ctx, orgId, datasetColumns)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []models.DatasetColumn) map[string]map[string][]rulesmodels.Rule); ok {
		r0 = rf(ctx, orgId, datasetColumns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]rulesmodels.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []models.DatasetColumn) error); ok {
		r1 = rf(ctx, orgId, datasetColumns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetRulesByDatasetColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRulesByDatasetColumns'
type MockDatasetService_GetRulesByDatasetColumns_Call struct {
	*mock.Call
}

// GetRulesByDatasetColumns is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - datasetColumns []models.DatasetColumn
func (_e *MockDatasetService_Expecter) GetRulesByDatasetColumns(ctx interface{}, orgId interface{}, datasetColumns interface{}) *MockDatasetService_GetRulesByDatasetColumns_Call {
	return &MockDatasetService_GetRulesByDatasetColumns_Call{Call: _e.mock.On("GetRulesByDatasetColumns", ctx, orgId, datasetColumns)}
}

func (_c *MockDatasetService_GetRulesByDatasetColumns_Call) Run(run func(ctx context.Context, orgId uuid.UUID, datasetColumns []models.DatasetColumn)) *MockDatasetService_GetRulesByDatasetColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]models.DatasetColumn))
	})
	return _c
}

func (_c *MockDatasetService_GetRulesByDatasetColumns_Call) Return(_a0 map[string]map[string][]rulesmodels.Rule, _a1 error) *MockDatasetService_GetRulesByDatasetColumns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetRulesByDatasetColumns_Call) RunAndReturn(run func(context.Context, uuid.UUID, []models.DatasetColumn) (map[string]map[string][]rulesmodels.Rule, error)) *MockDatasetService_GetRulesByDatasetColumns_Call {
	_c.Call.Return(run)
	return _c
}

// GetRulesByIds provides a mock function with given fields: ctx, ruleIds
func (_m *MockDatasetService) GetRulesByIds(ctx context.Context, ruleIds []string) ([]rulesmodels.Rule, error) {
	ret := _m.Called(ctx, ruleIds)

	if len(ret) == 0 {
		panic("no return value specified for GetRulesByIds")
	}

	var r0 []rulesmodels.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]rulesmodels.Rule, error)); ok {
		return rf(ctx, ruleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []rulesmodels.Rule); ok {
		r0 = rf(ctx, ruleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rulesmodels.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ruleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_GetRulesByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRulesByIds'
type MockDatasetService_GetRulesByIds_Call struct {
	*mock.Call
}

// GetRulesByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleIds []string
func (_e *MockDatasetService_Expecter) GetRulesByIds(ctx interface{}, ruleIds interface{}) *MockDatasetService_GetRulesByIds_Call {
	return &MockDatasetService_GetRulesByIds_Call{Call: _e.mock.On("GetRulesByIds", ctx, ruleIds)}
}

func (_c *MockDatasetService_GetRulesByIds_Call) Run(run func(ctx context.Context, ruleIds []string)) *MockDatasetService_GetRulesByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockDatasetService_GetRulesByIds_Call) Return(_a0 []rulesmodels.Rule, _a1 error) *MockDatasetService_GetRulesByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_GetRulesByIds_Call) RunAndReturn(run func(context.Context, []string) ([]rulesmodels.Rule, error)) *MockDatasetService_GetRulesByIds_Call {
	_c.Call.Return(run)
	return _c
}

// ImportDataFromFile provides a mock function with given fields: ctx, merchantId, datasetId, fileUploadId
func (_m *MockDatasetService) ImportDataFromFile(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID, fileUploadId uuid.UUID) error {
	ret := _m.Called(ctx, merchantId, datasetId, fileUploadId)

	if len(ret) == 0 {
		panic("no return value specified for ImportDataFromFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, merchantId, datasetId, fileUploadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_ImportDataFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportDataFromFile'
type MockDatasetService_ImportDataFromFile_Call struct {
	*mock.Call
}

// ImportDataFromFile is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId uuid.UUID
//   - fileUploadId uuid.UUID
func (_e *MockDatasetService_Expecter) ImportDataFromFile(ctx interface{}, merchantId interface{}, datasetId interface{}, fileUploadId interface{}) *MockDatasetService_ImportDataFromFile_Call {
	return &MockDatasetService_ImportDataFromFile_Call{Call: _e.mock.On("ImportDataFromFile", ctx, merchantId, datasetId, fileUploadId)}
}

func (_c *MockDatasetService_ImportDataFromFile_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID, fileUploadId uuid.UUID)) *MockDatasetService_ImportDataFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_ImportDataFromFile_Call) Return(err error) *MockDatasetService_ImportDataFromFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatasetService_ImportDataFromFile_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockDatasetService_ImportDataFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateFilePreparationForDatasetImport provides a mock function with given fields: ctx, datasetId, fileId
func (_m *MockDatasetService) InitiateFilePreparationForDatasetImport(ctx context.Context, datasetId uuid.UUID, fileId uuid.UUID) (*uuid.UUID, error) {
	ret := _m.Called(ctx, datasetId, fileId)

	if len(ret) == 0 {
		panic("no return value specified for InitiateFilePreparationForDatasetImport")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*uuid.UUID, error)); ok {
		return rf(ctx, datasetId, fileId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *uuid.UUID); ok {
		r0 = rf(ctx, datasetId, fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, datasetId, fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_InitiateFilePreparationForDatasetImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateFilePreparationForDatasetImport'
type MockDatasetService_InitiateFilePreparationForDatasetImport_Call struct {
	*mock.Call
}

// InitiateFilePreparationForDatasetImport is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - fileId uuid.UUID
func (_e *MockDatasetService_Expecter) InitiateFilePreparationForDatasetImport(ctx interface{}, datasetId interface{}, fileId interface{}) *MockDatasetService_InitiateFilePreparationForDatasetImport_Call {
	return &MockDatasetService_InitiateFilePreparationForDatasetImport_Call{Call: _e.mock.On("InitiateFilePreparationForDatasetImport", ctx, datasetId, fileId)}
}

func (_c *MockDatasetService_InitiateFilePreparationForDatasetImport_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, fileId uuid.UUID)) *MockDatasetService_InitiateFilePreparationForDatasetImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_InitiateFilePreparationForDatasetImport_Call) Return(datasetActionId *uuid.UUID, err error) *MockDatasetService_InitiateFilePreparationForDatasetImport_Call {
	_c.Call.Return(datasetActionId, err)
	return _c
}

func (_c *MockDatasetService_InitiateFilePreparationForDatasetImport_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*uuid.UUID, error)) *MockDatasetService_InitiateFilePreparationForDatasetImport_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterDataset provides a mock function with given fields: ctx, merchantId, userId, datasetCreationInfo
func (_m *MockDatasetService) RegisterDataset(ctx context.Context, merchantId uuid.UUID, userId uuid.UUID, datasetCreationInfo datasetsmodels.DatasetCreationInfo) (string, uuid.UUID, error) {
	ret := _m.Called(ctx, merchantId, userId, datasetCreationInfo)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDataset")
	}

	var r0 string
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.DatasetCreationInfo) (string, uuid.UUID, error)); ok {
		return rf(ctx, merchantId, userId, datasetCreationInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.DatasetCreationInfo) string); ok {
		r0 = rf(ctx, merchantId, userId, datasetCreationInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.DatasetCreationInfo) uuid.UUID); ok {
		r1 = rf(ctx, merchantId, userId, datasetCreationInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.DatasetCreationInfo) error); ok {
		r2 = rf(ctx, merchantId, userId, datasetCreationInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatasetService_RegisterDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDataset'
type MockDatasetService_RegisterDataset_Call struct {
	*mock.Call
}

// RegisterDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - userId uuid.UUID
//   - datasetCreationInfo datasetsmodels.DatasetCreationInfo
func (_e *MockDatasetService_Expecter) RegisterDataset(ctx interface{}, merchantId interface{}, userId interface{}, datasetCreationInfo interface{}) *MockDatasetService_RegisterDataset_Call {
	return &MockDatasetService_RegisterDataset_Call{Call: _e.mock.On("RegisterDataset", ctx, merchantId, userId, datasetCreationInfo)}
}

func (_c *MockDatasetService_RegisterDataset_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, userId uuid.UUID, datasetCreationInfo datasetsmodels.DatasetCreationInfo)) *MockDatasetService_RegisterDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(datasetsmodels.DatasetCreationInfo))
	})
	return _c
}

func (_c *MockDatasetService_RegisterDataset_Call) Return(_a0 string, _a1 uuid.UUID, _a2 error) *MockDatasetService_RegisterDataset_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatasetService_RegisterDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.DatasetCreationInfo) (string, uuid.UUID, error)) *MockDatasetService_RegisterDataset_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterDatasetJob provides a mock function with given fields: ctx, merchantId, jobInfo
func (_m *MockDatasetService) RegisterDatasetJob(ctx context.Context, merchantId uuid.UUID, jobInfo actionsmodels.RegisterJobActionPayload) (string, error) {
	ret := _m.Called(ctx, merchantId, jobInfo)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDatasetJob")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, actionsmodels.RegisterJobActionPayload) (string, error)); ok {
		return rf(ctx, merchantId, jobInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, actionsmodels.RegisterJobActionPayload) string); ok {
		r0 = rf(ctx, merchantId, jobInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, actionsmodels.RegisterJobActionPayload) error); ok {
		r1 = rf(ctx, merchantId, jobInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_RegisterDatasetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDatasetJob'
type MockDatasetService_RegisterDatasetJob_Call struct {
	*mock.Call
}

// RegisterDatasetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - jobInfo actionsmodels.RegisterJobActionPayload
func (_e *MockDatasetService_Expecter) RegisterDatasetJob(ctx interface{}, merchantId interface{}, jobInfo interface{}) *MockDatasetService_RegisterDatasetJob_Call {
	return &MockDatasetService_RegisterDatasetJob_Call{Call: _e.mock.On("RegisterDatasetJob", ctx, merchantId, jobInfo)}
}

func (_c *MockDatasetService_RegisterDatasetJob_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, jobInfo actionsmodels.RegisterJobActionPayload)) *MockDatasetService_RegisterDatasetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(actionsmodels.RegisterJobActionPayload))
	})
	return _c
}

func (_c *MockDatasetService_RegisterDatasetJob_Call) Return(_a0 string, _a1 error) *MockDatasetService_RegisterDatasetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_RegisterDatasetJob_Call) RunAndReturn(run func(context.Context, uuid.UUID, actionsmodels.RegisterJobActionPayload) (string, error)) *MockDatasetService_RegisterDatasetJob_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAudienceFromDataset provides a mock function with given fields: ctx, datasetId, audienceId
func (_m *MockDatasetService) RemoveAudienceFromDataset(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID) error {
	ret := _m.Called(ctx, datasetId, audienceId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAudienceFromDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, datasetId, audienceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_RemoveAudienceFromDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAudienceFromDataset'
type MockDatasetService_RemoveAudienceFromDataset_Call struct {
	*mock.Call
}

// RemoveAudienceFromDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
func (_e *MockDatasetService_Expecter) RemoveAudienceFromDataset(ctx interface{}, datasetId interface{}, audienceId interface{}) *MockDatasetService_RemoveAudienceFromDataset_Call {
	return &MockDatasetService_RemoveAudienceFromDataset_Call{Call: _e.mock.On("RemoveAudienceFromDataset", ctx, datasetId, audienceId)}
}

func (_c *MockDatasetService_RemoveAudienceFromDataset_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID)) *MockDatasetService_RemoveAudienceFromDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatasetService_RemoveAudienceFromDataset_Call) Return(_a0 error) *MockDatasetService_RemoveAudienceFromDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetService_RemoveAudienceFromDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockDatasetService_RemoveAudienceFromDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataset provides a mock function with given fields: ctx, merchantId, datasetId, params
func (_m *MockDatasetService) UpdateDataset(ctx context.Context, merchantId uuid.UUID, datasetId string, params datasetsmodels.UpdateDatasetParams) (string, error) {
	ret := _m.Called(ctx, merchantId, datasetId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.UpdateDatasetParams) (string, error)); ok {
		return rf(ctx, merchantId, datasetId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, datasetsmodels.UpdateDatasetParams) string); ok {
		r0 = rf(ctx, merchantId, datasetId, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, datasetsmodels.UpdateDatasetParams) error); ok {
		r1 = rf(ctx, merchantId, datasetId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_UpdateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataset'
type MockDatasetService_UpdateDataset_Call struct {
	*mock.Call
}

// UpdateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId string
//   - params datasetsmodels.UpdateDatasetParams
func (_e *MockDatasetService_Expecter) UpdateDataset(ctx interface{}, merchantId interface{}, datasetId interface{}, params interface{}) *MockDatasetService_UpdateDataset_Call {
	return &MockDatasetService_UpdateDataset_Call{Call: _e.mock.On("UpdateDataset", ctx, merchantId, datasetId, params)}
}

func (_c *MockDatasetService_UpdateDataset_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId string, params datasetsmodels.UpdateDatasetParams)) *MockDatasetService_UpdateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(datasetsmodels.UpdateDatasetParams))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDataset_Call) Return(_a0 string, _a1 error) *MockDatasetService_UpdateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_UpdateDataset_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, datasetsmodels.UpdateDatasetParams) (string, error)) *MockDatasetService_UpdateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionConfig provides a mock function with given fields: ctx, actionId, config
func (_m *MockDatasetService) UpdateDatasetActionConfig(ctx context.Context, actionId string, config map[string]interface{}) error {
	ret := _m.Called(ctx, actionId, config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, actionId, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_UpdateDatasetActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionConfig'
type MockDatasetService_UpdateDatasetActionConfig_Call struct {
	*mock.Call
}

// UpdateDatasetActionConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - config map[string]interface{}
func (_e *MockDatasetService_Expecter) UpdateDatasetActionConfig(ctx interface{}, actionId interface{}, config interface{}) *MockDatasetService_UpdateDatasetActionConfig_Call {
	return &MockDatasetService_UpdateDatasetActionConfig_Call{Call: _e.mock.On("UpdateDatasetActionConfig", ctx, actionId, config)}
}

func (_c *MockDatasetService_UpdateDatasetActionConfig_Call) Run(run func(ctx context.Context, actionId string, config map[string]interface{})) *MockDatasetService_UpdateDatasetActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDatasetActionConfig_Call) Return(_a0 error) *MockDatasetService_UpdateDatasetActionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetService_UpdateDatasetActionConfig_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *MockDatasetService_UpdateDatasetActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetActionStatus provides a mock function with given fields: ctx, actionId, status
func (_m *MockDatasetService) UpdateDatasetActionStatus(ctx context.Context, actionId string, status string) error {
	ret := _m.Called(ctx, actionId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetActionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, actionId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_UpdateDatasetActionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetActionStatus'
type MockDatasetService_UpdateDatasetActionStatus_Call struct {
	*mock.Call
}

// UpdateDatasetActionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - actionId string
//   - status string
func (_e *MockDatasetService_Expecter) UpdateDatasetActionStatus(ctx interface{}, actionId interface{}, status interface{}) *MockDatasetService_UpdateDatasetActionStatus_Call {
	return &MockDatasetService_UpdateDatasetActionStatus_Call{Call: _e.mock.On("UpdateDatasetActionStatus", ctx, actionId, status)}
}

func (_c *MockDatasetService_UpdateDatasetActionStatus_Call) Run(run func(ctx context.Context, actionId string, status string)) *MockDatasetService_UpdateDatasetActionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDatasetActionStatus_Call) Return(_a0 error) *MockDatasetService_UpdateDatasetActionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetService_UpdateDatasetActionStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDatasetService_UpdateDatasetActionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetAudiencePrivilege provides a mock function with given fields: ctx, datasetId, audienceId, privilege
func (_m *MockDatasetService) UpdateDatasetAudiencePrivilege(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error) {
	ret := _m.Called(ctx, datasetId, audienceId, privilege)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetAudiencePrivilege")
	}

	var r0 *models.ResourceAudiencePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)); ok {
		return rf(ctx, datasetId, audienceId, privilege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) *models.ResourceAudiencePolicy); ok {
		r0 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResourceAudiencePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) error); ok {
		r1 = rf(ctx, datasetId, audienceId, privilege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_UpdateDatasetAudiencePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetAudiencePrivilege'
type MockDatasetService_UpdateDatasetAudiencePrivilege_Call struct {
	*mock.Call
}

// UpdateDatasetAudiencePrivilege is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetId uuid.UUID
//   - audienceId uuid.UUID
//   - privilege models.ResourcePrivilege
func (_e *MockDatasetService_Expecter) UpdateDatasetAudiencePrivilege(ctx interface{}, datasetId interface{}, audienceId interface{}, privilege interface{}) *MockDatasetService_UpdateDatasetAudiencePrivilege_Call {
	return &MockDatasetService_UpdateDatasetAudiencePrivilege_Call{Call: _e.mock.On("UpdateDatasetAudiencePrivilege", ctx, datasetId, audienceId, privilege)}
}

func (_c *MockDatasetService_UpdateDatasetAudiencePrivilege_Call) Run(run func(ctx context.Context, datasetId uuid.UUID, audienceId uuid.UUID, privilege models.ResourcePrivilege)) *MockDatasetService_UpdateDatasetAudiencePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.ResourcePrivilege))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDatasetAudiencePrivilege_Call) Return(_a0 *models.ResourceAudiencePolicy, _a1 error) *MockDatasetService_UpdateDatasetAudiencePrivilege_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_UpdateDatasetAudiencePrivilege_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.ResourcePrivilege) (*models.ResourceAudiencePolicy, error)) *MockDatasetService_UpdateDatasetAudiencePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetData provides a mock function with given fields: ctx, merchantId, datasetId, params
func (_m *MockDatasetService) UpdateDatasetData(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID, params datasetsmodels.UpdateDatasetDataParams) (datasetsmodels.DatasetAction, error) {
	ret := _m.Called(ctx, merchantId, datasetId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetData")
	}

	var r0 datasetsmodels.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateDatasetDataParams) (datasetsmodels.DatasetAction, error)); ok {
		return rf(ctx, merchantId, datasetId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateDatasetDataParams) datasetsmodels.DatasetAction); ok {
		r0 = rf(ctx, merchantId, datasetId, params)
	} else {
		r0 = ret.Get(0).(datasetsmodels.DatasetAction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateDatasetDataParams) error); ok {
		r1 = rf(ctx, merchantId, datasetId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_UpdateDatasetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetData'
type MockDatasetService_UpdateDatasetData_Call struct {
	*mock.Call
}

// UpdateDatasetData is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - datasetId uuid.UUID
//   - params datasetsmodels.UpdateDatasetDataParams
func (_e *MockDatasetService_Expecter) UpdateDatasetData(ctx interface{}, merchantId interface{}, datasetId interface{}, params interface{}) *MockDatasetService_UpdateDatasetData_Call {
	return &MockDatasetService_UpdateDatasetData_Call{Call: _e.mock.On("UpdateDatasetData", ctx, merchantId, datasetId, params)}
}

func (_c *MockDatasetService_UpdateDatasetData_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, datasetId uuid.UUID, params datasetsmodels.UpdateDatasetDataParams)) *MockDatasetService_UpdateDatasetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(datasetsmodels.UpdateDatasetDataParams))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDatasetData_Call) Return(_a0 datasetsmodels.DatasetAction, _a1 error) *MockDatasetService_UpdateDatasetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_UpdateDatasetData_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateDatasetDataParams) (datasetsmodels.DatasetAction, error)) *MockDatasetService_UpdateDatasetData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatasetFileUploadStatus provides a mock function with given fields: ctx, datasetFileUploadId, params
func (_m *MockDatasetService) UpdateDatasetFileUploadStatus(ctx context.Context, datasetFileUploadId uuid.UUID, params datasetsmodels.UpdateDatasetFileUploadParams) error {
	ret := _m.Called(ctx, datasetFileUploadId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetFileUploadStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, datasetsmodels.UpdateDatasetFileUploadParams) error); ok {
		r0 = rf(ctx, datasetFileUploadId, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetService_UpdateDatasetFileUploadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatasetFileUploadStatus'
type MockDatasetService_UpdateDatasetFileUploadStatus_Call struct {
	*mock.Call
}

// UpdateDatasetFileUploadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetFileUploadId uuid.UUID
//   - params datasetsmodels.UpdateDatasetFileUploadParams
func (_e *MockDatasetService_Expecter) UpdateDatasetFileUploadStatus(ctx interface{}, datasetFileUploadId interface{}, params interface{}) *MockDatasetService_UpdateDatasetFileUploadStatus_Call {
	return &MockDatasetService_UpdateDatasetFileUploadStatus_Call{Call: _e.mock.On("UpdateDatasetFileUploadStatus", ctx, datasetFileUploadId, params)}
}

func (_c *MockDatasetService_UpdateDatasetFileUploadStatus_Call) Run(run func(ctx context.Context, datasetFileUploadId uuid.UUID, params datasetsmodels.UpdateDatasetFileUploadParams)) *MockDatasetService_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(datasetsmodels.UpdateDatasetFileUploadParams))
	})
	return _c
}

func (_c *MockDatasetService_UpdateDatasetFileUploadStatus_Call) Return(_a0 error) *MockDatasetService_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetService_UpdateDatasetFileUploadStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, datasetsmodels.UpdateDatasetFileUploadParams) error) *MockDatasetService_UpdateDatasetFileUploadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRulePriority provides a mock function with given fields: ctx, orgId, userId, params
func (_m *MockDatasetService) UpdateRulePriority(ctx context.Context, orgId uuid.UUID, userId uuid.UUID, params datasetsmodels.UpdateRulePriorityParams) (datasetsmodels.DatasetAction, error) {
	ret := _m.Called(ctx, orgId, userId, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRulePriority")
	}

	var r0 datasetsmodels.DatasetAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateRulePriorityParams) (datasetsmodels.DatasetAction, error)); ok {
		return rf(ctx, orgId, userId, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateRulePriorityParams) datasetsmodels.DatasetAction); ok {
		r0 = rf(ctx, orgId, userId, params)
	} else {
		r0 = ret.Get(0).(datasetsmodels.DatasetAction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateRulePriorityParams) error); ok {
		r1 = rf(ctx, orgId, userId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_UpdateRulePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRulePriority'
type MockDatasetService_UpdateRulePriority_Call struct {
	*mock.Call
}

// UpdateRulePriority is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - userId uuid.UUID
//   - params datasetsmodels.UpdateRulePriorityParams
func (_e *MockDatasetService_Expecter) UpdateRulePriority(ctx interface{}, orgId interface{}, userId interface{}, params interface{}) *MockDatasetService_UpdateRulePriority_Call {
	return &MockDatasetService_UpdateRulePriority_Call{Call: _e.mock.On("UpdateRulePriority", ctx, orgId, userId, params)}
}

func (_c *MockDatasetService_UpdateRulePriority_Call) Run(run func(ctx context.Context, orgId uuid.UUID, userId uuid.UUID, params datasetsmodels.UpdateRulePriorityParams)) *MockDatasetService_UpdateRulePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(datasetsmodels.UpdateRulePriorityParams))
	})
	return _c
}

func (_c *MockDatasetService_UpdateRulePriority_Call) Return(_a0 datasetsmodels.DatasetAction, _a1 error) *MockDatasetService_UpdateRulePriority_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_UpdateRulePriority_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, datasetsmodels.UpdateRulePriorityParams) (datasetsmodels.DatasetAction, error)) *MockDatasetService_UpdateRulePriority_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTemplate provides a mock function with given fields: ctx, merchantId, templateConfig
func (_m *MockDatasetService) UpsertTemplate(ctx context.Context, merchantId uuid.UUID, templateConfig actionsmodels.UpsertTemplateActionPayload) (string, error) {
	ret := _m.Called(ctx, merchantId, templateConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, actionsmodels.UpsertTemplateActionPayload) (string, error)); ok {
		return rf(ctx, merchantId, templateConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, actionsmodels.UpsertTemplateActionPayload) string); ok {
		r0 = rf(ctx, merchantId, templateConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, actionsmodels.UpsertTemplateActionPayload) error); ok {
		r1 = rf(ctx, merchantId, templateConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetService_UpsertTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTemplate'
type MockDatasetService_UpsertTemplate_Call struct {
	*mock.Call
}

// UpsertTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantId uuid.UUID
//   - templateConfig actionsmodels.UpsertTemplateActionPayload
func (_e *MockDatasetService_Expecter) UpsertTemplate(ctx interface{}, merchantId interface{}, templateConfig interface{}) *MockDatasetService_UpsertTemplate_Call {
	return &MockDatasetService_UpsertTemplate_Call{Call: _e.mock.On("UpsertTemplate", ctx, merchantId, templateConfig)}
}

func (_c *MockDatasetService_UpsertTemplate_Call) Run(run func(ctx context.Context, merchantId uuid.UUID, templateConfig actionsmodels.UpsertTemplateActionPayload)) *MockDatasetService_UpsertTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(actionsmodels.UpsertTemplateActionPayload))
	})
	return _c
}

func (_c *MockDatasetService_UpsertTemplate_Call) Return(_a0 string, _a1 error) *MockDatasetService_UpsertTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetService_UpsertTemplate_Call) RunAndReturn(run func(context.Context, uuid.UUID, actionsmodels.UpsertTemplateActionPayload) (string, error)) *MockDatasetService_UpsertTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatasetService creates a new instance of MockDatasetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatasetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatasetService {
	mock := &MockDatasetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_fileimports

import (
	context "context"

	fileimports "github.com/Zampfi/application-platform/services/api/core/fileimports"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/db/models"

	uuid "github.com/google/uuid"
)

// MockFileImportService is an autogenerated mock type for the FileImportService type
type MockFileImportService struct {
	mock.Mock
}

type MockFileImportService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileImportService) EXPECT() *MockFileImportService_Expecter {
	return &MockFileImportService_Expecter{mock: &_m.Mock}
}

// AcknowledgeFileImportCompletion provides a mock function with given fields: ctx, fileUploadId
func (_m *MockFileImportService) AcknowledgeFileImportCompletion(ctx context.Context, fileUploadId uuid.UUID) (*models.FileUpload, error) {
	ret := _m.Called(ctx, fileUploadId)

	if len(ret) == 0 {
		panic("no return value specified for AcknowledgeFileImportCompletion")
	}

	var r0 *models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.FileUpload, error)); ok {
		return rf(ctx, fileUploadId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.FileUpload); ok {
		r0 = rf(ctx, fileUploadId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fileUploadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileImportService_AcknowledgeFileImportCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcknowledgeFileImportCompletion'
type MockFileImportService_AcknowledgeFileImportCompletion_Call struct {
	*mock.Call
}

// AcknowledgeFileImportCompletion is a helper method to define mock.On call
//   - ctx context.Context
//   - fileUploadId uuid.UUID
func (_e *MockFileImportService_Expecter) AcknowledgeFileImportCompletion(ctx interface{}, fileUploadId interface{}) *MockFileImportService_AcknowledgeFileImportCompletion_Call {
	return &MockFileImportService_AcknowledgeFileImportCompletion_Call{Call: _e.mock.On("AcknowledgeFileImportCompletion", ctx, fileUploadId)}
}

func (_c *MockFileImportService_AcknowledgeFileImportCompletion_Call) Run(run func(ctx context.Context, fileUploadId uuid.UUID)) *MockFileImportService_AcknowledgeFileImportCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockFileImportService_AcknowledgeFileImportCompletion_Call) Return(_a0 *models.FileUpload, _a1 error) *MockFileImportService_AcknowledgeFileImportCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileImportService_AcknowledgeFileImportCompletion_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.FileUpload, error)) *MockFileImportService_AcknowledgeFileImportCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileUploadByIds provides a mock function with given fields: ctx, ids
func (_m *MockFileImportService) GetFileUploadByIds(ctx context.Context, ids []uuid.UUID) ([]models.FileUpload, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetFileUploadByIds")
	}

	var r0 []models.FileUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]models.FileUpload, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []models.FileUpload); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FileUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileImportService_GetFileUploadByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileUploadByIds'
type MockFileImportService_GetFileUploadByIds_Call struct {
	*mock.Call
}

// GetFileUploadByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockFileImportService_Expecter) GetFileUploadByIds(ctx interface{}, ids interface{}) *MockFileImportService_GetFileUploadByIds_Call {
	return &MockFileImportService_GetFileUploadByIds_Call{Call: _e.mock.On("GetFileUploadByIds", ctx, ids)}
}

func (_c *MockFileImportService_GetFileUploadByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockFileImportService_GetFileUploadByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockFileImportService_GetFileUploadByIds_Call) Return(_a0 []models.FileUpload, _a1 error) *MockFileImportService_GetFileUploadByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileImportService_GetFileUploadByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]models.FileUpload, error)) *MockFileImportService_GetFileUploadByIds_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateFileImport provides a mock function with given fields: ctx, orgId, fileName, fileType
func (_m *MockFileImportService) InitiateFileImport(ctx context.Context, orgId uuid.UUID, fileName string, fileType models.FileType) (*fileimports.FileImportSignedURL, error) {
	ret := _m.Called(ctx, orgId, fileName, fileType)

	if len(ret) == 0 {
		panic("no return value specified for InitiateFileImport")
	}

	var r0 *fileimports.FileImportSignedURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.FileType) (*fileimports.FileImportSignedURL, error)); ok {
		return rf(ctx, orgId, fileName, fileType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.FileType) *fileimports.FileImportSignedURL); ok {
		r0 = rf(ctx, orgId, fileName, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fileimports.FileImportSignedURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.FileType) error); ok {
		r1 = rf(ctx, orgId, fileName, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileImportService_InitiateFileImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateFileImport'
type MockFileImportService_InitiateFileImport_Call struct {
	*mock.Call
}

// InitiateFileImport is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId uuid.UUID
//   - fileName string
//   - fileType models.FileType
func (_e *MockFileImportService_Expecter) InitiateFileImport(ctx interface{}, orgId interface{}, fileName interface{}, fileType interface{}) *MockFileImportService_InitiateFileImport_Call {
	return &MockFileImportService_InitiateFileImport_Call{Call: _e.mock.On("InitiateFileImport", ctx, orgId, fileName, fileType)}
}

func (_c *MockFileImportService_InitiateFileImport_Call) Run(run func(ctx context.Context, orgId uuid.UUID, fileName string, fileType models.FileType)) *MockFileImportService_InitiateFileImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.FileType))
	})
	return _c
}

func (_c *MockFileImportService_InitiateFileImport_Call) Return(_a0 *fileimports.FileImportSignedURL, _a1 error) *MockFileImportService_InitiateFileImport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileImportService_InitiateFileImport_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.FileType) (*fileimports.FileImportSignedURL, error)) *MockFileImportService_InitiateFileImport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileImportService creates a new instance of MockFileImportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileImportService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileImportService {
	mock := &MockFileImportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_cache

import (
	context "context"

	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCacheClient is an autogenerated mock type for the CacheClient type
type MockCacheClient struct {
	mock.Mock
}

type MockCacheClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheClient) EXPECT() *MockCacheClient_Expecter {
	return &MockCacheClient_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with no fields
func (_m *MockCacheClient) Client() *redis.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	return r0
}

// MockCacheClient_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockCacheClient_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockCacheClient_Expecter) Client() *MockCacheClient_Client_Call {
	return &MockCacheClient_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockCacheClient_Client_Call) Run(run func()) *MockCacheClient_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheClient_Client_Call) Return(_a0 *redis.Client) *MockCacheClient_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheClient_Client_Call) RunAndReturn(run func() *redis.Client) *MockCacheClient_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function with given fields: ctx, key
func (_m *MockCacheClient) Decrement(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheClient_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type MockCacheClient_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheClient_Expecter) Decrement(ctx interface{}, key interface{}) *MockCacheClient_Decrement_Call {
	return &MockCacheClient_Decrement_Call{Call: _e.mock.On("Decrement", ctx, key)}
}

func (_c *MockCacheClient_Decrement_Call) Run(run func(ctx context.Context, key string)) *MockCacheClient_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheClient_Decrement_Call) Return(_a0 int64, _a1 error) *MockCacheClient_Decrement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheClient_Decrement_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockCacheClient_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockCacheClient) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheClient_Expecter) Delete(ctx interface{}, key interface{}) *MockCacheClient_Delete_Call {
	return &MockCacheClient_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockCacheClient_Delete_Call) Run(run func(ctx context.Context, key string)) *MockCacheClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheClient_Delete_Call) Return(_a0 error) *MockCacheClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheClient_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockCacheClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, key
func (_m *MockCacheClient) Exists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCacheClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheClient_Expecter) Exists(ctx interface{}, key interface{}) *MockCacheClient_Exists_Call {
	return &MockCacheClient_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockCacheClient_Exists_Call) Run(run func(ctx context.Context, key string)) *MockCacheClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheClient_Exists_Call) Return(_a0 bool, _a1 error) *MockCacheClient_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheClient_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockCacheClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FormatKey provides a mock function with given fields: prefix, id
func (_m *MockCacheClient) FormatKey(prefix string, id interface{}) (string, error) {
	ret := _m.Called(prefix, id)

	if len(ret) == 0 {
		panic("no return value specified for FormatKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (string, error)); ok {
		return rf(prefix, id)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(prefix, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(prefix, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheClient_FormatKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatKey'
type MockCacheClient_FormatKey_Call struct {
	*mock.Call
}

// FormatKey is a helper method to define mock.On call
//   - prefix string
//   - id interface{}
func (_e *MockCacheClient_Expecter) FormatKey(prefix interface{}, id interface{}) *MockCacheClient_FormatKey_Call {
	return &MockCacheClient_FormatKey_Call{Call: _e.mock.On("FormatKey", prefix, id)}
}

func (_c *MockCacheClient_FormatKey_Call) Run(run func(prefix string, id interface{})) *MockCacheClient_FormatKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCacheClient_FormatKey_Call) Return(_a0 string, _a1 error) *MockCacheClient_FormatKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheClient_FormatKey_Call) RunAndReturn(run func(string, interface{}) (string, error)) *MockCacheClient_FormatKey_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key, valuePtr
func (_m *MockCacheClient) Get(ctx context.Context, key string, valuePtr interface{}) error {
	ret := _m.Called(ctx, key, valuePtr)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, valuePtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - valuePtr interface{}
func (_e *MockCacheClient_Expecter) Get(ctx interface{}, key interface{}, valuePtr interface{}) *MockCacheClient_Get_Call {
	return &MockCacheClient_Get_Call{Call: _e.mock.On("Get", ctx, key, valuePtr)}
}

func (_c *MockCacheClient_Get_Call) Run(run func(ctx context.Context, key string, valuePtr interface{})) *MockCacheClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockCacheClient_Get_Call) Return(_a0 error) *MockCacheClient_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheClient_Get_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockCacheClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function with given fields: ctx, key
func (_m *MockCacheClient) Increment(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheClient_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCacheClient_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockCacheClient_Expecter) Increment(ctx interface{}, key interface{}) *MockCacheClient_Increment_Call {
	return &MockCacheClient_Increment_Call{Call: _e.mock.On("Increment", ctx, key)}
}

func (_c *MockCacheClient_Increment_Call) Run(run func(ctx context.Context, key string)) *MockCacheClient_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCacheClient_Increment_Call) Return(_a0 int64, _a1 error) *MockCacheClient_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheClient_Increment_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockCacheClient_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiry
func (_m *MockCacheClient) Set(ctx context.Context, key string, value interface{}, expiry time.Duration) error {
	ret := _m.Called(ctx, key, value, expiry)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiry time.Duration
func (_e *MockCacheClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiry interface{}) *MockCacheClient_Set_Call {
	return &MockCacheClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiry)}
}

func (_c *MockCacheClient_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, expiry time.Duration)) *MockCacheClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCacheClient_Set_Call) Return(_a0 error) *MockCacheClient_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheClient_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *MockCacheClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheClient creates a new instance of MockCacheClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheClient {
	mock := &MockCacheClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/pkg/cloudservices/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCloudService is an autogenerated mock type for the CloudService type
type MockCloudService struct {
	mock.Mock
}

type MockCloudService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudService) EXPECT() *MockCloudService_Expecter {
	return &MockCloudService_Expecter{mock: &_m.Mock}
}

// GetSignedUrlToDownload provides a mock function with given fields: ctx, objectName, optionalConfigs
func (_m *MockCloudService) GetSignedUrlToDownload(ctx context.Context, objectName string, optionalConfigs []models.GetDownloadsignedUrlConfigs) (*string, error) {
	ret := _m.Called(ctx, objectName, optionalConfigs)

	if len(ret) == 0 {
		panic("no return value specified for GetSignedUrlToDownload")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.GetDownloadsignedUrlConfigs) (*string, error)); ok {
		return rf(ctx, objectName, optionalConfigs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.GetDownloadsignedUrlConfigs) *string); ok {
		r0 = rf(ctx, objectName, optionalConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []models.GetDownloadsignedUrlConfigs) error); ok {
		r1 = rf(ctx, objectName, optionalConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudService_GetSignedUrlToDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignedUrlToDownload'
type MockCloudService_GetSignedUrlToDownload_Call struct {
	*mock.Call
}

// GetSignedUrlToDownload is a helper method to define mock.On call
//   - ctx context.Context
//   - objectName string
//   - optionalConfigs []models.GetDownloadsignedUrlConfigs
func (_e *MockCloudService_Expecter) GetSignedUrlToDownload(ctx interface{}, objectName interface{}, optionalConfigs interface{}) *MockCloudService_GetSignedUrlToDownload_Call {
	return &MockCloudService_GetSignedUrlToDownload_Call{Call: _e.mock.On("GetSignedUrlToDownload", ctx, objectName, optionalConfigs)}
}

func (_c *MockCloudService_GetSignedUrlToDownload_Call) Run(run func(ctx context.Context, objectName string, optionalConfigs []models.GetDownloadsignedUrlConfigs)) *MockCloudService_GetSignedUrlToDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]models.GetDownloadsignedUrlConfigs))
	})
	return _c
}

func (_c *MockCloudService_GetSignedUrlToDownload_Call) Return(_a0 *string, _a1 error) *MockCloudService_GetSignedUrlToDownload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudService_GetSignedUrlToDownload_Call) RunAndReturn(run func(context.Context, string, []models.GetDownloadsignedUrlConfigs) (*string, error)) *MockCloudService_GetSignedUrlToDownload_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFileToCloud provides a mock function with given fields: ctx, fileName, fileData
func (_m *MockCloudService) UploadFileToCloud(ctx context.Context, fileName string, fileData []byte) (models.SignedUrlToUpload, error) {
	ret := _m.Called(ctx, fileName, fileData)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileToCloud")
	}

	var r0 models.SignedUrlToUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (models.SignedUrlToUpload, error)); ok {
		return rf(ctx, fileName, fileData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) models.SignedUrlToUpload); ok {
		r0 = rf(ctx, fileName, fileData)
	} else {
		r0 = ret.Get(0).(models.SignedUrlToUpload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, fileName, fileData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudService_UploadFileToCloud_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFileToCloud'
type MockCloudService_UploadFileToCloud_Call struct {
	*mock.Call
}

// UploadFileToCloud is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
//   - fileData []byte
func (_e *MockCloudService_Expecter) UploadFileToCloud(ctx interface{}, fileName interface{}, fileData interface{}) *MockCloudService_UploadFileToCloud_Call {
	return &MockCloudService_UploadFileToCloud_Call{Call: _e.mock.On("UploadFileToCloud", ctx, fileName, fileData)}
}

func (_c *MockCloudService_UploadFileToCloud_Call) Run(run func(ctx context.Context, fileName string, fileData []byte)) *MockCloudService_UploadFileToCloud_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockCloudService_UploadFileToCloud_Call) Return(_a0 models.SignedUrlToUpload, _a1 error) *MockCloudService_UploadFileToCloud_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudService_UploadFileToCloud_Call) RunAndReturn(run func(context.Context, string, []byte) (models.SignedUrlToUpload, error)) *MockCloudService_UploadFileToCloud_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudService creates a new instance of MockCloudService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudService {
	mock := &MockCloudService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

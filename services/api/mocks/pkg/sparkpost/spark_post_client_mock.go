// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_sparkpost

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSparkPostClient is an autogenerated mock type for the SparkPostClient type
type MockSparkPostClient struct {
	mock.Mock
}

type MockSparkPostClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSparkPostClient) EXPECT() *MockSparkPostClient_Expecter {
	return &MockSparkPostClient_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: ctx, from, subject, htmlContent, recipients
func (_m *MockSparkPostClient) SendEmail(ctx context.Context, from string, subject string, htmlContent string, recipients []string) error {
	ret := _m.Called(ctx, from, subject, htmlContent, recipients)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) error); ok {
		r0 = rf(ctx, from, subject, htmlContent, recipients)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSparkPostClient_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockSparkPostClient_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - subject string
//   - htmlContent string
//   - recipients []string
func (_e *MockSparkPostClient_Expecter) SendEmail(ctx interface{}, from interface{}, subject interface{}, htmlContent interface{}, recipients interface{}) *MockSparkPostClient_SendEmail_Call {
	return &MockSparkPostClient_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, from, subject, htmlContent, recipients)}
}

func (_c *MockSparkPostClient_SendEmail_Call) Run(run func(ctx context.Context, from string, subject string, htmlContent string, recipients []string)) *MockSparkPostClient_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockSparkPostClient_SendEmail_Call) Return(_a0 error) *MockSparkPostClient_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSparkPostClient_SendEmail_Call) RunAndReturn(run func(context.Context, string, string, string, []string) error) *MockSparkPostClient_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSparkPostClient creates a new instance of MockSparkPostClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSparkPostClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSparkPostClient {
	mock := &MockSparkPostClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

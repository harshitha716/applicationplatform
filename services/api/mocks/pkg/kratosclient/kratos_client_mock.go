// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_kratosclient

import (
	context "context"

	client "github.com/ory/kratos-client-go"

	http "net/http"

	httputil "net/http/httputil"

	kratosclient "github.com/Zampfi/application-platform/services/api/pkg/kratosclient"

	mock "github.com/stretchr/testify/mock"

	url "net/url"

	zap "go.uber.org/zap"
)

// MockKratosClient is an autogenerated mock type for the KratosClient type
type MockKratosClient struct {
	mock.Mock
}

type MockKratosClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKratosClient) EXPECT() *MockKratosClient_Expecter {
	return &MockKratosClient_Expecter{mock: &_m.Mock}
}

// CreateLoginFlow provides a mock function with given fields: ctx, logger, email
func (_m *MockKratosClient) CreateLoginFlow(ctx context.Context, logger *zap.Logger, email string) (*client.LoginFlow, *http.Response, *kratosclient.Error) {
	ret := _m.Called(ctx, logger, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoginFlow")
	}

	var r0 *client.LoginFlow
	var r1 *http.Response
	var r2 *kratosclient.Error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string) (*client.LoginFlow, *http.Response, *kratosclient.Error)); ok {
		return rf(ctx, logger, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string) *client.LoginFlow); ok {
		r0 = rf(ctx, logger, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LoginFlow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, string) *http.Response); ok {
		r1 = rf(ctx, logger, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *zap.Logger, string) *kratosclient.Error); ok {
		r2 = rf(ctx, logger, email)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*kratosclient.Error)
		}
	}

	return r0, r1, r2
}

// MockKratosClient_CreateLoginFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoginFlow'
type MockKratosClient_CreateLoginFlow_Call struct {
	*mock.Call
}

// CreateLoginFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *zap.Logger
//   - email string
func (_e *MockKratosClient_Expecter) CreateLoginFlow(ctx interface{}, logger interface{}, email interface{}) *MockKratosClient_CreateLoginFlow_Call {
	return &MockKratosClient_CreateLoginFlow_Call{Call: _e.mock.On("CreateLoginFlow", ctx, logger, email)}
}

func (_c *MockKratosClient_CreateLoginFlow_Call) Run(run func(ctx context.Context, logger *zap.Logger, email string)) *MockKratosClient_CreateLoginFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(string))
	})
	return _c
}

func (_c *MockKratosClient_CreateLoginFlow_Call) Return(_a0 *client.LoginFlow, _a1 *http.Response, _a2 *kratosclient.Error) *MockKratosClient_CreateLoginFlow_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockKratosClient_CreateLoginFlow_Call) RunAndReturn(run func(context.Context, *zap.Logger, string) (*client.LoginFlow, *http.Response, *kratosclient.Error)) *MockKratosClient_CreateLoginFlow_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthProxy provides a mock function with no fields
func (_m *MockKratosClient) GetAuthProxy() (*httputil.ReverseProxy, url.URL) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthProxy")
	}

	var r0 *httputil.ReverseProxy
	var r1 url.URL
	if rf, ok := ret.Get(0).(func() (*httputil.ReverseProxy, url.URL)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *httputil.ReverseProxy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httputil.ReverseProxy)
		}
	}

	if rf, ok := ret.Get(1).(func() url.URL); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(url.URL)
	}

	return r0, r1
}

// MockKratosClient_GetAuthProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthProxy'
type MockKratosClient_GetAuthProxy_Call struct {
	*mock.Call
}

// GetAuthProxy is a helper method to define mock.On call
func (_e *MockKratosClient_Expecter) GetAuthProxy() *MockKratosClient_GetAuthProxy_Call {
	return &MockKratosClient_GetAuthProxy_Call{Call: _e.mock.On("GetAuthProxy")}
}

func (_c *MockKratosClient_GetAuthProxy_Call) Run(run func()) *MockKratosClient_GetAuthProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKratosClient_GetAuthProxy_Call) Return(_a0 *httputil.ReverseProxy, _a1 url.URL) *MockKratosClient_GetAuthProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKratosClient_GetAuthProxy_Call) RunAndReturn(run func() (*httputil.ReverseProxy, url.URL)) *MockKratosClient_GetAuthProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionInfo provides a mock function with given fields: ctx, logger, cookie
func (_m *MockKratosClient) GetSessionInfo(ctx context.Context, logger *zap.Logger, cookie string) (*client.Session, *http.Response, *kratosclient.Error) {
	ret := _m.Called(ctx, logger, cookie)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionInfo")
	}

	var r0 *client.Session
	var r1 *http.Response
	var r2 *kratosclient.Error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string) (*client.Session, *http.Response, *kratosclient.Error)); ok {
		return rf(ctx, logger, cookie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string) *client.Session); ok {
		r0 = rf(ctx, logger, cookie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, string) *http.Response); ok {
		r1 = rf(ctx, logger, cookie)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *zap.Logger, string) *kratosclient.Error); ok {
		r2 = rf(ctx, logger, cookie)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*kratosclient.Error)
		}
	}

	return r0, r1, r2
}

// MockKratosClient_GetSessionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionInfo'
type MockKratosClient_GetSessionInfo_Call struct {
	*mock.Call
}

// GetSessionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *zap.Logger
//   - cookie string
func (_e *MockKratosClient_Expecter) GetSessionInfo(ctx interface{}, logger interface{}, cookie interface{}) *MockKratosClient_GetSessionInfo_Call {
	return &MockKratosClient_GetSessionInfo_Call{Call: _e.mock.On("GetSessionInfo", ctx, logger, cookie)}
}

func (_c *MockKratosClient_GetSessionInfo_Call) Run(run func(ctx context.Context, logger *zap.Logger, cookie string)) *MockKratosClient_GetSessionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(string))
	})
	return _c
}

func (_c *MockKratosClient_GetSessionInfo_Call) Return(_a0 *client.Session, _a1 *http.Response, _a2 *kratosclient.Error) *MockKratosClient_GetSessionInfo_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockKratosClient_GetSessionInfo_Call) RunAndReturn(run func(context.Context, *zap.Logger, string) (*client.Session, *http.Response, *kratosclient.Error)) *MockKratosClient_GetSessionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SignupUserEmailPassword provides a mock function with given fields: ctx, logger, email, password
func (_m *MockKratosClient) SignupUserEmailPassword(ctx context.Context, logger *zap.Logger, email string, password string) (*client.Identity, *http.Response, *kratosclient.Error) {
	ret := _m.Called(ctx, logger, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SignupUserEmailPassword")
	}

	var r0 *client.Identity
	var r1 *http.Response
	var r2 *kratosclient.Error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string) (*client.Identity, *http.Response, *kratosclient.Error)); ok {
		return rf(ctx, logger, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, string, string) *client.Identity); ok {
		r0 = rf(ctx, logger, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, string, string) *http.Response); ok {
		r1 = rf(ctx, logger, email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *zap.Logger, string, string) *kratosclient.Error); ok {
		r2 = rf(ctx, logger, email, password)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*kratosclient.Error)
		}
	}

	return r0, r1, r2
}

// MockKratosClient_SignupUserEmailPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignupUserEmailPassword'
type MockKratosClient_SignupUserEmailPassword_Call struct {
	*mock.Call
}

// SignupUserEmailPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *zap.Logger
//   - email string
//   - password string
func (_e *MockKratosClient_Expecter) SignupUserEmailPassword(ctx interface{}, logger interface{}, email interface{}, password interface{}) *MockKratosClient_SignupUserEmailPassword_Call {
	return &MockKratosClient_SignupUserEmailPassword_Call{Call: _e.mock.On("SignupUserEmailPassword", ctx, logger, email, password)}
}

func (_c *MockKratosClient_SignupUserEmailPassword_Call) Run(run func(ctx context.Context, logger *zap.Logger, email string, password string)) *MockKratosClient_SignupUserEmailPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockKratosClient_SignupUserEmailPassword_Call) Return(_a0 *client.Identity, _a1 *http.Response, _a2 *kratosclient.Error) *MockKratosClient_SignupUserEmailPassword_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockKratosClient_SignupUserEmailPassword_Call) RunAndReturn(run func(context.Context, *zap.Logger, string, string) (*client.Identity, *http.Response, *kratosclient.Error)) *MockKratosClient_SignupUserEmailPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKratosClient creates a new instance of MockKratosClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKratosClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKratosClient {
	mock := &MockKratosClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

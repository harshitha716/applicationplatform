// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	models "github.com/Zampfi/application-platform/services/api/pkg/querybuilder/models"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryBuilder is an autogenerated mock type for the QueryBuilder type
type MockQueryBuilder struct {
	mock.Mock
}

type MockQueryBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryBuilder) EXPECT() *MockQueryBuilder_Expecter {
	return &MockQueryBuilder_Expecter{mock: &_m.Mock}
}

// ToFilterSQL provides a mock function with given fields: ctx, filterConfig
func (_m *MockQueryBuilder) ToFilterSQL(ctx context.Context, filterConfig models.FilterModel) (string, map[string]interface{}, error) {
	ret := _m.Called(ctx, filterConfig)

	if len(ret) == 0 {
		panic("no return value specified for ToFilterSQL")
	}

	var r0 string
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterModel) (string, map[string]interface{}, error)); ok {
		return rf(ctx, filterConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterModel) string); ok {
		r0 = rf(ctx, filterConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FilterModel) map[string]interface{}); ok {
		r1 = rf(ctx, filterConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.FilterModel) error); ok {
		r2 = rf(ctx, filterConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockQueryBuilder_ToFilterSQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToFilterSQL'
type MockQueryBuilder_ToFilterSQL_Call struct {
	*mock.Call
}

// ToFilterSQL is a helper method to define mock.On call
//   - ctx context.Context
//   - filterConfig models.FilterModel
func (_e *MockQueryBuilder_Expecter) ToFilterSQL(ctx interface{}, filterConfig interface{}) *MockQueryBuilder_ToFilterSQL_Call {
	return &MockQueryBuilder_ToFilterSQL_Call{Call: _e.mock.On("ToFilterSQL", ctx, filterConfig)}
}

func (_c *MockQueryBuilder_ToFilterSQL_Call) Run(run func(ctx context.Context, filterConfig models.FilterModel)) *MockQueryBuilder_ToFilterSQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FilterModel))
	})
	return _c
}

func (_c *MockQueryBuilder_ToFilterSQL_Call) Return(_a0 string, _a1 map[string]interface{}, _a2 error) *MockQueryBuilder_ToFilterSQL_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockQueryBuilder_ToFilterSQL_Call) RunAndReturn(run func(context.Context, models.FilterModel) (string, map[string]interface{}, error)) *MockQueryBuilder_ToFilterSQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToSQL provides a mock function with given fields: ctx, queryConfig
func (_m *MockQueryBuilder) ToSQL(ctx context.Context, queryConfig models.QueryConfig) (string, map[string]interface{}, error) {
	ret := _m.Called(ctx, queryConfig)

	if len(ret) == 0 {
		panic("no return value specified for ToSQL")
	}

	var r0 string
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.QueryConfig) (string, map[string]interface{}, error)); ok {
		return rf(ctx, queryConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.QueryConfig) string); ok {
		r0 = rf(ctx, queryConfig)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.QueryConfig) map[string]interface{}); ok {
		r1 = rf(ctx, queryConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.QueryConfig) error); ok {
		r2 = rf(ctx, queryConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockQueryBuilder_ToSQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToSQL'
type MockQueryBuilder_ToSQL_Call struct {
	*mock.Call
}

// ToSQL is a helper method to define mock.On call
//   - ctx context.Context
//   - queryConfig models.QueryConfig
func (_e *MockQueryBuilder_Expecter) ToSQL(ctx interface{}, queryConfig interface{}) *MockQueryBuilder_ToSQL_Call {
	return &MockQueryBuilder_ToSQL_Call{Call: _e.mock.On("ToSQL", ctx, queryConfig)}
}

func (_c *MockQueryBuilder_ToSQL_Call) Run(run func(ctx context.Context, queryConfig models.QueryConfig)) *MockQueryBuilder_ToSQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.QueryConfig))
	})
	return _c
}

func (_c *MockQueryBuilder_ToSQL_Call) Return(_a0 string, _a1 map[string]interface{}, _a2 error) *MockQueryBuilder_ToSQL_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockQueryBuilder_ToSQL_Call) RunAndReturn(run func(context.Context, models.QueryConfig) (string, map[string]interface{}, error)) *MockQueryBuilder_ToSQL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryBuilder creates a new instance of MockQueryBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryBuilder {
	mock := &MockQueryBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

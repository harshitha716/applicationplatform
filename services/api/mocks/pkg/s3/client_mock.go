// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_s3

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	s3 "github.com/Zampfi/application-platform/services/api/pkg/s3"

	time "time"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CopyFile provides a mock function with given fields: ctx, srcBucket, srcKey, destBucket, destKey
func (_m *MockClient) CopyFile(ctx context.Context, srcBucket string, srcKey string, destBucket string, destKey string) error {
	ret := _m.Called(ctx, srcBucket, srcKey, destBucket, destKey)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, srcBucket, srcKey, destBucket, destKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CopyFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFile'
type MockClient_CopyFile_Call struct {
	*mock.Call
}

// CopyFile is a helper method to define mock.On call
//   - ctx context.Context
//   - srcBucket string
//   - srcKey string
//   - destBucket string
//   - destKey string
func (_e *MockClient_Expecter) CopyFile(ctx interface{}, srcBucket interface{}, srcKey interface{}, destBucket interface{}, destKey interface{}) *MockClient_CopyFile_Call {
	return &MockClient_CopyFile_Call{Call: _e.mock.On("CopyFile", ctx, srcBucket, srcKey, destBucket, destKey)}
}

func (_c *MockClient_CopyFile_Call) Run(run func(ctx context.Context, srcBucket string, srcKey string, destBucket string, destKey string)) *MockClient_CopyFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockClient_CopyFile_Call) Return(_a0 error) *MockClient_CopyFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CopyFile_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockClient_CopyFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) DeleteFile(ctx context.Context, bucket string, key string) error {
	ret := _m.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockClient_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
func (_e *MockClient_Expecter) DeleteFile(ctx interface{}, bucket interface{}, key interface{}) *MockClient_DeleteFile_Call {
	return &MockClient_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, bucket, key)}
}

func (_c *MockClient_DeleteFile_Call) Run(run func(ctx context.Context, bucket string, key string)) *MockClient_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_DeleteFile_Call) Return(_a0 error) *MockClient_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteFile_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUploadURL provides a mock function with given fields: ctx, bucket, key, expiry
func (_m *MockClient) GenerateUploadURL(ctx context.Context, bucket string, key string, expiry time.Duration) (string, error) {
	ret := _m.Called(ctx, bucket, key, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUploadURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (string, error)); ok {
		return rf(ctx, bucket, key, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) string); ok {
		r0 = rf(ctx, bucket, key, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = rf(ctx, bucket, key, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GenerateUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUploadURL'
type MockClient_GenerateUploadURL_Call struct {
	*mock.Call
}

// GenerateUploadURL is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
//   - expiry time.Duration
func (_e *MockClient_Expecter) GenerateUploadURL(ctx interface{}, bucket interface{}, key interface{}, expiry interface{}) *MockClient_GenerateUploadURL_Call {
	return &MockClient_GenerateUploadURL_Call{Call: _e.mock.On("GenerateUploadURL", ctx, bucket, key, expiry)}
}

func (_c *MockClient_GenerateUploadURL_Call) Run(run func(ctx context.Context, bucket string, key string, expiry time.Duration)) *MockClient_GenerateUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockClient_GenerateUploadURL_Call) Return(_a0 string, _a1 error) *MockClient_GenerateUploadURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GenerateUploadURL_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) (string, error)) *MockClient_GenerateUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileInfo provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) GetFileInfo(ctx context.Context, bucket string, key string) (*s3.FileInfo, error) {
	ret := _m.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInfo")
	}

	var r0 *s3.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*s3.FileInfo, error)); ok {
		return rf(ctx, bucket, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *s3.FileInfo); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileInfo'
type MockClient_GetFileInfo_Call struct {
	*mock.Call
}

// GetFileInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
func (_e *MockClient_Expecter) GetFileInfo(ctx interface{}, bucket interface{}, key interface{}) *MockClient_GetFileInfo_Call {
	return &MockClient_GetFileInfo_Call{Call: _e.mock.On("GetFileInfo", ctx, bucket, key)}
}

func (_c *MockClient_GetFileInfo_Call) Run(run func(ctx context.Context, bucket string, key string)) *MockClient_GetFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetFileInfo_Call) Return(_a0 *s3.FileInfo, _a1 error) *MockClient_GetFileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFileInfo_Call) RunAndReturn(run func(context.Context, string, string) (*s3.FileInfo, error)) *MockClient_GetFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: ctx, bucket, prefix
func (_m *MockClient) ListFiles(ctx context.Context, bucket string, prefix string) ([]s3.FileInfo, error) {
	ret := _m.Called(ctx, bucket, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []s3.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]s3.FileInfo, error)); ok {
		return rf(ctx, bucket, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []s3.FileInfo); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]s3.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockClient_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - prefix string
func (_e *MockClient_Expecter) ListFiles(ctx interface{}, bucket interface{}, prefix interface{}) *MockClient_ListFiles_Call {
	return &MockClient_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, bucket, prefix)}
}

func (_c *MockClient_ListFiles_Call) Run(run func(ctx context.Context, bucket string, prefix string)) *MockClient_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_ListFiles_Call) Return(_a0 []s3.FileInfo, _a1 error) *MockClient_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ListFiles_Call) RunAndReturn(run func(context.Context, string, string) ([]s3.FileInfo, error)) *MockClient_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: ctx, bucket, key
func (_m *MockClient) ReadFile(ctx context.Context, bucket string, key string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, error)); ok {
		return rf(ctx, bucket, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockClient_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
func (_e *MockClient_Expecter) ReadFile(ctx interface{}, bucket interface{}, key interface{}) *MockClient_ReadFile_Call {
	return &MockClient_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, bucket, key)}
}

func (_c *MockClient_ReadFile_Call) Run(run func(ctx context.Context, bucket string, key string)) *MockClient_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_ReadFile_Call) Return(_a0 io.ReadCloser, _a1 error) *MockClient_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ReadFile_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, error)) *MockClient_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFile provides a mock function with given fields: ctx, bucket, oldKey, newKey
func (_m *MockClient) RenameFile(ctx context.Context, bucket string, oldKey string, newKey string) error {
	ret := _m.Called(ctx, bucket, oldKey, newKey)

	if len(ret) == 0 {
		panic("no return value specified for RenameFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucket, oldKey, newKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_RenameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFile'
type MockClient_RenameFile_Call struct {
	*mock.Call
}

// RenameFile is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - oldKey string
//   - newKey string
func (_e *MockClient_Expecter) RenameFile(ctx interface{}, bucket interface{}, oldKey interface{}, newKey interface{}) *MockClient_RenameFile_Call {
	return &MockClient_RenameFile_Call{Call: _e.mock.On("RenameFile", ctx, bucket, oldKey, newKey)}
}

func (_c *MockClient_RenameFile_Call) Run(run func(ctx context.Context, bucket string, oldKey string, newKey string)) *MockClient_RenameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_RenameFile_Call) Return(_a0 error) *MockClient_RenameFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_RenameFile_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockClient_RenameFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

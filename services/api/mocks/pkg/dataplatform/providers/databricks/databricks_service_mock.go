// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_databricks

import (
	context "context"

	jobs "github.com/databricks/databricks-sdk-go/service/jobs"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/models"
)

// MockDatabricksService is an autogenerated mock type for the DatabricksService type
type MockDatabricksService struct {
	mock.Mock
}

type MockDatabricksService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabricksService) EXPECT() *MockDatabricksService_Expecter {
	return &MockDatabricksService_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function with given fields: ctx, jobConfig
func (_m *MockDatabricksService) CreateJob(ctx context.Context, jobConfig *jobs.CreateJob) (*jobs.CreateResponse, error) {
	ret := _m.Called(ctx, jobConfig)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *jobs.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *jobs.CreateJob) (*jobs.CreateResponse, error)); ok {
		return rf(ctx, jobConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *jobs.CreateJob) *jobs.CreateResponse); ok {
		r0 = rf(ctx, jobConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobs.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *jobs.CreateJob) error); ok {
		r1 = rf(ctx, jobConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksService_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockDatabricksService_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobConfig *jobs.CreateJob
func (_e *MockDatabricksService_Expecter) CreateJob(ctx interface{}, jobConfig interface{}) *MockDatabricksService_CreateJob_Call {
	return &MockDatabricksService_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, jobConfig)}
}

func (_c *MockDatabricksService_CreateJob_Call) Run(run func(ctx context.Context, jobConfig *jobs.CreateJob)) *MockDatabricksService_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*jobs.CreateJob))
	})
	return _c
}

func (_c *MockDatabricksService_CreateJob_Call) Return(_a0 *jobs.CreateResponse, _a1 error) *MockDatabricksService_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksService_CreateJob_Call) RunAndReturn(run func(context.Context, *jobs.CreateJob) (*jobs.CreateResponse, error)) *MockDatabricksService_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunDetails provides a mock function with given fields: ctx, runId
func (_m *MockDatabricksService) GetRunDetails(ctx context.Context, runId int64) (*jobs.Run, error) {
	ret := _m.Called(ctx, runId)

	if len(ret) == 0 {
		panic("no return value specified for GetRunDetails")
	}

	var r0 *jobs.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*jobs.Run, error)); ok {
		return rf(ctx, runId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *jobs.Run); ok {
		r0 = rf(ctx, runId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobs.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, runId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksService_GetRunDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunDetails'
type MockDatabricksService_GetRunDetails_Call struct {
	*mock.Call
}

// GetRunDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - runId int64
func (_e *MockDatabricksService_Expecter) GetRunDetails(ctx interface{}, runId interface{}) *MockDatabricksService_GetRunDetails_Call {
	return &MockDatabricksService_GetRunDetails_Call{Call: _e.mock.On("GetRunDetails", ctx, runId)}
}

func (_c *MockDatabricksService_GetRunDetails_Call) Run(run func(ctx context.Context, runId int64)) *MockDatabricksService_GetRunDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDatabricksService_GetRunDetails_Call) Return(_a0 *jobs.Run, _a1 error) *MockDatabricksService_GetRunDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksService_GetRunDetails_Call) RunAndReturn(run func(context.Context, int64) (*jobs.Run, error)) *MockDatabricksService_GetRunDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, table, query, args
func (_m *MockDatabricksService) Query(ctx context.Context, table string, query string, args ...interface{}) (models.QueryResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, table, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 models.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) (models.QueryResult, error)); ok {
		return rf(ctx, table, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...interface{}) models.QueryResult); ok {
		r0 = rf(ctx, table, query, args...)
	} else {
		r0 = ret.Get(0).(models.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...interface{}) error); ok {
		r1 = rf(ctx, table, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksService_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabricksService_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - query string
//   - args ...interface{}
func (_e *MockDatabricksService_Expecter) Query(ctx interface{}, table interface{}, query interface{}, args ...interface{}) *MockDatabricksService_Query_Call {
	return &MockDatabricksService_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, table, query}, args...)...)}
}

func (_c *MockDatabricksService_Query_Call) Run(run func(ctx context.Context, table string, query string, args ...interface{})) *MockDatabricksService_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabricksService_Query_Call) Return(_a0 models.QueryResult, _a1 error) *MockDatabricksService_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksService_Query_Call) RunAndReturn(run func(context.Context, string, string, ...interface{}) (models.QueryResult, error)) *MockDatabricksService_Query_Call {
	_c.Call.Return(run)
	return _c
}

// RunNow provides a mock function with given fields: ctx, params
func (_m *MockDatabricksService) RunNow(ctx context.Context, params jobs.RunNow) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RunNow")
	}

	var r0 *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jobs.RunNow) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jobs.RunNow) *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse]); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jobs.RunNow) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksService_RunNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunNow'
type MockDatabricksService_RunNow_Call struct {
	*mock.Call
}

// RunNow is a helper method to define mock.On call
//   - ctx context.Context
//   - params jobs.RunNow
func (_e *MockDatabricksService_Expecter) RunNow(ctx interface{}, params interface{}) *MockDatabricksService_RunNow_Call {
	return &MockDatabricksService_RunNow_Call{Call: _e.mock.On("RunNow", ctx, params)}
}

func (_c *MockDatabricksService_RunNow_Call) Run(run func(ctx context.Context, params jobs.RunNow)) *MockDatabricksService_RunNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(jobs.RunNow))
	})
	return _c
}

func (_c *MockDatabricksService_RunNow_Call) Return(_a0 *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse], _a1 error) *MockDatabricksService_RunNow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksService_RunNow_Call) RunAndReturn(run func(context.Context, jobs.RunNow) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.RunNowResponse], error)) *MockDatabricksService_RunNow_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitOneTimeJob provides a mock function with given fields: ctx, jobConfig
func (_m *MockDatabricksService) SubmitOneTimeJob(ctx context.Context, jobConfig *jobs.SubmitRun) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse], error) {
	ret := _m.Called(ctx, jobConfig)

	if len(ret) == 0 {
		panic("no return value specified for SubmitOneTimeJob")
	}

	var r0 *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *jobs.SubmitRun) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse], error)); ok {
		return rf(ctx, jobConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *jobs.SubmitRun) *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse]); ok {
		r0 = rf(ctx, jobConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *jobs.SubmitRun) error); ok {
		r1 = rf(ctx, jobConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksService_SubmitOneTimeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitOneTimeJob'
type MockDatabricksService_SubmitOneTimeJob_Call struct {
	*mock.Call
}

// SubmitOneTimeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobConfig *jobs.SubmitRun
func (_e *MockDatabricksService_Expecter) SubmitOneTimeJob(ctx interface{}, jobConfig interface{}) *MockDatabricksService_SubmitOneTimeJob_Call {
	return &MockDatabricksService_SubmitOneTimeJob_Call{Call: _e.mock.On("SubmitOneTimeJob", ctx, jobConfig)}
}

func (_c *MockDatabricksService_SubmitOneTimeJob_Call) Run(run func(ctx context.Context, jobConfig *jobs.SubmitRun)) *MockDatabricksService_SubmitOneTimeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*jobs.SubmitRun))
	})
	return _c
}

func (_c *MockDatabricksService_SubmitOneTimeJob_Call) Return(_a0 *jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse], _a1 error) *MockDatabricksService_SubmitOneTimeJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksService_SubmitOneTimeJob_Call) RunAndReturn(run func(context.Context, *jobs.SubmitRun) (*jobs.WaitGetRunJobTerminatedOrSkipped[jobs.SubmitRunResponse], error)) *MockDatabricksService_SubmitOneTimeJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabricksService creates a new instance of MockDatabricksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabricksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabricksService {
	mock := &MockDatabricksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

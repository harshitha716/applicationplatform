// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_databricks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/models"
)

// MockDatabricksSQLService is an autogenerated mock type for the DatabricksSQLService type
type MockDatabricksSQLService struct {
	mock.Mock
}

type MockDatabricksSQLService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabricksSQLService) EXPECT() *MockDatabricksSQLService_Expecter {
	return &MockDatabricksSQLService_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *MockDatabricksSQLService) Query(ctx context.Context, query string, args ...interface{}) (models.QueryResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 models.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (models.QueryResult, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) models.QueryResult); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(models.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabricksSQLService_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabricksSQLService_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDatabricksSQLService_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockDatabricksSQLService_Query_Call {
	return &MockDatabricksSQLService_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabricksSQLService_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDatabricksSQLService_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabricksSQLService_Query_Call) Return(_a0 models.QueryResult, _a1 error) *MockDatabricksSQLService_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabricksSQLService_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (models.QueryResult, error)) *MockDatabricksSQLService_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabricksSQLService creates a new instance of MockDatabricksSQLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabricksSQLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabricksSQLService {
	mock := &MockDatabricksSQLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

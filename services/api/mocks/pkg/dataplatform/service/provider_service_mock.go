// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_service

import (
	context "context"

	constants "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/constants"

	databricks "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/providers/databricks"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/models"

	pinot "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/providers/pinot"

	postgres "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/providers/postgres"

	provider "github.com/Zampfi/application-platform/services/api/pkg/dataplatform/providers"
)

// MockProviderService is an autogenerated mock type for the ProviderService type
type MockProviderService struct {
	mock.Mock
}

type MockProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderService) EXPECT() *MockProviderService_Expecter {
	return &MockProviderService_Expecter{mock: &_m.Mock}
}

// GetDatabricksService provides a mock function with given fields: ctx, dataProviderId
func (_m *MockProviderService) GetDatabricksService(ctx context.Context, dataProviderId string) (databricks.DatabricksService, error) {
	ret := _m.Called(ctx, dataProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabricksService")
	}

	var r0 databricks.DatabricksService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (databricks.DatabricksService, error)); ok {
		return rf(ctx, dataProviderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) databricks.DatabricksService); ok {
		r0 = rf(ctx, dataProviderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(databricks.DatabricksService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dataProviderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_GetDatabricksService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabricksService'
type MockProviderService_GetDatabricksService_Call struct {
	*mock.Call
}

// GetDatabricksService is a helper method to define mock.On call
//   - ctx context.Context
//   - dataProviderId string
func (_e *MockProviderService_Expecter) GetDatabricksService(ctx interface{}, dataProviderId interface{}) *MockProviderService_GetDatabricksService_Call {
	return &MockProviderService_GetDatabricksService_Call{Call: _e.mock.On("GetDatabricksService", ctx, dataProviderId)}
}

func (_c *MockProviderService_GetDatabricksService_Call) Run(run func(ctx context.Context, dataProviderId string)) *MockProviderService_GetDatabricksService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderService_GetDatabricksService_Call) Return(_a0 databricks.DatabricksService, _a1 error) *MockProviderService_GetDatabricksService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_GetDatabricksService_Call) RunAndReturn(run func(context.Context, string) (databricks.DatabricksService, error)) *MockProviderService_GetDatabricksService_Call {
	_c.Call.Return(run)
	return _c
}

// GetPinotService provides a mock function with given fields: ctx, dataProviderId
func (_m *MockProviderService) GetPinotService(ctx context.Context, dataProviderId string) (pinot.PinotService, error) {
	ret := _m.Called(ctx, dataProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetPinotService")
	}

	var r0 pinot.PinotService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pinot.PinotService, error)); ok {
		return rf(ctx, dataProviderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pinot.PinotService); ok {
		r0 = rf(ctx, dataProviderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pinot.PinotService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dataProviderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_GetPinotService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPinotService'
type MockProviderService_GetPinotService_Call struct {
	*mock.Call
}

// GetPinotService is a helper method to define mock.On call
//   - ctx context.Context
//   - dataProviderId string
func (_e *MockProviderService_Expecter) GetPinotService(ctx interface{}, dataProviderId interface{}) *MockProviderService_GetPinotService_Call {
	return &MockProviderService_GetPinotService_Call{Call: _e.mock.On("GetPinotService", ctx, dataProviderId)}
}

func (_c *MockProviderService_GetPinotService_Call) Run(run func(ctx context.Context, dataProviderId string)) *MockProviderService_GetPinotService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderService_GetPinotService_Call) Return(_a0 pinot.PinotService, _a1 error) *MockProviderService_GetPinotService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_GetPinotService_Call) RunAndReturn(run func(context.Context, string) (pinot.PinotService, error)) *MockProviderService_GetPinotService_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostgresService provides a mock function with given fields: ctx, dataProviderId
func (_m *MockProviderService) GetPostgresService(ctx context.Context, dataProviderId string) (postgres.PostgresService, error) {
	ret := _m.Called(ctx, dataProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetPostgresService")
	}

	var r0 postgres.PostgresService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (postgres.PostgresService, error)); ok {
		return rf(ctx, dataProviderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) postgres.PostgresService); ok {
		r0 = rf(ctx, dataProviderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(postgres.PostgresService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dataProviderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_GetPostgresService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostgresService'
type MockProviderService_GetPostgresService_Call struct {
	*mock.Call
}

// GetPostgresService is a helper method to define mock.On call
//   - ctx context.Context
//   - dataProviderId string
func (_e *MockProviderService_Expecter) GetPostgresService(ctx interface{}, dataProviderId interface{}) *MockProviderService_GetPostgresService_Call {
	return &MockProviderService_GetPostgresService_Call{Call: _e.mock.On("GetPostgresService", ctx, dataProviderId)}
}

func (_c *MockProviderService_GetPostgresService_Call) Run(run func(ctx context.Context, dataProviderId string)) *MockProviderService_GetPostgresService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderService_GetPostgresService_Call) Return(_a0 postgres.PostgresService, _a1 error) *MockProviderService_GetPostgresService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_GetPostgresService_Call) RunAndReturn(run func(context.Context, string) (postgres.PostgresService, error)) *MockProviderService_GetPostgresService_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: ctx, providerType, dataProviderId
func (_m *MockProviderService) GetService(ctx context.Context, providerType constants.ProviderType, dataProviderId string) (provider.ProviderService, error) {
	ret := _m.Called(ctx, providerType, dataProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 provider.ProviderService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, constants.ProviderType, string) (provider.ProviderService, error)); ok {
		return rf(ctx, providerType, dataProviderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, constants.ProviderType, string) provider.ProviderService); ok {
		r0 = rf(ctx, providerType, dataProviderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.ProviderService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, constants.ProviderType, string) error); ok {
		r1 = rf(ctx, providerType, dataProviderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockProviderService_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx context.Context
//   - providerType constants.ProviderType
//   - dataProviderId string
func (_e *MockProviderService_Expecter) GetService(ctx interface{}, providerType interface{}, dataProviderId interface{}) *MockProviderService_GetService_Call {
	return &MockProviderService_GetService_Call{Call: _e.mock.On("GetService", ctx, providerType, dataProviderId)}
}

func (_c *MockProviderService_GetService_Call) Run(run func(ctx context.Context, providerType constants.ProviderType, dataProviderId string)) *MockProviderService_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(constants.ProviderType), args[2].(string))
	})
	return _c
}

func (_c *MockProviderService_GetService_Call) Return(_a0 provider.ProviderService, _a1 error) *MockProviderService_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_GetService_Call) RunAndReturn(run func(context.Context, constants.ProviderType, string) (provider.ProviderService, error)) *MockProviderService_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, providerType, dataProviderId, table, query, args
func (_m *MockProviderService) Query(ctx context.Context, providerType constants.ProviderType, dataProviderId string, table string, query string, args ...interface{}) (models.QueryResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, providerType, dataProviderId, table, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 models.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, constants.ProviderType, string, string, string, ...interface{}) (models.QueryResult, error)); ok {
		return rf(ctx, providerType, dataProviderId, table, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, constants.ProviderType, string, string, string, ...interface{}) models.QueryResult); ok {
		r0 = rf(ctx, providerType, dataProviderId, table, query, args...)
	} else {
		r0 = ret.Get(0).(models.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, constants.ProviderType, string, string, string, ...interface{}) error); ok {
		r1 = rf(ctx, providerType, dataProviderId, table, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockProviderService_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - providerType constants.ProviderType
//   - dataProviderId string
//   - table string
//   - query string
//   - args ...interface{}
func (_e *MockProviderService_Expecter) Query(ctx interface{}, providerType interface{}, dataProviderId interface{}, table interface{}, query interface{}, args ...interface{}) *MockProviderService_Query_Call {
	return &MockProviderService_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, providerType, dataProviderId, table, query}, args...)...)}
}

func (_c *MockProviderService_Query_Call) Run(run func(ctx context.Context, providerType constants.ProviderType, dataProviderId string, table string, query string, args ...interface{})) *MockProviderService_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(constants.ProviderType), args[2].(string), args[3].(string), args[4].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderService_Query_Call) Return(_a0 models.QueryResult, _a1 error) *MockProviderService_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_Query_Call) RunAndReturn(run func(context.Context, constants.ProviderType, string, string, string, ...interface{}) (models.QueryResult, error)) *MockProviderService_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderService creates a new instance of MockProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderService {
	mock := &MockProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

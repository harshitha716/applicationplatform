name: Build and Deploy To Development

on:
  schedule:
    - cron:  '0 19 * * *'
  workflow_dispatch:
  push:
    branches:
    - temporal-sdk
    - development
    paths-ignore:
      - 'helm/dev-values.yaml'
      - 'helm/prd-values.yaml'
      - 'helm/stg-values.yaml'
      - '.github/workflows/*'
env: 
  APP_NAME: hcp

  
concurrency:
  group: development-deploy
  cancel-in-progress: false

jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ubuntu-latest-m
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    timeout-minutes: 2
    outputs:
      GCP_REGION: ${{ steps.vars.outputs.GCP_REGION }}
      GCP_WORKLOAD_IDENTITY_SA: ${{ steps.vars.outputs.GCP_WORKLOAD_IDENTITY_SA }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ steps.vars.outputs.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GKE_ZONE: ${{ steps.vars.outputs.GKE_ZONE }}
      GCP_PROJECT_ID: ${{ steps.vars.outputs.GCP_PROJECT_ID }}
      BUILD_ENV: ${{ steps.vars.outputs.BUILD_ENV }}
      PROJECT_PREFIX: ${{ steps.vars.outputs.PROJECT_PREFIX }}
      K8S_CLUSTER: ${{ steps.vars.outputs.K8S_CLUSTER }}
      K8S_NAMESPACE: ${{ steps.vars.outputs.K8S_NAMESPACE }}
      HELM_CHART_NAME: ${{ steps.vars.outputs.HELM_CHART_NAME }}
      HELM_REPOSITORY: ${{ steps.vars.outputs.HELM_REPOSITORY }}
      APP_NAME: ${{ steps.vars.outputs.APP_NAME }}
      SLACK_WEBHOOK_URL: ${{ steps.vars.outputs.SLACK_WEBHOOK_URL }}
      ENVIRONMENT: ${{ steps.vars.outputs.ENVIRONMENT }}
      SSH_PRIVATE_KEY: ${{ steps.vars.outputs.SSH_PRIVATE_KEY }}
    steps:
    - id: vars
      run: |
          echo "GCP_REGION=asia-southeast1" >> $GITHUB_OUTPUT
          echo "GKE_ZONE=asia-southeast1-a" >> $GITHUB_OUTPUT
          echo "GCP_WORKLOAD_IDENTITY_PROVIDER=projects/622745278345/locations/global/workloadIdentityPools/github-oidc-pool/providers/github-provider" >> $GITHUB_OUTPUT
          echo "GCP_WORKLOAD_IDENTITY_SA=github-action-sa@development-351109.iam.gserviceaccount.com" >> $GITHUB_OUTPUT          
          echo "GCP_PROJECT_ID=development-351109"  >> $GITHUB_OUTPUT
          echo "BUILD_ENV=dev" >> $GITHUB_OUTPUT
          echo "PROJECT_PREFIX=zamp-dev-sg" >> $GITHUB_OUTPUT
          echo "K8S_CLUSTER=zamp-dev-sg-gke-cluster-v2" >> $GITHUB_OUTPUT
          echo "K8S_NAMESPACE=hcp" >> $GITHUB_OUTPUT
          echo "HELM_CHART_NAME=zamp-svc" >> $GITHUB_OUTPUT
          echo "HELM_REPOSITORY=zamp-dev-sg-helm-repository/zamp-svc" >> $GITHUB_OUTPUT
          echo "SLACK_WEBHOOK_URL=DEV_SLACK_WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY=SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
    - name: Output Branch name
      run: |
          echo ":seedling: Branch:${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
  build-push-image:
    needs: 
      - prepare-env
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        app: [hcp-app-migrations, hcp-auth, hcp-api, hcp-dashboard, hcp-pinot-proxy, hcp-api-worker-default, hcp-api-worker-ops]
    name: Build and Push Image
    runs-on: ubuntu-latest-m
    env:
      GCP_WORKLOAD_IDENTITY_PROVIDER : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_PROVIDER}}
      GCP_WORKLOAD_IDENTITY_SA : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_SA}}
      GCP_REGION : ${{needs.prepare-env.outputs.GCP_REGION}}
      GCP_PROJECT_ID: ${{needs.prepare-env.outputs.GCP_PROJECT_ID}}
      ENVIRONMENT : ${{needs.prepare-env.outputs.ENVIRONMENT}}
      # APP_NAME : ${{needs.prepare-env.outputs.APP_NAME}}
      PROJECT_PREFIX : ${{needs.prepare-env.outputs.PROJECT_PREFIX}}
      SSH_PRIVATE_KEY: ${{needs.prepare-env.outputs.SSH_PRIVATE_KEY}}
    
      
    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
      GAR_REPO: ${{ steps.build.outputs.GAR_REPO }}

    steps:

    - name: 'Checkout repository on : ${{ github.REF }}'
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.GCP_WORKLOAD_IDENTITY_SA }}'
      
    - uses: 'docker/login-action@v3'
      with:
        registry: '${{ env.GCP_REGION }}-docker.pkg.dev'
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'

    - id: build
      name: Build and Push Image
      env:
        GAR_REGISTRY: '${{ env.GCP_REGION }}-docker.pkg.dev'
      run: |     
        APP_NAME=${{ matrix.app }}
        echo "Temporary if branch -- fix later"
        if [ "$APP_NAME" = "hcp-api-worker-default" ]; then
          DOCKERFILE="Dockerfile.worker.default"
          DIR_PATH="./services/api"
        elif [ "$APP_NAME" = "hcp-api-worker-ops" ]; then
          DOCKERFILE="Dockerfile.worker.ops"
          DIR_PATH="./services/api"
        else
          DOCKERFILE="Dockerfile"
          DIR_PATH="./services/${APP_NAME#hcp-}"
        fi
        GAR_REPO="${GAR_REGISTRY}/${GCP_PROJECT_ID}/${PROJECT_PREFIX}-container-repo/${APP_NAME}"
        IMAGE_TAG=$GITHUB_SHA
        echo "Building ${APP_NAME} with image tag ${IMAGE_TAG}"
        cd $DIR_PATH
        docker build -f $DOCKERFILE -t $GAR_REPO:$IMAGE_TAG --build-arg SSH_PRIVATE_KEY="${{secrets[env.SSH_PRIVATE_KEY]}}" --build-arg ENVIRONMENT="${{env.ENVIRONMENT}}" .
        docker push $GAR_REPO:$IMAGE_TAG
        echo "GAR_REPO=$GAR_REPO" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo ":whale2:App ${APP_NAME} Image Tag: ${IMAGE_TAG} " >> $GITHUB_STEP_SUMMARY
  clear-migrations:
    name: cleanup migrations
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs: 
      - prepare-env
      - build-push-image
    env:
      APP_NAME : ${{needs.prepare-env.outputs.APP_NAME}}
      GCP_WORKLOAD_IDENTITY_PROVIDER : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_PROVIDER}}
      GCP_WORKLOAD_IDENTITY_SA : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_SA}}
      GCP_REGION : ${{needs.prepare-env.outputs.GCP_REGION}}
      GKE_ZONE : ${{needs.prepare-env.outputs.GKE_ZONE}}
      HELM_REPOSITORY: ${{needs.prepare-env.outputs.HELM_REPOSITORY}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      K8S_NAMESPACE: ${{needs.prepare-env.outputs.K8S_NAMESPACE}}
      K8S_CLUSTER: ${{needs.prepare-env.outputs.K8S_CLUSTER}}
      GAR_REPO: asia-southeast1-docker.pkg.dev/development-351109/zamp-dev-sg-container-repo/${APP_NAME}
      IMAGE_TAG: $GITHUB_SHA-$GITHUB_RUN_NUMBER
      BUILD_ENV: ${{needs.prepare-env.outputs.BUILD_ENV}}
      
    steps:
    - name: 'Checkout repository on : ${{ github.REF }}'
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.GCP_WORKLOAD_IDENTITY_SA }}'

    - uses: azure/setup-helm@v4
      name: Install Helm
      with:
        version: 'v3.7.2' 

    - uses: azure/setup-kubectl@v4
      name: Install kubectl
      with:
        version: 'v1.22.0'
        
    - name: GKE config
      id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: '${{ env.K8S_CLUSTER }}'
        location: '${{ env.GKE_ZONE }}'

    - name: Install helm gcs plugin
      run: |
        helm plugin install https://github.com/hayorov/helm-gcs.git --version 0.4.1
        helm plugin update gcs
    - name: Clear Migrations
      run: |
          if [[ $(helm list -n hcp | grep -c 'hcp-app-migrations') -gt 0 ]]; then
            echo "Migration release found. Uninstalling..."
            helm uninstall hcp-app-migrations -n hcp --timeout 2m0s --wait 
          else
            echo "No existing migration release found. Skipping."
          fi 
        
  deploy-app-migrations:
    name: Deploy App Migrations to K8s
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs: 
      - prepare-env
      - build-push-image
      - clear-migrations
    env:
      APP_NAME : hcp-app-migrations
      GCP_WORKLOAD_IDENTITY_PROVIDER : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_PROVIDER}}
      GCP_WORKLOAD_IDENTITY_SA : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_SA}}
      GCP_REGION : ${{needs.prepare-env.outputs.GCP_REGION}}
      GKE_ZONE : ${{needs.prepare-env.outputs.GKE_ZONE}}
      HELM_REPOSITORY: ${{needs.prepare-env.outputs.HELM_REPOSITORY}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      K8S_NAMESPACE: ${{needs.prepare-env.outputs.K8S_NAMESPACE}}
      K8S_CLUSTER: ${{needs.prepare-env.outputs.K8S_CLUSTER}}
      GAR_REPO: asia-southeast1-docker.pkg.dev/development-351109/zamp-dev-sg-container-repo/hcp-app-migrations
      IMAGE_TAG: $GITHUB_SHA-$GITHUB_RUN_NUMBER
      BUILD_ENV: ${{needs.prepare-env.outputs.BUILD_ENV}}
      
    steps:
    - name: 'Checkout repository on : ${{ github.REF }}'
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.GCP_WORKLOAD_IDENTITY_SA }}'

    - uses: azure/setup-helm@v4
      name: Install Helm
      with:
        version: 'v3.7.2' 

    - uses: azure/setup-kubectl@v4
      name: Install kubectl
      with:
        version: 'v1.22.0'
        
    - name: GKE config
      id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: '${{ env.K8S_CLUSTER }}'
        location: '${{ env.GKE_ZONE }}'

    - name: Install helm gcs plugin
      run: |
        helm plugin install https://github.com/hayorov/helm-gcs.git --version 0.4.1
        helm plugin update gcs

    - name: Deploy App Migrations
      run: |
        IMAGE_TAG=$GITHUB_SHA
        VALUES_FILE=helm/${BUILD_ENV}-app-migrations-values.yaml
        cat ${VALUES_FILE}
        echo "Deploying ${APP_NAME} with image tag ${IMAGE_TAG}"
        helm repo add ${K8S_NAMESPACE}-repo gs://${HELM_REPOSITORY} && helm repo update
        helm upgrade --install ${APP_NAME} ${K8S_NAMESPACE}-repo/${HELM_CHART_NAME} \
            --namespace ${K8S_NAMESPACE} \
            --set default.image.repository="${GAR_REPO}" \
            --set default.image.tag="${IMAGE_TAG}" \
            --values helm/${BUILD_ENV}-app-migrations-values.yaml \
            --wait \
            --timeout 12m0s \
            --create-namespace
            
        # Check if the job completed successfully
        echo "Checking job status for ${APP_NAME}..."
        sleep 10 # Give some time for the job to start
        
        # Check if job exists
        if ! kubectl get jobs zamp-hcp-app-migrations-app-migrations -n ${K8S_NAMESPACE} &> /dev/null; then
          echo "Error: No job found for ${APP_NAME}"
          exit 1
        fi
        
        # Check if job failed
        echo "Checking job status for ${APP_NAME}..."
        JOB_STATUS=$(kubectl get jobs zamp-hcp-app-migrations-app-migrations -n ${K8S_NAMESPACE} -o=jsonpath='{.status.conditions[?(@.type=="Failed")].status}')
        if [ "$JOB_STATUS" == "True" ]; then
          echo "Error: Job ${APP_NAME} failed"
          exit 1
        fi
        
        echo "Job ${APP_NAME} is running successfully or has completed"

  deploy-other-services:
    strategy:
      matrix:
        app: [hcp-auth, hcp-api, hcp-dashboard, hcp-pinot-proxy, hcp-api-worker-default, hcp-api-worker-ops]
    name: Deploy Other Services to K8s
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs: 
      - prepare-env
      - build-push-image
      - deploy-app-migrations
    env:
      APP_NAME : ${{ matrix.app }}
      GCP_WORKLOAD_IDENTITY_PROVIDER : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_PROVIDER}}
      GCP_WORKLOAD_IDENTITY_SA : ${{needs.prepare-env.outputs.GCP_WORKLOAD_IDENTITY_SA}}
      GCP_REGION : ${{needs.prepare-env.outputs.GCP_REGION}}
      GKE_ZONE : ${{needs.prepare-env.outputs.GKE_ZONE}}
      HELM_REPOSITORY: ${{needs.prepare-env.outputs.HELM_REPOSITORY}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      K8S_NAMESPACE: ${{needs.prepare-env.outputs.K8S_NAMESPACE}}
      K8S_CLUSTER: ${{needs.prepare-env.outputs.K8S_CLUSTER}}
      GAR_REPO: asia-southeast1-docker.pkg.dev/development-351109/zamp-dev-sg-container-repo/${APP_NAME}
      IMAGE_TAG: $GITHUB_SHA-$GITHUB_RUN_NUMBER
      BUILD_ENV: ${{needs.prepare-env.outputs.BUILD_ENV}}
      
    steps:
    - name: 'Checkout repository on : ${{ github.REF }}'
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.GCP_WORKLOAD_IDENTITY_SA }}'

    - uses: azure/setup-helm@v4
      name: Install Helm
      with:
        version: 'v3.7.2' 

    - uses: azure/setup-kubectl@v4
      name: Install kubectl
      with:
        version: 'v1.22.0'
        
    - name: GKE config
      id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
        cluster_name: '${{ env.K8S_CLUSTER }}'
        location: '${{ env.GKE_ZONE }}'

    - name: Install helm gcs plugin
      run: |
        helm plugin install https://github.com/hayorov/helm-gcs.git --version 0.4.1
        helm plugin update gcs

    - name: Deploy
      run: |
        IMAGE_TAG=$GITHUB_SHA
        APP_NAME=${{ matrix.app }}
        GAR_REPO=asia-southeast1-docker.pkg.dev/development-351109/zamp-dev-sg-container-repo/${APP_NAME}
        VALUES_FILE=helm/${BUILD_ENV}-${APP_NAME#hcp-}-values.yaml
        cat ${VALUES_FILE}
        echo "Deploying ${APP_NAME} with image tag ${IMAGE_TAG}"
        helm repo add ${K8S_NAMESPACE}-repo gs://${HELM_REPOSITORY} && helm repo update
        helm upgrade --install ${APP_NAME} ${K8S_NAMESPACE}-repo/${HELM_CHART_NAME} \
            --namespace ${K8S_NAMESPACE} \
            --set default.image.repository="${GAR_REPO}" \
            --set default.image.tag="${IMAGE_TAG}" \
            --values helm/${BUILD_ENV}-${APP_NAME#hcp-}-values.yaml \
            --wait \
            --timeout 12m0s \
            --create-namespace
  ## Slack Alert

  slack-notification:
      name: Slack Notification
      if: always()
      runs-on: ubuntu-latest
      needs:
        - prepare-env
        - build-push-image
        - deploy-app-migrations
        - deploy-other-services
      env:
       SLACK_WEBHOOK_URL: ${{needs.prepare-env.outputs.SLACK_WEBHOOK_URL}}
       ENVIRONMENT: ${{needs.prepare-env.outputs.ENVIRONMENT}}
      steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Update slack message body and environment
        id: body
        run: |
          if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]
          then
            echo "SLACK_MESSAGE=Success :white_check_mark:" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ]
          then
            echo "SLACK_MESSAGE=Failed :x:"   >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ]
          then
            echo "SLACK_MESSAGE=Cancelled :grey_exclamation:"   >> $GITHUB_OUTPUT
          fi
      - name: Slack Notification
        uses: Zampfi/town_crier@main
        env:
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://media-exp1.licdn.com/dms/image/C4D0BAQEsXCky1jDBjw/company-logo_200_200/0/1650191766210?e=2147483647&v=beta&t=skUuL49MkcdxJZmEEN2wy5E7Xqy176Ar7EPsKoSMUEE
          SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
          SLACK_TITLE: Build Status
          SLACK_FOOTER: '<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>'
          ZAMP_ENV: ${{ env.ENVIRONMENT }}
          SLACK_USERNAME: Zamp-Devops
          SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_URL] }}
